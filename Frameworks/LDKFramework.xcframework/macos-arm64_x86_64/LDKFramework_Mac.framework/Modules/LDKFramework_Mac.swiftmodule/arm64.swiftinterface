// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-macos11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LDKFramework_Mac
import Foundation
@_exported import LDKFramework_Mac
import Swift
import _Concurrency
@_hasMissingDesignatedInitializers open class BroadcasterInterface : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKBroadcasterInterface)
  public init(pointer: LDKFramework_Mac.LDKBroadcasterInterface, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func broadcast_transaction(tx: [Swift.UInt8])
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedBroadcasterInterface : LDKFramework_Mac.BroadcasterInterface {
  override public func broadcast_transaction(tx: [Swift.UInt8])
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKBroadcasterInterface)
  override public init(pointer: LDKFramework_Mac.LDKBroadcasterInterface, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UpdateFailHTLC : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKUpdateFailHTLC)
  public init(pointer: LDKFramework_Mac.LDKUpdateFailHTLC, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.UpdateFailHTLC
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UpdateFailHTLCDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodeId : LDKFramework_Mac.NativeTypeWrapper {
  public init(pubkey: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKNodeId)
  public init(pointer: LDKFramework_Mac.LDKNodeId, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.NodeId
  public func as_slice() -> [Swift.UInt8]
  public func hash() -> Swift.UInt64
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_NodeIdDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MonitorEvent : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKMonitorEvent)
  public init(pointer: LDKFramework_Mac.LDKMonitorEvent, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum MonitorEventValueType {
    case HTLCEvent, CommitmentTxConfirmed, UpdateCompleted, UpdateFailed
    public static func == (a: LDKFramework_Mac.MonitorEvent.MonitorEventValueType, b: LDKFramework_Mac.MonitorEvent.MonitorEventValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.MonitorEvent.MonitorEventValueType?
  public func getValueAsHTLCEvent() -> LDKFramework_Mac.HTLCUpdate?
  public func getValueAsCommitmentTxConfirmed() -> LDKFramework_Mac.OutPoint?
  public func getValueAsUpdateCompleted() -> LDKFramework_Mac.MonitorEvent.UpdateCompleted?
  public func getValueAsUpdateFailed() -> LDKFramework_Mac.OutPoint?
  @objc deinit
  public func clone() -> LDKFramework_Mac.MonitorEvent
  public class func htlcevent(a: LDKFramework_Mac.HTLCUpdate) -> LDKFramework_Mac.MonitorEvent
  public class func commitment_tx_confirmed(a: LDKFramework_Mac.OutPoint) -> LDKFramework_Mac.MonitorEvent
  public class func update_completed(funding_txo: LDKFramework_Mac.OutPoint, monitor_update_id: Swift.UInt64) -> LDKFramework_Mac.MonitorEvent
  public class func update_failed(a: LDKFramework_Mac.OutPoint) -> LDKFramework_Mac.MonitorEvent
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_COption_MonitorEventZDecodeErrorZ
  @_hasMissingDesignatedInitializers public class UpdateCompleted : LDKFramework_Mac.NativeTypeWrapper {
    public func getFunding_txo() -> LDKFramework_Mac.OutPoint?
    public func getMonitor_update_id() -> Swift.UInt64
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class Result_UnsignedChannelUpdateDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UnsignedChannelUpdateDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UnsignedChannelUpdateDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UnsignedChannelUpdate?
  public class func ok(o: LDKFramework_Mac.UnsignedChannelUpdate) -> LDKFramework_Mac.Result_UnsignedChannelUpdateDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UnsignedChannelUpdateDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UnsignedChannelUpdateDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NodeInfoDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeInfoDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeInfoDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.NodeInfo?
  public class func ok(o: LDKFramework_Mac.NodeInfo) -> LDKFramework_Mac.Result_NodeInfoDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_NodeInfoDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NodeInfoDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Option_TypeZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.BindingsType?)
  public init(pointer: LDKFramework_Mac.LDKCOption_TypeZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_TypeZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.BindingsType?
  public class func some(o: LDKFramework_Mac.BindingsType) -> LDKFramework_Mac.Option_TypeZ
  public class func none() -> LDKFramework_Mac.Option_TypeZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_TypeZ
}
@_hasMissingDesignatedInitializers public class Result_OutPointDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_OutPointDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_OutPointDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.OutPoint?
  public class func ok(o: LDKFramework_Mac.OutPoint) -> LDKFramework_Mac.Result_OutPointDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_OutPointDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_OutPointDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class PrivateRoute : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKPrivateRoute)
  public init(pointer: LDKFramework_Mac.LDKPrivateRoute, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.PrivateRoute
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.PrivateRoute, b: LDKFramework_Mac.PrivateRoute) -> Swift.Bool
  public class func new(hops: LDKFramework_Mac.RouteHint) -> LDKFramework_Mac.Result_PrivateRouteCreationErrorZ
  public func into_inner() -> LDKFramework_Mac.RouteHint
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Init : LDKFramework_Mac.NativeTypeWrapper {
  public init(features_arg: LDKFramework_Mac.InitFeatures, remote_network_address_arg: LDKFramework_Mac.Option_NetAddressZ)
  public init(pointer: LDKFramework_Mac.LDKInit)
  public init(pointer: LDKFramework_Mac.LDKInit, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_features() -> LDKFramework_Mac.InitFeatures
  public func set_features(val: LDKFramework_Mac.InitFeatures)
  public func get_remote_network_address() -> LDKFramework_Mac.Option_NetAddressZ
  public func set_remote_network_address(val: LDKFramework_Mac.Option_NetAddressZ)
  public func clone() -> LDKFramework_Mac.Init
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_InitDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelCounterparty : LDKFramework_Mac.NativeTypeWrapper {
  public init(node_id_arg: [Swift.UInt8], features_arg: LDKFramework_Mac.InitFeatures, unspendable_punishment_reserve_arg: Swift.UInt64, forwarding_info_arg: LDKFramework_Mac.CounterpartyForwardingInfo)
  public init(pointer: LDKFramework_Mac.LDKChannelCounterparty)
  public init(pointer: LDKFramework_Mac.LDKChannelCounterparty, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_node_id() -> [Swift.UInt8]
  public func set_node_id(val: [Swift.UInt8])
  public func get_features() -> LDKFramework_Mac.InitFeatures
  public func set_features(val: LDKFramework_Mac.InitFeatures)
  public func get_unspendable_punishment_reserve() -> Swift.UInt64
  public func set_unspendable_punishment_reserve(val: Swift.UInt64)
  public func get_forwarding_info() -> LDKFramework_Mac.CounterpartyForwardingInfo
  public func set_forwarding_info(val: LDKFramework_Mac.CounterpartyForwardingInfo)
  public func clone() -> LDKFramework_Mac.ChannelCounterparty
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelCounterpartyDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_RouteDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Route?
  public class func ok(o: LDKFramework_Mac.Route) -> LDKFramework_Mac.Result_RouteDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_RouteDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RouteDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class BuiltCommitmentTransaction : LDKFramework_Mac.NativeTypeWrapper {
  public init(transaction_arg: [Swift.UInt8], txid_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKBuiltCommitmentTransaction)
  public init(pointer: LDKFramework_Mac.LDKBuiltCommitmentTransaction, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_transaction() -> [Swift.UInt8]
  public func set_transaction(val: [Swift.UInt8])
  public func get_txid() -> [Swift.UInt8]
  public func set_txid(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.BuiltCommitmentTransaction
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_BuiltCommitmentTransactionDecodeErrorZ
  public func get_sighash_all(funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
  public func sign(funding_key: [Swift.UInt8], funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_SignedRawInvoiceParseErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_SignedRawInvoiceParseErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_SignedRawInvoiceParseErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.ParseError?
  public func getValue() -> LDKFramework_Mac.SignedRawInvoice?
  public class func ok(o: LDKFramework_Mac.SignedRawInvoice) -> LDKFramework_Mac.Result_SignedRawInvoiceParseErrorZ
  public class func err(e: LDKFramework_Mac.ParseError) -> LDKFramework_Mac.Result_SignedRawInvoiceParseErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_SignedRawInvoiceParseErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NetworkGraphDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NetworkGraphDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NetworkGraphDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.NetworkGraph?
  public class func ok(o: LDKFramework_Mac.NetworkGraph) -> LDKFramework_Mac.Result_NetworkGraphDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_NetworkGraphDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NetworkGraphDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_PhantomRouteHintsDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PhantomRouteHintsDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PhantomRouteHintsDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.PhantomRouteHints?
  public class func ok(o: LDKFramework_Mac.PhantomRouteHints) -> LDKFramework_Mac.Result_PhantomRouteHintsDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_PhantomRouteHintsDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PhantomRouteHintsDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class FixedPenaltyScorer : LDKFramework_Mac.NativeTypeWrapper {
  public init(penalty_msat: Swift.UInt64)
  public init(pointer: LDKFramework_Mac.LDKFixedPenaltyScorer)
  public init(pointer: LDKFramework_Mac.LDKFixedPenaltyScorer, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.FixedPenaltyScorer
  public func as_Score() -> LDKFramework_Mac.NativelyImplementedScore
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8], arg: Swift.UInt64) -> LDKFramework_Mac.Result_FixedPenaltyScorerDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UserConfig : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKUserConfig)
  public init(pointer: LDKFramework_Mac.LDKUserConfig, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_own_channel_config() -> LDKFramework_Mac.ChannelHandshakeConfig
  public func set_own_channel_config(val: LDKFramework_Mac.ChannelHandshakeConfig)
  public func get_peer_channel_config_limits() -> LDKFramework_Mac.ChannelHandshakeLimits
  public func set_peer_channel_config_limits(val: LDKFramework_Mac.ChannelHandshakeLimits)
  public func get_channel_options() -> LDKFramework_Mac.ChannelConfig
  public func set_channel_options(val: LDKFramework_Mac.ChannelConfig)
  public func get_accept_forwards_to_priv_channels() -> Swift.Bool
  public func set_accept_forwards_to_priv_channels(val: Swift.Bool)
  public func get_accept_inbound_channels() -> Swift.Bool
  public func set_accept_inbound_channels(val: Swift.Bool)
  public func get_manually_accept_inbound_channels() -> Swift.Bool
  public func set_manually_accept_inbound_channels(val: Swift.Bool)
  public func clone() -> LDKFramework_Mac.UserConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelManagerConstructor : LDKFramework_Mac.NativeTypeWrapper {
  final public let channelManager: LDKFramework_Mac.ChannelManager
  final public let channel_manager_latest_block_hash: [Swift.UInt8]?
  public var net_graph: LDKFramework_Mac.NetworkGraph? {
    get
  }
  public var payer: LDKFramework_Mac.InvoicePayer? {
    get
  }
  final public let peerManager: LDKFramework_Mac.PeerManager
  public var channel_monitors: [(LDKFramework_Mac.ChannelMonitor, [Swift.UInt8])] {
    get
  }
  public init(channel_manager_serialized: [Swift.UInt8], channel_monitors_serialized: [[Swift.UInt8]], keys_interface: LDKFramework_Mac.KeysInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, chain_monitor: LDKFramework_Mac.ChainMonitor, filter: LDKFramework_Mac.Filter?, net_graph_serialized: [Swift.UInt8]?, tx_broadcaster: LDKFramework_Mac.BroadcasterInterface, logger: LDKFramework_Mac.Logger) throws
  public init(network: LDKFramework_Mac.LDKNetwork, config: LDKFramework_Mac.UserConfig, current_blockchain_tip_hash: [Swift.UInt8], current_blockchain_tip_height: Swift.UInt32, keys_interface: LDKFramework_Mac.KeysInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, chain_monitor: LDKFramework_Mac.ChainMonitor, net_graph: LDKFramework_Mac.NetworkGraph?, tx_broadcaster: LDKFramework_Mac.BroadcasterInterface, logger: LDKFramework_Mac.Logger)
  public func chain_sync_completed(persister: LDKFramework_Mac.ExtendedChannelManagerPersister, scorer: LDKFramework_Mac.MultiThreadedLockableScore?)
  public func interrupt()
  public func getTCPPeerHandler() -> LDKFramework_Mac.TCPPeerHandler
  @objc deinit
}
public protocol ExtendedChannelManagerPersister : LDKFramework_Mac.Persister {
  func handle_event(event: LDKFramework_Mac.Event)
}
@_hasMissingDesignatedInitializers public class TCPPeerHandler {
  public func bind(address: Swift.String, port: Swift.UInt16) -> Swift.Bool
  public func connect(address: Swift.String, port: Swift.UInt16, theirNodeId: [Swift.UInt8]) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ScorerDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ScorerDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ScorerDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Scorer?
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func ok(o: LDKFramework_Mac.Scorer) -> LDKFramework_Mac.Result_ScorerDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ScorerDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnnouncementSignatures : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], short_channel_id_arg: Swift.UInt64, node_signature_arg: [Swift.UInt8], bitcoin_signature_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKAnnouncementSignatures)
  public init(pointer: LDKFramework_Mac.LDKAnnouncementSignatures, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_node_signature() -> [Swift.UInt8]
  public func set_node_signature(val: [Swift.UInt8])
  public func get_bitcoin_signature() -> [Swift.UInt8]
  public func set_bitcoin_signature(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.AnnouncementSignatures
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_AnnouncementSignaturesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ErrorAction : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKErrorAction)
  public init(pointer: LDKFramework_Mac.LDKErrorAction, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum ErrorActionValueType {
    case DisconnectPeer, IgnoreAndLog, SendErrorMessage, SendWarningMessage
    public static func == (a: LDKFramework_Mac.ErrorAction.ErrorActionValueType, b: LDKFramework_Mac.ErrorAction.ErrorActionValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.ErrorAction.ErrorActionValueType?
  public func getValueAsDisconnectPeer() -> LDKFramework_Mac.ErrorAction.DisconnectPeer?
  public func getValueAsIgnoreAndLog() -> LDKFramework_Mac.LDKLevel?
  public func getValueAsSendErrorMessage() -> LDKFramework_Mac.ErrorAction.SendErrorMessage?
  public func getValueAsSendWarningMessage() -> LDKFramework_Mac.ErrorAction.SendWarningMessage?
  @objc deinit
  public func clone() -> LDKFramework_Mac.ErrorAction
  public class func disconnect_peer(msg: LDKFramework_Mac.ErrorMessage) -> LDKFramework_Mac.ErrorAction
  public class func ignore_error() -> LDKFramework_Mac.ErrorAction
  public class func ignore_and_log(a: LDKFramework_Mac.LDKLevel) -> LDKFramework_Mac.ErrorAction
  public class func ignore_duplicate_gossip() -> LDKFramework_Mac.ErrorAction
  public class func send_error_message(msg: LDKFramework_Mac.ErrorMessage) -> LDKFramework_Mac.ErrorAction
  public class func send_warning_message(msg: LDKFramework_Mac.WarningMessage, log_level: LDKFramework_Mac.LDKLevel) -> LDKFramework_Mac.ErrorAction
  @_hasMissingDesignatedInitializers public class DisconnectPeer : LDKFramework_Mac.NativeTypeWrapper {
    public func getMsg() -> LDKFramework_Mac.ErrorMessage
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendErrorMessage : LDKFramework_Mac.NativeTypeWrapper {
    public func getMsg() -> LDKFramework_Mac.ErrorMessage
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendWarningMessage : LDKFramework_Mac.NativeTypeWrapper {
    public func getMsg() -> LDKFramework_Mac.WarningMessage
    public func getLog_level() -> LDKFramework_Mac.LDKLevel
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class Option_u64Z : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: Swift.UInt64?)
  public init(pointer: LDKFramework_Mac.LDKCOption_u64Z)
  public init(pointer: LDKFramework_Mac.LDKCOption_u64Z, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> Swift.UInt64?
  public class func some(o: Swift.UInt64) -> LDKFramework_Mac.Option_u64Z
  public class func none() -> LDKFramework_Mac.Option_u64Z
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_u64Z
}
@_hasMissingDesignatedInitializers public class Result_PaymentPreimageAPIErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentPreimageAPIErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentPreimageAPIErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.APIError?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentPreimageAPIErrorZ
  public class func err(e: LDKFramework_Mac.APIError) -> LDKFramework_Mac.Result_PaymentPreimageAPIErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PaymentPreimageAPIErrorZ
}
@_hasMissingDesignatedInitializers public class GossipTimestampFilter : LDKFramework_Mac.NativeTypeWrapper {
  public init(chain_hash_arg: [Swift.UInt8], first_timestamp_arg: Swift.UInt32, timestamp_range_arg: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKGossipTimestampFilter)
  public init(pointer: LDKFramework_Mac.LDKGossipTimestampFilter, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_first_timestamp() -> Swift.UInt32
  public func set_first_timestamp(val: Swift.UInt32)
  public func get_timestamp_range() -> Swift.UInt32
  public func set_timestamp_range(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.GossipTimestampFilter
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_GossipTimestampFilterDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UpdateFee : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], feerate_per_kw_arg: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKUpdateFee)
  public init(pointer: LDKFramework_Mac.LDKUpdateFee, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_feerate_per_kw() -> Swift.UInt32
  public func set_feerate_per_kw(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.UpdateFee
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UpdateFeeDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Payer : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKPayer)
  public init(pointer: LDKFramework_Mac.LDKPayer, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func node_id() -> [Swift.UInt8]
  open func first_hops() -> [LDKFramework_Mac.LDKChannelDetails]
  open func send_payment(route: LDKFramework_Mac.Route, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
  open func send_spontaneous_payment(route: LDKFramework_Mac.Route, payment_preimage: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
  open func retry_payment(route: LDKFramework_Mac.Route, payment_id: [Swift.UInt8]) -> LDKFramework_Mac.Result_NonePaymentSendFailureZ
  open func abandon_payment(payment_id: [Swift.UInt8])
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedPayer : LDKFramework_Mac.Payer {
  override public func node_id() -> [Swift.UInt8]
  override public func first_hops() -> [LDKFramework_Mac.LDKChannelDetails]
  override public func send_payment(route: LDKFramework_Mac.Route, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
  override public func send_spontaneous_payment(route: LDKFramework_Mac.Route, payment_preimage: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
  override public func retry_payment(route: LDKFramework_Mac.Route, payment_id: [Swift.UInt8]) -> LDKFramework_Mac.Result_NonePaymentSendFailureZ
  override public func abandon_payment(payment_id: [Swift.UInt8])
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKPayer)
  override public init(pointer: LDKFramework_Mac.LDKPayer, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodeInfo : LDKFramework_Mac.NativeTypeWrapper {
  public init(channels_arg: [Swift.UInt64], lowest_inbound_channel_fees_arg: LDKFramework_Mac.RoutingFees, announcement_info_arg: LDKFramework_Mac.NodeAnnouncementInfo)
  public init(pointer: LDKFramework_Mac.LDKNodeInfo)
  public init(pointer: LDKFramework_Mac.LDKNodeInfo, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func set_channels(val: [Swift.UInt64])
  public func get_lowest_inbound_channel_fees() -> LDKFramework_Mac.RoutingFees
  public func set_lowest_inbound_channel_fees(val: LDKFramework_Mac.RoutingFees)
  public func get_announcement_info() -> LDKFramework_Mac.NodeAnnouncementInfo
  public func set_announcement_info(val: LDKFramework_Mac.NodeAnnouncementInfo)
  public func clone() -> LDKFramework_Mac.NodeInfo
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_NodeInfoDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MonitorUpdateId : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKMonitorUpdateId)
  public init(pointer: LDKFramework_Mac.LDKMonitorUpdateId, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.MonitorUpdateId
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.MonitorUpdateId, b: LDKFramework_Mac.MonitorUpdateId) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_CounterpartyCommitmentSecretsDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.CounterpartyCommitmentSecrets?
  public class func ok(o: LDKFramework_Mac.CounterpartyCommitmentSecrets) -> LDKFramework_Mac.Result_CounterpartyCommitmentSecretsDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_CounterpartyCommitmentSecretsDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CounterpartyCommitmentSecretsDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NoneChannelMonitorUpdateErrZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneChannelMonitorUpdateErrZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneChannelMonitorUpdateErrZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKChannelMonitorUpdateErr?
  public class func ok() -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  public class func err(e: LDKFramework_Mac.LDKChannelMonitorUpdateErr) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
}
@_hasMissingDesignatedInitializers public class CommitmentTransaction : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKCommitmentTransaction)
  public init(pointer: LDKFramework_Mac.LDKCommitmentTransaction, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.CommitmentTransaction
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_CommitmentTransactionDecodeErrorZ
  public func commitment_number() -> Swift.UInt64
  public func to_broadcaster_value_sat() -> Swift.UInt64
  public func to_countersignatory_value_sat() -> Swift.UInt64
  public func feerate_per_kw() -> Swift.UInt32
  public func trust() -> LDKFramework_Mac.TrustedCommitmentTransaction
  public func verify(channel_parameters: LDKFramework_Mac.DirectedChannelTransactionParameters, broadcaster_keys: LDKFramework_Mac.ChannelPublicKeys, countersignatory_keys: LDKFramework_Mac.ChannelPublicKeys) -> LDKFramework_Mac.Result_TrustedCommitmentTransactionNoneZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class C2Tuple_PaymentHashPaymentIdZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_PaymentHashPaymentIdZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_PaymentHashPaymentIdZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_PaymentHashPaymentIdZ
  public class func new(a: [Swift.UInt8], b: [Swift.UInt8]) -> LDKFramework_Mac.C2Tuple_PaymentHashPaymentIdZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ClosingSignedFeeRange : LDKFramework_Mac.NativeTypeWrapper {
  public init(min_fee_satoshis_arg: Swift.UInt64, max_fee_satoshis_arg: Swift.UInt64)
  public init(pointer: LDKFramework_Mac.LDKClosingSignedFeeRange)
  public init(pointer: LDKFramework_Mac.LDKClosingSignedFeeRange, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_min_fee_satoshis() -> Swift.UInt64
  public func set_min_fee_satoshis(val: Swift.UInt64)
  public func get_max_fee_satoshis() -> Swift.UInt64
  public func set_max_fee_satoshis(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.ClosingSignedFeeRange
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ClosingSignedFeeRangeDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelReestablishDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelReestablishDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelReestablishDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelReestablish?
  public class func ok(o: LDKFramework_Mac.ChannelReestablish) -> LDKFramework_Mac.Result_ChannelReestablishDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelReestablishDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelReestablishDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_SpendableOutputDescriptorDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_SpendableOutputDescriptorDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_SpendableOutputDescriptorDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.SpendableOutputDescriptor?
  public class func ok(o: LDKFramework_Mac.SpendableOutputDescriptor) -> LDKFramework_Mac.Result_SpendableOutputDescriptorDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_SpendableOutputDescriptorDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_SpendableOutputDescriptorDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class TxOut : LDKFramework_Mac.NativeTypeWrapper {
  public init(script_pubkey: [Swift.UInt8], value: Swift.UInt64)
  public init(pointer: LDKFramework_Mac.LDKTxOut)
  public init(pointer: LDKFramework_Mac.LDKTxOut, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.TxOut
  @objc deinit
  public func get_script_pubkey() -> [Swift.UInt8]
  public func get_value() -> Swift.UInt64
}
@_hasMissingDesignatedInitializers public class NetGraphMsgHandlerConstructor {
  public static func initNetGraphMsgHandler(networkGraph: LDKFramework_Mac.NetworkGraph, chainAccess: LDKFramework_Mac.Access?, logger: LDKFramework_Mac.Logger) -> LDKFramework_Mac.NetGraphMsgHandler
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_RevokeAndACKDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RevokeAndACKDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RevokeAndACKDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.RevokeAndACK?
  public class func ok(o: LDKFramework_Mac.RevokeAndACK) -> LDKFramework_Mac.Result_RevokeAndACKDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_RevokeAndACKDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RevokeAndACKDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Event : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKEvent)
  public init(pointer: LDKFramework_Mac.LDKEvent, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum EventValueType {
    case FundingGenerationReady, PaymentReceived, PaymentSent, PaymentPathFailed, PaymentFailed, PendingHTLCsForwardable, SpendableOutputs, PaymentForwarded, ChannelClosed, DiscardFunding, PaymentPathSuccessful, OpenChannelRequest
    public static func == (a: LDKFramework_Mac.Event.EventValueType, b: LDKFramework_Mac.Event.EventValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.Event.EventValueType?
  public func getValueAsFundingGenerationReady() -> LDKFramework_Mac.Event.FundingGenerationReady?
  public func getValueAsPaymentReceived() -> LDKFramework_Mac.Event.PaymentReceived?
  public func getValueAsPaymentSent() -> LDKFramework_Mac.Event.PaymentSent?
  public func getValueAsPaymentPathFailed() -> LDKFramework_Mac.Event.PaymentPathFailed?
  public func getValueAsPaymentFailed() -> LDKFramework_Mac.Event.PaymentFailed?
  public func getValueAsPendingHTLCsForwardable() -> LDKFramework_Mac.Event.PendingHTLCsForwardable?
  public func getValueAsSpendableOutputs() -> LDKFramework_Mac.Event.SpendableOutputs?
  public func getValueAsPaymentForwarded() -> LDKFramework_Mac.Event.PaymentForwarded?
  public func getValueAsChannelClosed() -> LDKFramework_Mac.Event.ChannelClosed?
  public func getValueAsDiscardFunding() -> LDKFramework_Mac.Event.DiscardFunding?
  public func getValueAsPaymentPathSuccessful() -> LDKFramework_Mac.Event.PaymentPathSuccessful?
  public func getValueAsOpenChannelRequest() -> LDKFramework_Mac.Event.OpenChannelRequest?
  @objc deinit
  public func clone() -> LDKFramework_Mac.Event
  public class func funding_generation_ready(temporary_channel_id: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, output_script: [Swift.UInt8], user_channel_id: Swift.UInt64) -> LDKFramework_Mac.Event
  public class func payment_received(payment_hash: [Swift.UInt8], amt: Swift.UInt64, purpose: LDKFramework_Mac.PaymentPurpose) -> LDKFramework_Mac.Event
  public class func payment_sent(payment_id: [Swift.UInt8], payment_preimage: [Swift.UInt8], payment_hash: [Swift.UInt8], fee_paid_msat: LDKFramework_Mac.Option_u64Z) -> LDKFramework_Mac.Event
  public class func payment_path_failed(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8], rejected_by_dest: Swift.Bool, network_update: LDKFramework_Mac.Option_NetworkUpdateZ, all_paths_failed: Swift.Bool, path: [LDKFramework_Mac.RouteHop], short_channel_id: LDKFramework_Mac.Option_u64Z, retry: LDKFramework_Mac.RouteParameters) -> LDKFramework_Mac.Event
  public class func payment_failed(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8]) -> LDKFramework_Mac.Event
  public class func pending_htlcs_forwardable(time_forwardable: Swift.UInt64) -> LDKFramework_Mac.Event
  public class func spendable_outputs(outputs: [LDKFramework_Mac.SpendableOutputDescriptor]) -> LDKFramework_Mac.Event
  public class func payment_forwarded(fee_earned_msat: LDKFramework_Mac.Option_u64Z, claim_from_onchain_tx: Swift.Bool) -> LDKFramework_Mac.Event
  public class func channel_closed(channel_id: [Swift.UInt8], user_channel_id: Swift.UInt64, reason: LDKFramework_Mac.ClosureReason) -> LDKFramework_Mac.Event
  public class func discard_funding(channel_id: [Swift.UInt8], transaction: [Swift.UInt8]) -> LDKFramework_Mac.Event
  public class func payment_path_successful(payment_id: [Swift.UInt8], payment_hash: [Swift.UInt8], path: [LDKFramework_Mac.RouteHop]) -> LDKFramework_Mac.Event
  public class func open_channel_request(temporary_channel_id: [Swift.UInt8], counterparty_node_id: [Swift.UInt8], funding_satoshis: Swift.UInt64, push_msat: Swift.UInt64, channel_type: LDKFramework_Mac.ChannelTypeFeatures) -> LDKFramework_Mac.Event
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_COption_EventZDecodeErrorZ
  @_hasMissingDesignatedInitializers public class FundingGenerationReady : LDKFramework_Mac.NativeTypeWrapper {
    public func getTemporary_channel_id() -> [Swift.UInt8]
    public func getChannel_value_satoshis() -> Swift.UInt64
    public func getOutput_script() -> [Swift.UInt8]
    public func getUser_channel_id() -> Swift.UInt64
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class PaymentReceived : LDKFramework_Mac.NativeTypeWrapper {
    public func getPayment_hash() -> [Swift.UInt8]
    public func getAmt() -> Swift.UInt64
    public func getPurpose() -> LDKFramework_Mac.PaymentPurpose
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class PaymentSent : LDKFramework_Mac.NativeTypeWrapper {
    public func getPayment_id() -> [Swift.UInt8]
    public func getPayment_preimage() -> [Swift.UInt8]
    public func getPayment_hash() -> [Swift.UInt8]
    public func getFee_paid_msat() -> LDKFramework_Mac.Option_u64Z
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class PaymentPathFailed : LDKFramework_Mac.NativeTypeWrapper {
    public func getPayment_id() -> [Swift.UInt8]
    public func getPayment_hash() -> [Swift.UInt8]
    public func getRejected_by_dest() -> Swift.Bool
    public func getNetwork_update() -> LDKFramework_Mac.Option_NetworkUpdateZ
    public func getAll_paths_failed() -> Swift.Bool
    public func getPath() -> [LDKFramework_Mac.RouteHop]
    public func getShort_channel_id() -> LDKFramework_Mac.Option_u64Z
    public func getRetry() -> LDKFramework_Mac.RouteParameters
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class PaymentFailed : LDKFramework_Mac.NativeTypeWrapper {
    public func getPayment_id() -> [Swift.UInt8]
    public func getPayment_hash() -> [Swift.UInt8]
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class PendingHTLCsForwardable : LDKFramework_Mac.NativeTypeWrapper {
    public func getTime_forwardable() -> Swift.UInt64
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SpendableOutputs : LDKFramework_Mac.NativeTypeWrapper {
    public func getOutputs() -> [LDKFramework_Mac.SpendableOutputDescriptor]
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class PaymentForwarded : LDKFramework_Mac.NativeTypeWrapper {
    public func getFee_earned_msat() -> LDKFramework_Mac.Option_u64Z
    public func getClaim_from_onchain_tx() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ChannelClosed : LDKFramework_Mac.NativeTypeWrapper {
    public func getChannel_id() -> [Swift.UInt8]
    public func getUser_channel_id() -> Swift.UInt64
    public func getReason() -> LDKFramework_Mac.ClosureReason
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class DiscardFunding : LDKFramework_Mac.NativeTypeWrapper {
    public func getChannel_id() -> [Swift.UInt8]
    public func getTransaction() -> [Swift.UInt8]
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class PaymentPathSuccessful : LDKFramework_Mac.NativeTypeWrapper {
    public func getPayment_id() -> [Swift.UInt8]
    public func getPayment_hash() -> [Swift.UInt8]
    public func getPath() -> [LDKFramework_Mac.RouteHop]
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class OpenChannelRequest : LDKFramework_Mac.NativeTypeWrapper {
    public func getTemporary_channel_id() -> [Swift.UInt8]
    public func getCounterparty_node_id() -> [Swift.UInt8]
    public func getFunding_satoshis() -> Swift.UInt64
    public func getPush_msat() -> Swift.UInt64
    public func getChannel_type() -> LDKFramework_Mac.ChannelTypeFeatures
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class Result_ReplyChannelRangeDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ReplyChannelRangeDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ReplyChannelRangeDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ReplyChannelRange?
  public class func ok(o: LDKFramework_Mac.ReplyChannelRange) -> LDKFramework_Mac.Result_ReplyChannelRangeDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ReplyChannelRangeDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ReplyChannelRangeDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class C2Tuple_u32TxOutZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_u32TxOutZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_u32TxOutZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_u32TxOutZ
  public class func new(a: Swift.UInt32, b: LDKFramework_Mac.LDKTxOut) -> LDKFramework_Mac.C2Tuple_u32TxOutZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_C2Tuple_SignatureCVec_SignatureZZNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_SignatureCVec_SignatureZZNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> LDKFramework_Mac.C2Tuple_SignatureCVec_SignatureZZ?
  public class func ok(o: LDKFramework_Mac.C2Tuple_SignatureCVec_SignatureZZ) -> LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  public class func err() -> LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
}
@_hasMissingDesignatedInitializers public class Result_UpdateFailHTLCDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFailHTLCDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFailHTLCDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UpdateFailHTLC?
  public class func ok(o: LDKFramework_Mac.UpdateFailHTLC) -> LDKFramework_Mac.Result_UpdateFailHTLCDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UpdateFailHTLCDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UpdateFailHTLCDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class DirectedChannelInfo : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKDirectedChannelInfo)
  public init(pointer: LDKFramework_Mac.LDKDirectedChannelInfo, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.DirectedChannelInfo
  public func channel() -> LDKFramework_Mac.ChannelInfo
  public func direction() -> LDKFramework_Mac.ChannelUpdateInfo
  public func effective_capacity() -> LDKFramework_Mac.EffectiveCapacity
  @objc deinit
}
@_hasMissingDesignatedInitializers public class C2Tuple_BlockHashChannelMonitorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_BlockHashChannelMonitorZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_BlockHashChannelMonitorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ
  public class func new(a: [Swift.UInt8], b: LDKFramework_Mac.ChannelMonitor) -> LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_PaymentParametersDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentParametersDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentParametersDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.PaymentParameters?
  public class func ok(o: LDKFramework_Mac.PaymentParameters) -> LDKFramework_Mac.Result_PaymentParametersDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_PaymentParametersDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PaymentParametersDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_AcceptChannelDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_AcceptChannelDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_AcceptChannelDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.AcceptChannel?
  public class func ok(o: LDKFramework_Mac.AcceptChannel) -> LDKFramework_Mac.Result_AcceptChannelDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_AcceptChannelDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_AcceptChannelDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Option_AccessZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.Access?)
  public init(pointer: LDKFramework_Mac.LDKCOption_AccessZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_AccessZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.Access?
  public class func some(o: LDKFramework_Mac.Access) -> LDKFramework_Mac.Option_AccessZ
  public class func none() -> LDKFramework_Mac.Option_AccessZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SpendableOutputDescriptor : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKSpendableOutputDescriptor)
  public init(pointer: LDKFramework_Mac.LDKSpendableOutputDescriptor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum SpendableOutputDescriptorValueType {
    case StaticOutput, DelayedPaymentOutput, StaticPaymentOutput
    public static func == (a: LDKFramework_Mac.SpendableOutputDescriptor.SpendableOutputDescriptorValueType, b: LDKFramework_Mac.SpendableOutputDescriptor.SpendableOutputDescriptorValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.SpendableOutputDescriptor.SpendableOutputDescriptorValueType?
  public func getValueAsStaticOutput() -> LDKFramework_Mac.SpendableOutputDescriptor.StaticOutput?
  public func getValueAsDelayedPaymentOutput() -> LDKFramework_Mac.DelayedPaymentOutputDescriptor?
  public func getValueAsStaticPaymentOutput() -> LDKFramework_Mac.StaticPaymentOutputDescriptor?
  @objc deinit
  public func clone() -> LDKFramework_Mac.SpendableOutputDescriptor
  public class func static_output(outpoint: LDKFramework_Mac.OutPoint, output: LDKFramework_Mac.LDKTxOut) -> LDKFramework_Mac.SpendableOutputDescriptor
  public class func delayed_payment_output(a: LDKFramework_Mac.DelayedPaymentOutputDescriptor) -> LDKFramework_Mac.SpendableOutputDescriptor
  public class func static_payment_output(a: LDKFramework_Mac.StaticPaymentOutputDescriptor) -> LDKFramework_Mac.SpendableOutputDescriptor
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_SpendableOutputDescriptorDecodeErrorZ
  @_hasMissingDesignatedInitializers public class StaticOutput : LDKFramework_Mac.NativeTypeWrapper {
    public func getOutpoint() -> LDKFramework_Mac.OutPoint?
    public func getOutput() -> LDKFramework_Mac.TxOut
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class Result_QueryChannelRangeDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_QueryChannelRangeDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_QueryChannelRangeDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.QueryChannelRange?
  public class func ok(o: LDKFramework_Mac.QueryChannelRange) -> LDKFramework_Mac.Result_QueryChannelRangeDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_QueryChannelRangeDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_QueryChannelRangeDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_PaymentIdPaymentErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentIdPaymentErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentIdPaymentErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.PaymentError?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentIdPaymentErrorZ
  public class func err(e: LDKFramework_Mac.PaymentError) -> LDKFramework_Mac.Result_PaymentIdPaymentErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PaymentIdPaymentErrorZ
}
@_hasMissingDesignatedInitializers public class Result_ErrorMessageDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ErrorMessageDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ErrorMessageDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ErrorMessage?
  public class func ok(o: LDKFramework_Mac.ErrorMessage) -> LDKFramework_Mac.Result_ErrorMessageDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ErrorMessageDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ErrorMessageDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
  public class func new(a: [Swift.UInt8], b: [LDKFramework_Mac.C2Tuple_u32TxOutZ]) -> LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_COption_NetworkUpdateZDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_NetworkUpdateZDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_NetworkUpdateZDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Option_NetworkUpdateZ?
  public class func ok(o: LDKFramework_Mac.Option_NetworkUpdateZ) -> LDKFramework_Mac.Result_COption_NetworkUpdateZDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_COption_NetworkUpdateZDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_COption_NetworkUpdateZDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class MessageHandler : LDKFramework_Mac.NativeTypeWrapper {
  public init(chan_handler_arg: LDKFramework_Mac.ChannelMessageHandler, route_handler_arg: LDKFramework_Mac.RoutingMessageHandler)
  public init(pointer: LDKFramework_Mac.LDKMessageHandler)
  public init(pointer: LDKFramework_Mac.LDKMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chan_handler() -> LDKFramework_Mac.NativelyImplementedChannelMessageHandler
  public func set_chan_handler(val: LDKFramework_Mac.ChannelMessageHandler)
  public func get_route_handler() -> LDKFramework_Mac.NativelyImplementedRoutingMessageHandler
  public func set_route_handler(val: LDKFramework_Mac.RoutingMessageHandler)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ReadOnlyNetworkGraph : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKReadOnlyNetworkGraph)
  public init(pointer: LDKFramework_Mac.LDKReadOnlyNetworkGraph, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_addresses(pubkey: [Swift.UInt8]) -> LDKFramework_Mac.Option_CVec_NetAddressZZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_SignDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_SignDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_SignDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Sign?
  public class func ok(o: LDKFramework_Mac.Sign) -> LDKFramework_Mac.Result_SignDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_SignDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_SignDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_PositiveTimestampCreationErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PositiveTimestampCreationErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PositiveTimestampCreationErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKCreationError?
  public func getValue() -> LDKFramework_Mac.PositiveTimestamp?
  public class func ok(o: LDKFramework_Mac.PositiveTimestamp) -> LDKFramework_Mac.Result_PositiveTimestampCreationErrorZ
  public class func err(e: LDKFramework_Mac.LDKCreationError) -> LDKFramework_Mac.Result_PositiveTimestampCreationErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PositiveTimestampCreationErrorZ
}
@_hasMissingDesignatedInitializers public class Result_TrustedCommitmentTransactionNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_TrustedCommitmentTransactionNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_TrustedCommitmentTransactionNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> LDKFramework_Mac.TrustedCommitmentTransaction?
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func ok(o: LDKFramework_Mac.TrustedCommitmentTransaction) -> LDKFramework_Mac.Result_TrustedCommitmentTransactionNoneZ
  public class func err() -> LDKFramework_Mac.Result_TrustedCommitmentTransactionNoneZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HTLCOutputInCommitment : LDKFramework_Mac.NativeTypeWrapper {
  public init(offered_arg: Swift.Bool, amount_msat_arg: Swift.UInt64, cltv_expiry_arg: Swift.UInt32, payment_hash_arg: [Swift.UInt8], transaction_output_index_arg: LDKFramework_Mac.Option_u32Z)
  public init(pointer: LDKFramework_Mac.LDKHTLCOutputInCommitment)
  public init(pointer: LDKFramework_Mac.LDKHTLCOutputInCommitment, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_offered() -> Swift.Bool
  public func set_offered(val: Swift.Bool)
  public func get_amount_msat() -> Swift.UInt64
  public func set_amount_msat(val: Swift.UInt64)
  public func get_cltv_expiry() -> Swift.UInt32
  public func set_cltv_expiry(val: Swift.UInt32)
  public func get_payment_hash() -> [Swift.UInt8]
  public func set_payment_hash(val: [Swift.UInt8])
  public func get_transaction_output_index() -> LDKFramework_Mac.Option_u32Z
  public func set_transaction_output_index(val: LDKFramework_Mac.Option_u32Z)
  public func clone() -> LDKFramework_Mac.HTLCOutputInCommitment
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_HTLCOutputInCommitmentDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HTLCUpdate : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKHTLCUpdate)
  public init(pointer: LDKFramework_Mac.LDKHTLCUpdate, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.HTLCUpdate
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_HTLCUpdateDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UpdateFailMalformedHTLC : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKUpdateFailMalformedHTLC)
  public init(pointer: LDKFramework_Mac.LDKUpdateFailMalformedHTLC, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func get_failure_code() -> Swift.UInt16
  public func set_failure_code(val: Swift.UInt16)
  public func clone() -> LDKFramework_Mac.UpdateFailMalformedHTLC
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UpdateFailMalformedHTLCDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DelayedPaymentOutputDescriptor : LDKFramework_Mac.NativeTypeWrapper {
  public init(outpoint_arg: LDKFramework_Mac.OutPoint, per_commitment_point_arg: [Swift.UInt8], to_self_delay_arg: Swift.UInt16, output_arg: LDKFramework_Mac.LDKTxOut, revocation_pubkey_arg: [Swift.UInt8], channel_keys_id_arg: [Swift.UInt8], channel_value_satoshis_arg: Swift.UInt64)
  public init(pointer: LDKFramework_Mac.LDKDelayedPaymentOutputDescriptor)
  public init(pointer: LDKFramework_Mac.LDKDelayedPaymentOutputDescriptor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_outpoint() -> LDKFramework_Mac.OutPoint?
  public func set_outpoint(val: LDKFramework_Mac.OutPoint)
  public func get_per_commitment_point() -> [Swift.UInt8]
  public func set_per_commitment_point(val: [Swift.UInt8])
  public func get_to_self_delay() -> Swift.UInt16
  public func set_to_self_delay(val: Swift.UInt16)
  public func set_output(val: LDKFramework_Mac.LDKTxOut)
  public func get_revocation_pubkey() -> [Swift.UInt8]
  public func set_revocation_pubkey(val: [Swift.UInt8])
  public func get_channel_keys_id() -> [Swift.UInt8]
  public func set_channel_keys_id(val: [Swift.UInt8])
  public func get_channel_value_satoshis() -> Swift.UInt64
  public func set_channel_value_satoshis(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.DelayedPaymentOutputDescriptor
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetGraphMsgHandler : LDKFramework_Mac.NativeTypeWrapper {
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(network_graph: LDKFramework_Mac.NetworkGraph, chain_access: LDKFramework_Mac.Option_AccessZ, logger: LDKFramework_Mac.Logger)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKNetGraphMsgHandler)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKNetGraphMsgHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func as_EventHandler() -> LDKFramework_Mac.NativelyImplementedEventHandler
  public func add_chain_access(chain_access: LDKFramework_Mac.Option_AccessZ)
  public func as_RoutingMessageHandler() -> LDKFramework_Mac.NativelyImplementedRoutingMessageHandler
  public func as_MessageSendEventsProvider() -> LDKFramework_Mac.NativelyImplementedMessageSendEventsProvider
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelTransactionParametersDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelTransactionParametersDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelTransactionParametersDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelTransactionParameters?
  public class func ok(o: LDKFramework_Mac.ChannelTransactionParameters) -> LDKFramework_Mac.Result_ChannelTransactionParametersDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelTransactionParametersDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelTransactionParametersDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ChannelHandshakeLimits : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKChannelHandshakeLimits)
  public init(pointer: LDKFramework_Mac.LDKChannelHandshakeLimits, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_min_funding_satoshis() -> Swift.UInt64
  public func set_min_funding_satoshis(val: Swift.UInt64)
  public func get_max_htlc_minimum_msat() -> Swift.UInt64
  public func set_max_htlc_minimum_msat(val: Swift.UInt64)
  public func get_min_max_htlc_value_in_flight_msat() -> Swift.UInt64
  public func set_min_max_htlc_value_in_flight_msat(val: Swift.UInt64)
  public func get_max_channel_reserve_satoshis() -> Swift.UInt64
  public func set_max_channel_reserve_satoshis(val: Swift.UInt64)
  public func get_min_max_accepted_htlcs() -> Swift.UInt16
  public func set_min_max_accepted_htlcs(val: Swift.UInt16)
  public func get_max_minimum_depth() -> Swift.UInt32
  public func set_max_minimum_depth(val: Swift.UInt32)
  public func get_force_announced_channel_preference() -> Swift.Bool
  public func set_force_announced_channel_preference(val: Swift.Bool)
  public func get_their_to_self_delay() -> Swift.UInt16
  public func set_their_to_self_delay(val: Swift.UInt16)
  public func clone() -> LDKFramework_Mac.ChannelHandshakeLimits
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KeysManager : LDKFramework_Mac.NativeTypeWrapper {
  public init(seed: [Swift.UInt8], starting_time_secs: Swift.UInt64, starting_time_nanos: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKKeysManager)
  public init(pointer: LDKFramework_Mac.LDKKeysManager, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func derive_channel_keys(channel_value_satoshis: Swift.UInt64, params: [Swift.UInt8]) -> LDKFramework_Mac.InMemorySigner
  public func spend_spendable_outputs(descriptors: [LDKFramework_Mac.SpendableOutputDescriptor], outputs: [LDKFramework_Mac.TxOut], change_destination_script: [Swift.UInt8], feerate_sat_per_1000_weight: Swift.UInt32) -> LDKFramework_Mac.Result_TransactionNoneZ
  public func as_KeysInterface() -> LDKFramework_Mac.NativelyImplementedKeysInterface
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Sha256 : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKSha256)
  public init(pointer: LDKFramework_Mac.LDKSha256, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.Sha256
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.Sha256, b: LDKFramework_Mac.Sha256) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodeAnnouncementInfo : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKNodeAnnouncementInfo)
  public init(pointer: LDKFramework_Mac.LDKNodeAnnouncementInfo, anchor: LDKFramework_Mac.NativeTypeWrapper)
  convenience public init(features_arg: LDKFramework_Mac.NodeFeatures, last_update_arg: Swift.UInt32, rgb_arg: [Swift.UInt8], alias_arg: [Swift.UInt8], addresses_arg: [LDKFramework_Mac.NetAddress], announcement_message_arg: LDKFramework_Mac.NodeAnnouncement)
  public func get_features() -> LDKFramework_Mac.NodeFeatures
  public func set_features(val: LDKFramework_Mac.NodeFeatures)
  public func get_last_update() -> Swift.UInt32
  public func set_last_update(val: Swift.UInt32)
  public func get_rgb() -> [Swift.UInt8]
  public func set_rgb(val: [Swift.UInt8])
  public func get_alias() -> [Swift.UInt8]
  public func set_alias(val: [Swift.UInt8])
  public func set_addresses(val: [LDKFramework_Mac.NetAddress])
  public func get_announcement_message() -> LDKFramework_Mac.NodeAnnouncement
  public func set_announcement_message(val: LDKFramework_Mac.NodeAnnouncement)
  public func clone() -> LDKFramework_Mac.NodeAnnouncementInfo
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_NodeAnnouncementInfoDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OutPoint : LDKFramework_Mac.NativeTypeWrapper {
  public init(txid_arg: [Swift.UInt8], index_arg: Swift.UInt16)
  public init(pointer: LDKFramework_Mac.LDKOutPoint)
  public init(pointer: LDKFramework_Mac.LDKOutPoint, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_txid() -> [Swift.UInt8]
  public func set_txid(val: [Swift.UInt8])
  public func get_index() -> Swift.UInt16
  public func set_index(val: Swift.UInt16)
  public func clone() -> LDKFramework_Mac.OutPoint
  public class func eq(a: LDKFramework_Mac.OutPoint, b: LDKFramework_Mac.OutPoint) -> Swift.Bool
  public func hash() -> Swift.UInt64
  public func to_channel_id() -> [Swift.UInt8]
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_OutPointDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.APIError?
  public func getValue() -> LDKFramework_Mac.C2Tuple_PaymentHashPaymentSecretZ?
  public class func ok(o: LDKFramework_Mac.C2Tuple_PaymentHashPaymentSecretZ) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
  public class func err(e: LDKFramework_Mac.APIError) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
}
@_hasMissingDesignatedInitializers public class NodeFeatures : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKNodeFeatures)
  public init(pointer: LDKFramework_Mac.LDKNodeFeatures, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.NodeFeatures, b: LDKFramework_Mac.NodeFeatures) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.NodeFeatures
  public func requires_unknown_bits() -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_NodeFeaturesDecodeErrorZ
  public func set_data_loss_protect_optional()
  public func set_data_loss_protect_required()
  public func supports_data_loss_protect() -> Swift.Bool
  public func requires_data_loss_protect() -> Swift.Bool
  public func set_upfront_shutdown_script_optional()
  public func set_upfront_shutdown_script_required()
  public func supports_upfront_shutdown_script() -> Swift.Bool
  public func requires_upfront_shutdown_script() -> Swift.Bool
  public func set_gossip_queries_optional()
  public func set_gossip_queries_required()
  public func supports_gossip_queries() -> Swift.Bool
  public func requires_gossip_queries() -> Swift.Bool
  public func set_variable_length_onion_optional()
  public func set_variable_length_onion_required()
  public func supports_variable_length_onion() -> Swift.Bool
  public func requires_variable_length_onion() -> Swift.Bool
  public func set_static_remote_key_optional()
  public func set_static_remote_key_required()
  public func supports_static_remote_key() -> Swift.Bool
  public func requires_static_remote_key() -> Swift.Bool
  public func set_payment_secret_optional()
  public func set_payment_secret_required()
  public func supports_payment_secret() -> Swift.Bool
  public func requires_payment_secret() -> Swift.Bool
  public func set_basic_mpp_optional()
  public func set_basic_mpp_required()
  public func supports_basic_mpp() -> Swift.Bool
  public func requires_basic_mpp() -> Swift.Bool
  public func set_shutdown_any_segwit_optional()
  public func set_shutdown_any_segwit_required()
  public func supports_shutdown_anysegwit() -> Swift.Bool
  public func requires_shutdown_anysegwit() -> Swift.Bool
  public func set_channel_type_optional()
  public func set_channel_type_required()
  public func supports_channel_type() -> Swift.Bool
  public func requires_channel_type() -> Swift.Bool
  public func set_scid_privacy_optional()
  public func set_scid_privacy_required()
  public func supports_scid_privacy() -> Swift.Bool
  public func requires_scid_privacy() -> Swift.Bool
  public func set_keysend_optional()
  public func set_keysend_required()
  public func supports_keysend() -> Swift.Bool
  public func requires_keysend() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ReplyShortChannelIdsEndDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ReplyShortChannelIdsEnd?
  public class func ok(o: LDKFramework_Mac.ReplyShortChannelIdsEnd) -> LDKFramework_Mac.Result_ReplyShortChannelIdsEndDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ReplyShortChannelIdsEndDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ReplyShortChannelIdsEndDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NetAddressDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NetAddressDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NetAddressDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.NetAddress?
  public class func ok(o: LDKFramework_Mac.NetAddress) -> LDKFramework_Mac.Result_NetAddressDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_NetAddressDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NetAddressDecodeErrorZ
}
@_hasMissingDesignatedInitializers open class FeeEstimator : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKFeeEstimator)
  public init(pointer: LDKFramework_Mac.LDKFeeEstimator, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func get_est_sat_per_1000_weight(confirmation_target: LDKFramework_Mac.LDKConfirmationTarget) -> Swift.UInt32
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedFeeEstimator : LDKFramework_Mac.FeeEstimator {
  override public func get_est_sat_per_1000_weight(confirmation_target: LDKFramework_Mac.LDKConfirmationTarget) -> Swift.UInt32
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKFeeEstimator)
  override public init(pointer: LDKFramework_Mac.LDKFeeEstimator, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_InvoiceSignOrCreationErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceSignOrCreationErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceSignOrCreationErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.SignOrCreationError?
  public func getValue() -> LDKFramework_Mac.Invoice?
  public class func ok(o: LDKFramework_Mac.Invoice) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func err(e: LDKFramework_Mac.SignOrCreationError) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NodeAnnouncementInfoDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeAnnouncementInfoDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeAnnouncementInfoDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.NodeAnnouncementInfo?
  public class func ok(o: LDKFramework_Mac.NodeAnnouncementInfo) -> LDKFramework_Mac.Result_NodeAnnouncementInfoDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_NodeAnnouncementInfoDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NodeAnnouncementInfoDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class DirectedChannelTransactionParameters : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKDirectedChannelTransactionParameters)
  public init(pointer: LDKFramework_Mac.LDKDirectedChannelTransactionParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func broadcaster_pubkeys() -> LDKFramework_Mac.ChannelPublicKeys
  public func countersignatory_pubkeys() -> LDKFramework_Mac.ChannelPublicKeys
  public func contest_delay() -> Swift.UInt16
  public func is_outbound() -> Swift.Bool
  public func funding_outpoint() -> LDKFramework_Mac.OutPoint?
  public func opt_anchors() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_SiPrefixParseErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_SiPrefixParseErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_SiPrefixParseErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.ParseError?
  public func getValue() -> LDKFramework_Mac.LDKSiPrefix?
  public class func ok(o: LDKFramework_Mac.LDKSiPrefix) -> LDKFramework_Mac.Result_SiPrefixParseErrorZ
  public class func err(e: LDKFramework_Mac.ParseError) -> LDKFramework_Mac.Result_SiPrefixParseErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_SiPrefixParseErrorZ
}
@_hasMissingDesignatedInitializers open class Access : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKAccess)
  public init(pointer: LDKFramework_Mac.LDKAccess, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func get_utxo(genesis_hash: [Swift.UInt8]?, short_channel_id: Swift.UInt64) -> LDKFramework_Mac.Result_TxOutAccessErrorZ
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedAccess : LDKFramework_Mac.Access {
  override public func get_utxo(genesis_hash: [Swift.UInt8]?, short_channel_id: Swift.UInt64) -> LDKFramework_Mac.Result_TxOutAccessErrorZ
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKAccess)
  override public init(pointer: LDKFramework_Mac.LDKAccess, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FundingLocked : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], next_per_commitment_point_arg: [Swift.UInt8], short_channel_id_alias_arg: LDKFramework_Mac.Option_u64Z)
  public init(pointer: LDKFramework_Mac.LDKFundingLocked)
  public init(pointer: LDKFramework_Mac.LDKFundingLocked, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_next_per_commitment_point() -> [Swift.UInt8]
  public func set_next_per_commitment_point(val: [Swift.UInt8])
  public func get_short_channel_id_alias() -> LDKFramework_Mac.Option_u64Z
  public func set_short_channel_id_alias(val: LDKFramework_Mac.Option_u64Z)
  public func clone() -> LDKFramework_Mac.FundingLocked
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_FundingLockedDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_UnsignedChannelAnnouncementDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UnsignedChannelAnnouncement?
  public class func ok(o: LDKFramework_Mac.UnsignedChannelAnnouncement) -> LDKFramework_Mac.Result_UnsignedChannelAnnouncementDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UnsignedChannelAnnouncementDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UnsignedChannelAnnouncementDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Option_CVec_NetAddressZZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: [LDKFramework_Mac.NetAddress]?)
  public init(pointer: LDKFramework_Mac.LDKCOption_CVec_NetAddressZZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_CVec_NetAddressZZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> [LDKFramework_Mac.NetAddress]?
  public class func some(o: [LDKFramework_Mac.NetAddress]) -> LDKFramework_Mac.Option_CVec_NetAddressZZ
  public class func none() -> LDKFramework_Mac.Option_CVec_NetAddressZZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_CVec_NetAddressZZ
}
@_hasMissingDesignatedInitializers public class RouteParameters : LDKFramework_Mac.NativeTypeWrapper {
  public init(payment_params_arg: LDKFramework_Mac.PaymentParameters, final_value_msat_arg: Swift.UInt64, final_cltv_expiry_delta_arg: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKRouteParameters)
  public init(pointer: LDKFramework_Mac.LDKRouteParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_payment_params() -> LDKFramework_Mac.PaymentParameters
  public func set_payment_params(val: LDKFramework_Mac.PaymentParameters)
  public func get_final_value_msat() -> Swift.UInt64
  public func set_final_value_msat(val: Swift.UInt64)
  public func get_final_cltv_expiry_delta() -> Swift.UInt32
  public func set_final_cltv_expiry_delta(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.RouteParameters
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_RouteParametersDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_PongDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PongDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PongDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Pong?
  public class func ok(o: LDKFramework_Mac.Pong) -> LDKFramework_Mac.Result_PongDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_PongDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PongDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ)
  public init(pointer: LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ
  public class func new(a: LDKFramework_Mac.ChannelAnnouncement, b: LDKFramework_Mac.ChannelUpdate, c: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PaymentError : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKPaymentError)
  public init(pointer: LDKFramework_Mac.LDKPaymentError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum PaymentErrorValueType {
    case Invoice, Routing, Sending
    public static func == (a: LDKFramework_Mac.PaymentError.PaymentErrorValueType, b: LDKFramework_Mac.PaymentError.PaymentErrorValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.PaymentError.PaymentErrorValueType?
  public func getValueAsInvoice() -> Swift.String?
  public func getValueAsRouting() -> LDKFramework_Mac.LightningError?
  public func getValueAsSending() -> LDKFramework_Mac.PaymentSendFailure?
  @objc deinit
  public func clone() -> LDKFramework_Mac.PaymentError
  public class func invoice(a: Swift.String) -> LDKFramework_Mac.PaymentError
  public class func routing(a: LDKFramework_Mac.LightningError) -> LDKFramework_Mac.PaymentError
  public class func sending(a: LDKFramework_Mac.PaymentSendFailure) -> LDKFramework_Mac.PaymentError
}
@_hasMissingDesignatedInitializers public class WatchedOutput : LDKFramework_Mac.NativeTypeWrapper {
  public init(block_hash_arg: [Swift.UInt8], outpoint_arg: LDKFramework_Mac.OutPoint, script_pubkey_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKWatchedOutput)
  public init(pointer: LDKFramework_Mac.LDKWatchedOutput, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_block_hash() -> [Swift.UInt8]
  public func set_block_hash(val: [Swift.UInt8])
  public func get_outpoint() -> LDKFramework_Mac.OutPoint?
  public func set_outpoint(val: LDKFramework_Mac.OutPoint)
  public func get_script_pubkey() -> [Swift.UInt8]
  public func set_script_pubkey(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.WatchedOutput
  public func hash() -> Swift.UInt64
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelAnnouncementDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelAnnouncementDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelAnnouncementDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelAnnouncement?
  public class func ok(o: LDKFramework_Mac.ChannelAnnouncement) -> LDKFramework_Mac.Result_ChannelAnnouncementDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelAnnouncementDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelAnnouncementDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Option_u16Z : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: Swift.UInt16?)
  public init(pointer: LDKFramework_Mac.LDKCOption_u16Z)
  public init(pointer: LDKFramework_Mac.LDKCOption_u16Z, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> Swift.UInt16?
  public class func some(o: Swift.UInt16) -> LDKFramework_Mac.Option_u16Z
  public class func none() -> LDKFramework_Mac.Option_u16Z
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_u16Z
}
@_hasMissingDesignatedInitializers public class Result_InvoiceFeaturesDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceFeaturesDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceFeaturesDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.InvoiceFeatures?
  public class func ok(o: LDKFramework_Mac.InvoiceFeatures) -> LDKFramework_Mac.Result_InvoiceFeaturesDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_InvoiceFeaturesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ClosureReason : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKClosureReason)
  public init(pointer: LDKFramework_Mac.LDKClosureReason, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum ClosureReasonValueType {
    case CounterpartyForceClosed, ProcessingError
    public static func == (a: LDKFramework_Mac.ClosureReason.ClosureReasonValueType, b: LDKFramework_Mac.ClosureReason.ClosureReasonValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.ClosureReason.ClosureReasonValueType?
  public func getValueAsCounterpartyForceClosed() -> LDKFramework_Mac.ClosureReason.CounterpartyForceClosed?
  public func getValueAsProcessingError() -> LDKFramework_Mac.ClosureReason.ProcessingError?
  @objc deinit
  public func clone() -> LDKFramework_Mac.ClosureReason
  public class func counterparty_force_closed(peer_msg: Swift.String) -> LDKFramework_Mac.ClosureReason
  public class func holder_force_closed() -> LDKFramework_Mac.ClosureReason
  public class func cooperative_closure() -> LDKFramework_Mac.ClosureReason
  public class func commitment_tx_confirmed() -> LDKFramework_Mac.ClosureReason
  public class func funding_timed_out() -> LDKFramework_Mac.ClosureReason
  public class func processing_error(err: Swift.String) -> LDKFramework_Mac.ClosureReason
  public class func disconnected_peer() -> LDKFramework_Mac.ClosureReason
  public class func outdated_channel_manager() -> LDKFramework_Mac.ClosureReason
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_COption_ClosureReasonZDecodeErrorZ
  @_hasMissingDesignatedInitializers public class CounterpartyForceClosed : LDKFramework_Mac.NativeTypeWrapper {
    public func getPeer_msg() -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ProcessingError : LDKFramework_Mac.NativeTypeWrapper {
    public func getErr() -> Swift.String
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class C2Tuple_BlockHashChannelManagerZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_BlockHashChannelManagerZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_BlockHashChannelManagerZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func new(a: [Swift.UInt8], b: LDKFramework_Mac.ChannelManager) -> LDKFramework_Mac.C2Tuple_BlockHashChannelManagerZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_FundingSignedDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_FundingSignedDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_FundingSignedDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.FundingSigned?
  public class func ok(o: LDKFramework_Mac.FundingSigned) -> LDKFramework_Mac.Result_FundingSignedDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_FundingSignedDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_FundingSignedDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class PositiveTimestamp : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKPositiveTimestamp)
  public init(pointer: LDKFramework_Mac.LDKPositiveTimestamp, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.PositiveTimestamp, b: LDKFramework_Mac.PositiveTimestamp) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.PositiveTimestamp
  public class func from_unix_timestamp(unix_seconds: Swift.UInt64) -> LDKFramework_Mac.Result_PositiveTimestampCreationErrorZ
  public class func from_system_time(time: Swift.UInt64) -> LDKFramework_Mac.Result_PositiveTimestampCreationErrorZ
  public class func from_duration_since_epoch(duration: Swift.UInt64) -> LDKFramework_Mac.Result_PositiveTimestampCreationErrorZ
  public func as_unix_timestamp() -> Swift.UInt64
  public func as_duration_since_epoch() -> Swift.UInt64
  public func as_time() -> Swift.UInt64
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MessageSendEvent : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKMessageSendEvent)
  public init(pointer: LDKFramework_Mac.LDKMessageSendEvent, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum MessageSendEventValueType {
    case SendAcceptChannel, SendOpenChannel, SendFundingCreated, SendFundingSigned, SendFundingLocked, SendAnnouncementSignatures, UpdateHTLCs, SendRevokeAndACK, SendClosingSigned, SendShutdown, SendChannelReestablish, BroadcastChannelAnnouncement, BroadcastNodeAnnouncement, BroadcastChannelUpdate, SendChannelUpdate, HandleError, SendChannelRangeQuery, SendShortIdsQuery, SendReplyChannelRange, SendGossipTimestampFilter
    public static func == (a: LDKFramework_Mac.MessageSendEvent.MessageSendEventValueType, b: LDKFramework_Mac.MessageSendEvent.MessageSendEventValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.MessageSendEvent.MessageSendEventValueType?
  public func getValueAsSendAcceptChannel() -> LDKFramework_Mac.MessageSendEvent.SendAcceptChannel?
  public func getValueAsSendOpenChannel() -> LDKFramework_Mac.MessageSendEvent.SendOpenChannel?
  public func getValueAsSendFundingCreated() -> LDKFramework_Mac.MessageSendEvent.SendFundingCreated?
  public func getValueAsSendFundingSigned() -> LDKFramework_Mac.MessageSendEvent.SendFundingSigned?
  public func getValueAsSendFundingLocked() -> LDKFramework_Mac.MessageSendEvent.SendFundingLocked?
  public func getValueAsSendAnnouncementSignatures() -> LDKFramework_Mac.MessageSendEvent.SendAnnouncementSignatures?
  public func getValueAsUpdateHTLCs() -> LDKFramework_Mac.MessageSendEvent.UpdateHTLCs?
  public func getValueAsSendRevokeAndACK() -> LDKFramework_Mac.MessageSendEvent.SendRevokeAndACK?
  public func getValueAsSendClosingSigned() -> LDKFramework_Mac.MessageSendEvent.SendClosingSigned?
  public func getValueAsSendShutdown() -> LDKFramework_Mac.MessageSendEvent.SendShutdown?
  public func getValueAsSendChannelReestablish() -> LDKFramework_Mac.MessageSendEvent.SendChannelReestablish?
  public func getValueAsBroadcastChannelAnnouncement() -> LDKFramework_Mac.MessageSendEvent.BroadcastChannelAnnouncement?
  public func getValueAsBroadcastNodeAnnouncement() -> LDKFramework_Mac.MessageSendEvent.BroadcastNodeAnnouncement?
  public func getValueAsBroadcastChannelUpdate() -> LDKFramework_Mac.MessageSendEvent.BroadcastChannelUpdate?
  public func getValueAsSendChannelUpdate() -> LDKFramework_Mac.MessageSendEvent.SendChannelUpdate?
  public func getValueAsHandleError() -> LDKFramework_Mac.MessageSendEvent.HandleError?
  public func getValueAsSendChannelRangeQuery() -> LDKFramework_Mac.MessageSendEvent.SendChannelRangeQuery?
  public func getValueAsSendShortIdsQuery() -> LDKFramework_Mac.MessageSendEvent.SendShortIdsQuery?
  public func getValueAsSendReplyChannelRange() -> LDKFramework_Mac.MessageSendEvent.SendReplyChannelRange?
  public func getValueAsSendGossipTimestampFilter() -> LDKFramework_Mac.MessageSendEvent.SendGossipTimestampFilter?
  @objc deinit
  public func clone() -> LDKFramework_Mac.MessageSendEvent
  public class func send_accept_channel(node_id: [Swift.UInt8], msg: LDKFramework_Mac.AcceptChannel) -> LDKFramework_Mac.MessageSendEvent
  public class func send_open_channel(node_id: [Swift.UInt8], msg: LDKFramework_Mac.OpenChannel) -> LDKFramework_Mac.MessageSendEvent
  public class func send_funding_created(node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingCreated) -> LDKFramework_Mac.MessageSendEvent
  public class func send_funding_signed(node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingSigned) -> LDKFramework_Mac.MessageSendEvent
  public class func send_funding_locked(node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingLocked) -> LDKFramework_Mac.MessageSendEvent
  public class func send_announcement_signatures(node_id: [Swift.UInt8], msg: LDKFramework_Mac.AnnouncementSignatures) -> LDKFramework_Mac.MessageSendEvent
  public class func update_htlcs(node_id: [Swift.UInt8], updates: LDKFramework_Mac.CommitmentUpdate) -> LDKFramework_Mac.MessageSendEvent
  public class func send_revoke_and_ack(node_id: [Swift.UInt8], msg: LDKFramework_Mac.RevokeAndACK) -> LDKFramework_Mac.MessageSendEvent
  public class func send_closing_signed(node_id: [Swift.UInt8], msg: LDKFramework_Mac.ClosingSigned) -> LDKFramework_Mac.MessageSendEvent
  public class func send_shutdown(node_id: [Swift.UInt8], msg: LDKFramework_Mac.Shutdown) -> LDKFramework_Mac.MessageSendEvent
  public class func send_channel_reestablish(node_id: [Swift.UInt8], msg: LDKFramework_Mac.ChannelReestablish) -> LDKFramework_Mac.MessageSendEvent
  public class func broadcast_channel_announcement(msg: LDKFramework_Mac.ChannelAnnouncement, update_msg: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.MessageSendEvent
  public class func broadcast_node_announcement(msg: LDKFramework_Mac.NodeAnnouncement) -> LDKFramework_Mac.MessageSendEvent
  public class func broadcast_channel_update(msg: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.MessageSendEvent
  public class func send_channel_update(node_id: [Swift.UInt8], msg: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.MessageSendEvent
  public class func handle_error(node_id: [Swift.UInt8], action: LDKFramework_Mac.ErrorAction) -> LDKFramework_Mac.MessageSendEvent
  public class func send_channel_range_query(node_id: [Swift.UInt8], msg: LDKFramework_Mac.QueryChannelRange) -> LDKFramework_Mac.MessageSendEvent
  public class func send_short_ids_query(node_id: [Swift.UInt8], msg: LDKFramework_Mac.QueryShortChannelIds) -> LDKFramework_Mac.MessageSendEvent
  public class func send_reply_channel_range(node_id: [Swift.UInt8], msg: LDKFramework_Mac.ReplyChannelRange) -> LDKFramework_Mac.MessageSendEvent
  public class func send_gossip_timestamp_filter(node_id: [Swift.UInt8], msg: LDKFramework_Mac.GossipTimestampFilter) -> LDKFramework_Mac.MessageSendEvent
  @_hasMissingDesignatedInitializers public class SendAcceptChannel : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.AcceptChannel
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendOpenChannel : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.OpenChannel
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendFundingCreated : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.FundingCreated
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendFundingSigned : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.FundingSigned
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendFundingLocked : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.FundingLocked
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendAnnouncementSignatures : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.AnnouncementSignatures
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class UpdateHTLCs : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getUpdates() -> LDKFramework_Mac.CommitmentUpdate
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendRevokeAndACK : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.RevokeAndACK
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendClosingSigned : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.ClosingSigned
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendShutdown : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.Shutdown
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendChannelReestablish : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.ChannelReestablish
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class BroadcastChannelAnnouncement : LDKFramework_Mac.NativeTypeWrapper {
    public func getMsg() -> LDKFramework_Mac.ChannelAnnouncement
    public func getUpdate_msg() -> LDKFramework_Mac.ChannelUpdate
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class BroadcastNodeAnnouncement : LDKFramework_Mac.NativeTypeWrapper {
    public func getMsg() -> LDKFramework_Mac.NodeAnnouncement
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class BroadcastChannelUpdate : LDKFramework_Mac.NativeTypeWrapper {
    public func getMsg() -> LDKFramework_Mac.ChannelUpdate
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendChannelUpdate : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.ChannelUpdate
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class HandleError : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getAction() -> LDKFramework_Mac.ErrorAction
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendChannelRangeQuery : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.QueryChannelRange
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendShortIdsQuery : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.QueryShortChannelIds
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendReplyChannelRange : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.ReplyChannelRange
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class SendGossipTimestampFilter : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getMsg() -> LDKFramework_Mac.GossipTimestampFilter
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class ChannelTypeFeatures : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKChannelTypeFeatures)
  public init(pointer: LDKFramework_Mac.LDKChannelTypeFeatures, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.ChannelTypeFeatures, b: LDKFramework_Mac.ChannelTypeFeatures) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.ChannelTypeFeatures
  public func requires_unknown_bits() -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelTypeFeaturesDecodeErrorZ
  public func set_static_remote_key_optional()
  public func set_static_remote_key_required()
  public func supports_static_remote_key() -> Swift.Bool
  public func requires_static_remote_key() -> Swift.Bool
  public func set_scid_privacy_optional()
  public func set_scid_privacy_required()
  public func supports_scid_privacy() -> Swift.Bool
  public func requires_scid_privacy() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelUpdate : LDKFramework_Mac.NativeTypeWrapper {
  public init(signature_arg: [Swift.UInt8], contents_arg: LDKFramework_Mac.UnsignedChannelUpdate)
  public init(pointer: LDKFramework_Mac.LDKChannelUpdate)
  public init(pointer: LDKFramework_Mac.LDKChannelUpdate, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func get_contents() -> LDKFramework_Mac.UnsignedChannelUpdate
  public func set_contents(val: LDKFramework_Mac.UnsignedChannelUpdate)
  public func clone() -> LDKFramework_Mac.ChannelUpdate
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelUpdateDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueryChannelRange : LDKFramework_Mac.NativeTypeWrapper {
  public init(chain_hash_arg: [Swift.UInt8], first_blocknum_arg: Swift.UInt32, number_of_blocks_arg: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKQueryChannelRange)
  public init(pointer: LDKFramework_Mac.LDKQueryChannelRange, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_first_blocknum() -> Swift.UInt32
  public func set_first_blocknum(val: Swift.UInt32)
  public func get_number_of_blocks() -> Swift.UInt32
  public func set_number_of_blocks(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.QueryChannelRange
  public func end_blocknum() -> Swift.UInt32
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_QueryChannelRangeDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_BuiltCommitmentTransactionDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_BuiltCommitmentTransactionDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_BuiltCommitmentTransactionDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.BuiltCommitmentTransaction?
  public class func ok(o: LDKFramework_Mac.BuiltCommitmentTransaction) -> LDKFramework_Mac.Result_BuiltCommitmentTransactionDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_BuiltCommitmentTransactionDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_BuiltCommitmentTransactionDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_CounterpartyChannelTransactionParametersDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.CounterpartyChannelTransactionParameters?
  public class func ok(o: LDKFramework_Mac.CounterpartyChannelTransactionParameters) -> LDKFramework_Mac.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_COption_EventZDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_EventZDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_EventZDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Option_EventZ?
  public class func ok(o: LDKFramework_Mac.Option_EventZ) -> LDKFramework_Mac.Result_COption_EventZDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_COption_EventZDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_COption_EventZDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.C2Tuple_BlockHashChannelManagerZ?
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func ok(o: LDKFramework_Mac.C2Tuple_BlockHashChannelManagerZ) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelMonitorUpdate : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKChannelMonitorUpdate)
  public init(pointer: LDKFramework_Mac.LDKChannelMonitorUpdate, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_update_id() -> Swift.UInt64
  public func set_update_id(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.ChannelMonitorUpdate
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelMonitorUpdateDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LightningError : LDKFramework_Mac.NativeTypeWrapper {
  public init(err_arg: Swift.String, action_arg: LDKFramework_Mac.ErrorAction)
  public init(pointer: LDKFramework_Mac.LDKLightningError)
  public init(pointer: LDKFramework_Mac.LDKLightningError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_err() -> Swift.String
  public func set_err(val: Swift.String)
  public func get_action() -> LDKFramework_Mac.ErrorAction
  public func set_action(val: LDKFramework_Mac.ErrorAction)
  public func clone() -> LDKFramework_Mac.LightningError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FundingCreated : LDKFramework_Mac.NativeTypeWrapper {
  public init(temporary_channel_id_arg: [Swift.UInt8], funding_txid_arg: [Swift.UInt8], funding_output_index_arg: Swift.UInt16, signature_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKFundingCreated)
  public init(pointer: LDKFramework_Mac.LDKFundingCreated, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_temporary_channel_id() -> [Swift.UInt8]
  public func set_temporary_channel_id(val: [Swift.UInt8])
  public func get_funding_txid() -> [Swift.UInt8]
  public func set_funding_txid(val: [Swift.UInt8])
  public func get_funding_output_index() -> Swift.UInt16
  public func set_funding_output_index(val: Swift.UInt16)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.FundingCreated
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_FundingCreatedDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_RouteLightningErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteLightningErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteLightningErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LightningError?
  public func getValue() -> LDKFramework_Mac.Route?
  public class func ok(o: LDKFramework_Mac.Route) -> LDKFramework_Mac.Result_RouteLightningErrorZ
  public class func err(e: LDKFramework_Mac.LightningError) -> LDKFramework_Mac.Result_RouteLightningErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RouteLightningErrorZ
}
@_hasMissingDesignatedInitializers public class ChainMonitor : LDKFramework_Mac.NativeTypeWrapper {
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(chain_source: LDKFramework_Mac.Option_FilterZ, broadcaster: LDKFramework_Mac.BroadcasterInterface, logger: LDKFramework_Mac.Logger, feeest: LDKFramework_Mac.FeeEstimator, persister: LDKFramework_Mac.Persist)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKChainMonitor)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKChainMonitor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_claimable_balances(ignored_channels: [LDKFramework_Mac.ChannelDetails]) -> [LDKFramework_Mac.Balance]
  public func get_monitor(funding_txo: LDKFramework_Mac.OutPoint) -> LDKFramework_Mac.Result_LockedChannelMonitorNoneZ
  public func list_monitors() -> [LDKFramework_Mac.OutPoint]
  public func channel_monitor_updated(funding_txo: LDKFramework_Mac.OutPoint, completed_update_id: LDKFramework_Mac.MonitorUpdateId) -> LDKFramework_Mac.Result_NoneAPIErrorZ
  public func as_Listen() -> LDKFramework_Mac.NativelyImplementedListen
  public func as_Confirm() -> LDKFramework_Mac.NativelyImplementedConfirm
  public func as_Watch() -> LDKFramework_Mac.NativelyImplementedWatch
  public func as_EventsProvider() -> LDKFramework_Mac.NativelyImplementedEventsProvider
  @objc deinit
}
@_hasMissingDesignatedInitializers public class APIError : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKAPIError)
  public init(pointer: LDKFramework_Mac.LDKAPIError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum APIErrorValueType {
    case APIMisuseError, FeeRateTooHigh, RouteError, ChannelUnavailable, IncompatibleShutdownScript
    public static func == (a: LDKFramework_Mac.APIError.APIErrorValueType, b: LDKFramework_Mac.APIError.APIErrorValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.APIError.APIErrorValueType?
  public func getValueAsAPIMisuseError() -> LDKFramework_Mac.APIError.APIMisuseError?
  public func getValueAsFeeRateTooHigh() -> LDKFramework_Mac.APIError.FeeRateTooHigh?
  public func getValueAsRouteError() -> LDKFramework_Mac.APIError.RouteError?
  public func getValueAsChannelUnavailable() -> LDKFramework_Mac.APIError.ChannelUnavailable?
  public func getValueAsIncompatibleShutdownScript() -> LDKFramework_Mac.APIError.IncompatibleShutdownScript?
  @objc deinit
  public func clone() -> LDKFramework_Mac.APIError
  public class func apimisuse_error(err: Swift.String) -> LDKFramework_Mac.APIError
  public class func fee_rate_too_high(err: Swift.String, feerate: Swift.UInt32) -> LDKFramework_Mac.APIError
  public class func route_error(err: Swift.String) -> LDKFramework_Mac.APIError
  public class func channel_unavailable(err: Swift.String) -> LDKFramework_Mac.APIError
  public class func monitor_update_failed() -> LDKFramework_Mac.APIError
  public class func incompatible_shutdown_script(script: LDKFramework_Mac.ShutdownScript) -> LDKFramework_Mac.APIError
  @_hasMissingDesignatedInitializers public class APIMisuseError : LDKFramework_Mac.NativeTypeWrapper {
    public func getErr() -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class FeeRateTooHigh : LDKFramework_Mac.NativeTypeWrapper {
    public func getErr() -> Swift.String
    public func getFeerate() -> Swift.UInt32
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class RouteError : LDKFramework_Mac.NativeTypeWrapper {
    public func getErr() -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ChannelUnavailable : LDKFramework_Mac.NativeTypeWrapper {
    public func getErr() -> Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class IncompatibleShutdownScript : LDKFramework_Mac.NativeTypeWrapper {
    public func getScript() -> LDKFramework_Mac.ShutdownScript
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class StaticPaymentOutputDescriptor : LDKFramework_Mac.NativeTypeWrapper {
  public init(outpoint_arg: LDKFramework_Mac.OutPoint, output_arg: LDKFramework_Mac.LDKTxOut, channel_keys_id_arg: [Swift.UInt8], channel_value_satoshis_arg: Swift.UInt64)
  public init(pointer: LDKFramework_Mac.LDKStaticPaymentOutputDescriptor)
  public init(pointer: LDKFramework_Mac.LDKStaticPaymentOutputDescriptor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_outpoint() -> LDKFramework_Mac.OutPoint?
  public func set_outpoint(val: LDKFramework_Mac.OutPoint)
  public func set_output(val: LDKFramework_Mac.LDKTxOut)
  public func get_channel_keys_id() -> [Swift.UInt8]
  public func set_channel_keys_id(val: [Swift.UInt8])
  public func get_channel_value_satoshis() -> Swift.UInt64
  public func set_channel_value_satoshis(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.StaticPaymentOutputDescriptor
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_StaticPaymentOutputDescriptorDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelMonitorUpdateDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelMonitorUpdateDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelMonitorUpdateDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelMonitorUpdate?
  public class func ok(o: LDKFramework_Mac.ChannelMonitorUpdate) -> LDKFramework_Mac.Result_ChannelMonitorUpdateDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelMonitorUpdateDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelMonitorUpdateDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class BindingsError : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKError)
  public init(pointer: LDKFramework_Mac.LDKError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelMonitor : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKChannelMonitor)
  public init(pointer: LDKFramework_Mac.LDKChannelMonitor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.ChannelMonitor
  public func write() -> [Swift.UInt8]
  public func update_monitor(updates: LDKFramework_Mac.ChannelMonitorUpdate, broadcaster: LDKFramework_Mac.BroadcasterInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, logger: LDKFramework_Mac.Logger) -> LDKFramework_Mac.Result_NoneNoneZ
  public func get_latest_update_id() -> Swift.UInt64
  public func get_funding_txo() -> LDKFramework_Mac.C2Tuple_OutPointScriptZ
  public func get_outputs_to_watch() -> [LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public func load_outputs_to_watch(filter: LDKFramework_Mac.Filter)
  public func get_and_clear_pending_monitor_events() -> [LDKFramework_Mac.MonitorEvent]
  public func get_and_clear_pending_events() -> [LDKFramework_Mac.Event]
  public func get_latest_holder_commitment_txn(logger: LDKFramework_Mac.Logger) -> [[Swift.UInt8]]
  public func block_connected(header: [Swift.UInt8], txdata: [LDKFramework_Mac.C2Tuple_usizeTransactionZ], height: Swift.UInt32, broadcaster: LDKFramework_Mac.BroadcasterInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, logger: LDKFramework_Mac.Logger) -> [LDKFramework_Mac.TransactionOutputs]
  public func block_disconnected(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LDKFramework_Mac.BroadcasterInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, logger: LDKFramework_Mac.Logger)
  public func transactions_confirmed(header: [Swift.UInt8], txdata: [LDKFramework_Mac.C2Tuple_usizeTransactionZ], height: Swift.UInt32, broadcaster: LDKFramework_Mac.BroadcasterInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, logger: LDKFramework_Mac.Logger) -> [LDKFramework_Mac.TransactionOutputs]
  public func transaction_unconfirmed(txid: [Swift.UInt8], broadcaster: LDKFramework_Mac.BroadcasterInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, logger: LDKFramework_Mac.Logger)
  public func best_block_updated(header: [Swift.UInt8], height: Swift.UInt32, broadcaster: LDKFramework_Mac.BroadcasterInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, logger: LDKFramework_Mac.Logger) -> [LDKFramework_Mac.TransactionOutputs]
  public func get_relevant_txids() -> [LDKFramework_Mac.Txid]
  public func current_best_block() -> LDKFramework_Mac.BestBlock
  public func get_claimable_balances() -> [LDKFramework_Mac.Balance]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RouteHintHop : LDKFramework_Mac.NativeTypeWrapper {
  public init(src_node_id_arg: [Swift.UInt8], short_channel_id_arg: Swift.UInt64, fees_arg: LDKFramework_Mac.RoutingFees, cltv_expiry_delta_arg: Swift.UInt16, htlc_minimum_msat_arg: LDKFramework_Mac.Option_u64Z, htlc_maximum_msat_arg: LDKFramework_Mac.Option_u64Z)
  public init(pointer: LDKFramework_Mac.LDKRouteHintHop)
  public init(pointer: LDKFramework_Mac.LDKRouteHintHop, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_src_node_id() -> [Swift.UInt8]
  public func set_src_node_id(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_fees() -> LDKFramework_Mac.RoutingFees
  public func set_fees(val: LDKFramework_Mac.RoutingFees)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_htlc_minimum_msat() -> LDKFramework_Mac.Option_u64Z
  public func set_htlc_minimum_msat(val: LDKFramework_Mac.Option_u64Z)
  public func get_htlc_maximum_msat() -> LDKFramework_Mac.Option_u64Z
  public func set_htlc_maximum_msat(val: LDKFramework_Mac.Option_u64Z)
  public func clone() -> LDKFramework_Mac.RouteHintHop
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.RouteHintHop, b: LDKFramework_Mac.RouteHintHop) -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_RouteHintHopDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_RecoverableSignatureNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RecoverableSignatureNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RecoverableSignatureNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_RecoverableSignatureNoneZ
  public class func err() -> LDKFramework_Mac.Result_RecoverableSignatureNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RecoverableSignatureNoneZ
}
@_hasMissingDesignatedInitializers public class InvoicePayer : LDKFramework_Mac.NativeTypeWrapper {
  public init(payer: LDKFramework_Mac.Payer, router: LDKFramework_Mac.Router, scorer: LDKFramework_Mac.MultiThreadedLockableScore, logger: LDKFramework_Mac.Logger, event_handler: LDKFramework_Mac.EventHandler, retry_attempts: LDKFramework_Mac.RetryAttempts)
  public init(pointer: LDKFramework_Mac.LDKInvoicePayer)
  public init(pointer: LDKFramework_Mac.LDKInvoicePayer, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func pay_invoice(invoice: LDKFramework_Mac.Invoice) -> LDKFramework_Mac.Result_PaymentIdPaymentErrorZ
  public func pay_zero_value_invoice(invoice: LDKFramework_Mac.Invoice, amount_msats: Swift.UInt64) -> LDKFramework_Mac.Result_PaymentIdPaymentErrorZ
  public func pay_pubkey(pubkey: [Swift.UInt8], payment_preimage: [Swift.UInt8], amount_msats: Swift.UInt64, final_cltv_expiry_delta: Swift.UInt32) -> LDKFramework_Mac.Result_PaymentIdPaymentErrorZ
  public func remove_cached_payment(payment_hash: [Swift.UInt8])
  public func as_EventHandler() -> LDKFramework_Mac.NativelyImplementedEventHandler
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_CounterpartyForwardingInfoDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CounterpartyForwardingInfoDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CounterpartyForwardingInfoDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.CounterpartyForwardingInfo?
  public class func ok(o: LDKFramework_Mac.CounterpartyForwardingInfo) -> LDKFramework_Mac.Result_CounterpartyForwardingInfoDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_CounterpartyForwardingInfoDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CounterpartyForwardingInfoDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Option_EventZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.Event?)
  public init(pointer: LDKFramework_Mac.LDKCOption_EventZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_EventZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.Event?
  public class func some(o: LDKFramework_Mac.Event) -> LDKFramework_Mac.Option_EventZ
  public class func none() -> LDKFramework_Mac.Option_EventZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_EventZ
}
@_hasMissingDesignatedInitializers public class Result_DelayedPaymentOutputDescriptorDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.DelayedPaymentOutputDescriptor?
  public class func ok(o: LDKFramework_Mac.DelayedPaymentOutputDescriptor) -> LDKFramework_Mac.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_DelayedPaymentOutputDescriptorDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class PeerHandleError : LDKFramework_Mac.NativeTypeWrapper {
  public init(no_connection_possible_arg: Swift.Bool)
  public init(pointer: LDKFramework_Mac.LDKPeerHandleError)
  public init(pointer: LDKFramework_Mac.LDKPeerHandleError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_no_connection_possible() -> Swift.Bool
  public func set_no_connection_possible(val: Swift.Bool)
  public func clone() -> LDKFramework_Mac.PeerHandleError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RouteHint : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKRouteHint)
  public init(pointer: LDKFramework_Mac.LDKRouteHint, anchor: LDKFramework_Mac.NativeTypeWrapper)
  convenience public init(a_arg: [LDKFramework_Mac.RouteHintHop])
  public func get_a() -> [LDKFramework_Mac.RouteHintHop]
  public func set_a(val: [LDKFramework_Mac.RouteHintHop])
  public func clone() -> LDKFramework_Mac.RouteHint
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.RouteHint, b: LDKFramework_Mac.RouteHint) -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_RouteHintDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ScoringParametersDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ScoringParametersDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ScoringParametersDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ScoringParameters?
  public class func ok(o: LDKFramework_Mac.ScoringParameters) -> LDKFramework_Mac.Result_ScoringParametersDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ScoringParametersDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ScoringParametersDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Invoice : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKInvoice)
  public init(pointer: LDKFramework_Mac.LDKInvoice, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.Invoice, b: LDKFramework_Mac.Invoice) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.Invoice
  public func into_signed_raw() -> LDKFramework_Mac.SignedRawInvoice
  public func check_signature() -> LDKFramework_Mac.Result_NoneSemanticErrorZ
  public class func from_signed(signed_invoice: LDKFramework_Mac.SignedRawInvoice) -> LDKFramework_Mac.Result_InvoiceSemanticErrorZ
  public func timestamp() -> Swift.UInt64
  public func duration_since_epoch() -> Swift.UInt64
  public func payment_hash() -> [Swift.UInt8]
  public func payee_pub_key() -> [Swift.UInt8]
  public func payment_secret() -> [Swift.UInt8]
  public func features() -> LDKFramework_Mac.InvoiceFeatures
  public func recover_payee_pub_key() -> [Swift.UInt8]
  public func expiry_time() -> Swift.UInt64
  public func is_expired() -> Swift.Bool
  public func would_expire(at_time: Swift.UInt64) -> Swift.Bool
  public func min_final_cltv_expiry() -> Swift.UInt64
  public func private_routes() -> [LDKFramework_Mac.PrivateRoute]
  public func route_hints() -> [LDKFramework_Mac.RouteHint]
  public func currency() -> LDKFramework_Mac.LDKCurrency
  public func amount_milli_satoshis() -> LDKFramework_Mac.Option_u64Z
  public class func from_str(s: Swift.String) -> LDKFramework_Mac.Result_InvoiceParseOrSemanticErrorZ
  public func to_str() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_NoneSemanticErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneSemanticErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneSemanticErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKSemanticError?
  public class func ok() -> LDKFramework_Mac.Result_NoneSemanticErrorZ
  public class func err(e: LDKFramework_Mac.LDKSemanticError) -> LDKFramework_Mac.Result_NoneSemanticErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NoneSemanticErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NonePaymentSendFailureZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NonePaymentSendFailureZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NonePaymentSendFailureZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.PaymentSendFailure?
  public class func ok() -> LDKFramework_Mac.Result_NonePaymentSendFailureZ
  public class func err(e: LDKFramework_Mac.PaymentSendFailure) -> LDKFramework_Mac.Result_NonePaymentSendFailureZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NonePaymentSendFailureZ
}
@_hasMissingDesignatedInitializers public class Result_FundingLockedDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_FundingLockedDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_FundingLockedDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.FundingLocked?
  public class func ok(o: LDKFramework_Mac.FundingLocked) -> LDKFramework_Mac.Result_FundingLockedDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_FundingLockedDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_FundingLockedDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_InitFeaturesDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_InitFeaturesDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_InitFeaturesDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.InitFeatures?
  public class func ok(o: LDKFramework_Mac.InitFeatures) -> LDKFramework_Mac.Result_InitFeaturesDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_InitFeaturesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_SignatureNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_SignatureNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_SignatureNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_SignatureNoneZ
  public class func err() -> LDKFramework_Mac.Result_SignatureNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_SignatureNoneZ
}
@_hasMissingDesignatedInitializers public class ExpiryTime : LDKFramework_Mac.NativeTypeWrapper {
  public init(duration: Swift.UInt64)
  public init(pointer: LDKFramework_Mac.LDKExpiryTime)
  public init(pointer: LDKFramework_Mac.LDKExpiryTime, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.ExpiryTime
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.ExpiryTime, b: LDKFramework_Mac.ExpiryTime) -> Swift.Bool
  public func as_seconds() -> Swift.UInt64
  public func as_duration() -> Swift.UInt64
  @objc deinit
}
@_hasMissingDesignatedInitializers public class C2Tuple_u32ScriptZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_u32ScriptZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_u32ScriptZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_u32ScriptZ
  public class func new(a: Swift.UInt32, b: [Swift.UInt8]) -> LDKFramework_Mac.C2Tuple_u32ScriptZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SignOrCreationError : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKSignOrCreationError)
  public init(pointer: LDKFramework_Mac.LDKSignOrCreationError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum SignOrCreationErrorValueType {
    case CreationError
    public static func == (a: LDKFramework_Mac.SignOrCreationError.SignOrCreationErrorValueType, b: LDKFramework_Mac.SignOrCreationError.SignOrCreationErrorValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.SignOrCreationError.SignOrCreationErrorValueType?
  public func getValueAsCreationError() -> LDKFramework_Mac.LDKCreationError?
  @objc deinit
  public func clone() -> LDKFramework_Mac.SignOrCreationError
  public class func sign_error() -> LDKFramework_Mac.SignOrCreationError
  public class func creation_error(a: LDKFramework_Mac.LDKCreationError) -> LDKFramework_Mac.SignOrCreationError
  public class func eq(a: LDKFramework_Mac.SignOrCreationError, b: LDKFramework_Mac.SignOrCreationError) -> Swift.Bool
  public func to_str() -> Swift.String
}
@_hasMissingDesignatedInitializers public class TxCreationKeys : LDKFramework_Mac.NativeTypeWrapper {
  public init(per_commitment_point_arg: [Swift.UInt8], revocation_key_arg: [Swift.UInt8], broadcaster_htlc_key_arg: [Swift.UInt8], countersignatory_htlc_key_arg: [Swift.UInt8], broadcaster_delayed_payment_key_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKTxCreationKeys)
  public init(pointer: LDKFramework_Mac.LDKTxCreationKeys, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_per_commitment_point() -> [Swift.UInt8]
  public func set_per_commitment_point(val: [Swift.UInt8])
  public func get_revocation_key() -> [Swift.UInt8]
  public func set_revocation_key(val: [Swift.UInt8])
  public func get_broadcaster_htlc_key() -> [Swift.UInt8]
  public func set_broadcaster_htlc_key(val: [Swift.UInt8])
  public func get_countersignatory_htlc_key() -> [Swift.UInt8]
  public func set_countersignatory_htlc_key(val: [Swift.UInt8])
  public func get_broadcaster_delayed_payment_key() -> [Swift.UInt8]
  public func set_broadcaster_delayed_payment_key(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.TxCreationKeys
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_TxCreationKeysDecodeErrorZ
  public class func derive_new(per_commitment_point: [Swift.UInt8], broadcaster_delayed_payment_base: [Swift.UInt8], broadcaster_htlc_base: [Swift.UInt8], countersignatory_revocation_base: [Swift.UInt8], countersignatory_htlc_base: [Swift.UInt8]) -> LDKFramework_Mac.Result_TxCreationKeysErrorZ
  public class func from_channel_static_keys(per_commitment_point: [Swift.UInt8], broadcaster_keys: LDKFramework_Mac.ChannelPublicKeys, countersignatory_keys: LDKFramework_Mac.ChannelPublicKeys) -> LDKFramework_Mac.Result_TxCreationKeysErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_InitDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_InitDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_InitDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Init?
  public class func ok(o: LDKFramework_Mac.Init) -> LDKFramework_Mac.Result_InitDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_InitDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_InitDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ProbabilisticScorer : LDKFramework_Mac.NativeTypeWrapper {
  public init(params: LDKFramework_Mac.ProbabilisticScoringParameters, network_graph: LDKFramework_Mac.NetworkGraph)
  public init(pointer: LDKFramework_Mac.LDKProbabilisticScorer)
  public init(pointer: LDKFramework_Mac.LDKProbabilisticScorer, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func as_Score() -> LDKFramework_Mac.NativelyImplementedScore
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8], arg_a: LDKFramework_Mac.ProbabilisticScoringParameters, arg_b: LDKFramework_Mac.NetworkGraph) -> LDKFramework_Mac.Result_ProbabilisticScorerDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LockedChannelMonitor : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKLockedChannelMonitor)
  public init(pointer: LDKFramework_Mac.LDKLockedChannelMonitor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Filter : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKFilter)
  public init(pointer: LDKFramework_Mac.LDKFilter, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func register_tx(txid: [Swift.UInt8]?, script_pubkey: [Swift.UInt8])
  open func register_output(output: LDKFramework_Mac.WatchedOutput) -> LDKFramework_Mac.Option_C2Tuple_usizeTransactionZZ
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedFilter : LDKFramework_Mac.Filter {
  override public func register_tx(txid: [Swift.UInt8]?, script_pubkey: [Swift.UInt8])
  override public func register_output(output: LDKFramework_Mac.WatchedOutput) -> LDKFramework_Mac.Option_C2Tuple_usizeTransactionZZ
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKFilter)
  override public init(pointer: LDKFramework_Mac.LDKFilter, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EventsProvider : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKEventsProvider)
  public init(pointer: LDKFramework_Mac.LDKEventsProvider, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func process_pending_events(handler: LDKFramework_Mac.EventHandler)
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedEventsProvider : LDKFramework_Mac.EventsProvider {
  override public func process_pending_events(handler: LDKFramework_Mac.EventHandler)
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKEventsProvider)
  override public init(pointer: LDKFramework_Mac.LDKEventsProvider, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ProbabilisticScorerDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ProbabilisticScorerDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ProbabilisticScorerDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ProbabilisticScorer?
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func ok(o: LDKFramework_Mac.ProbabilisticScorer) -> LDKFramework_Mac.Result_ProbabilisticScorerDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ProbabilisticScorerDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TrustedClosingTransaction : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKTrustedClosingTransaction)
  public init(pointer: LDKFramework_Mac.LDKTrustedClosingTransaction, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func built_transaction() -> [Swift.UInt8]
  public func get_sighash_all(funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
  public func sign(funding_key: [Swift.UInt8], funding_redeemscript: [Swift.UInt8], channel_value_satoshis: Swift.UInt64) -> [Swift.UInt8]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelDetails : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], counterparty_arg: LDKFramework_Mac.ChannelCounterparty, funding_txo_arg: LDKFramework_Mac.OutPoint, channel_type_arg: LDKFramework_Mac.ChannelTypeFeatures, short_channel_id_arg: LDKFramework_Mac.Option_u64Z, inbound_scid_alias_arg: LDKFramework_Mac.Option_u64Z, channel_value_satoshis_arg: Swift.UInt64, unspendable_punishment_reserve_arg: LDKFramework_Mac.Option_u64Z, user_channel_id_arg: Swift.UInt64, balance_msat_arg: Swift.UInt64, outbound_capacity_msat_arg: Swift.UInt64, inbound_capacity_msat_arg: Swift.UInt64, confirmations_required_arg: LDKFramework_Mac.Option_u32Z, force_close_spend_delay_arg: LDKFramework_Mac.Option_u16Z, is_outbound_arg: Swift.Bool, is_funding_locked_arg: Swift.Bool, is_usable_arg: Swift.Bool, is_public_arg: Swift.Bool)
  public init(pointer: LDKFramework_Mac.LDKChannelDetails)
  public init(pointer: LDKFramework_Mac.LDKChannelDetails, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_counterparty() -> LDKFramework_Mac.ChannelCounterparty
  public func set_counterparty(val: LDKFramework_Mac.ChannelCounterparty)
  public func get_funding_txo() -> LDKFramework_Mac.OutPoint?
  public func set_funding_txo(val: LDKFramework_Mac.OutPoint)
  public func get_channel_type() -> LDKFramework_Mac.ChannelTypeFeatures
  public func set_channel_type(val: LDKFramework_Mac.ChannelTypeFeatures)
  public func get_short_channel_id() -> LDKFramework_Mac.Option_u64Z
  public func set_short_channel_id(val: LDKFramework_Mac.Option_u64Z)
  public func get_inbound_scid_alias() -> LDKFramework_Mac.Option_u64Z
  public func set_inbound_scid_alias(val: LDKFramework_Mac.Option_u64Z)
  public func get_channel_value_satoshis() -> Swift.UInt64
  public func set_channel_value_satoshis(val: Swift.UInt64)
  public func get_unspendable_punishment_reserve() -> LDKFramework_Mac.Option_u64Z
  public func set_unspendable_punishment_reserve(val: LDKFramework_Mac.Option_u64Z)
  public func get_user_channel_id() -> Swift.UInt64
  public func set_user_channel_id(val: Swift.UInt64)
  public func get_balance_msat() -> Swift.UInt64
  public func set_balance_msat(val: Swift.UInt64)
  public func get_outbound_capacity_msat() -> Swift.UInt64
  public func set_outbound_capacity_msat(val: Swift.UInt64)
  public func get_inbound_capacity_msat() -> Swift.UInt64
  public func set_inbound_capacity_msat(val: Swift.UInt64)
  public func get_confirmations_required() -> LDKFramework_Mac.Option_u32Z
  public func set_confirmations_required(val: LDKFramework_Mac.Option_u32Z)
  public func get_force_close_spend_delay() -> LDKFramework_Mac.Option_u16Z
  public func set_force_close_spend_delay(val: LDKFramework_Mac.Option_u16Z)
  public func get_is_outbound() -> Swift.Bool
  public func set_is_outbound(val: Swift.Bool)
  public func get_is_funding_locked() -> Swift.Bool
  public func set_is_funding_locked(val: Swift.Bool)
  public func get_is_usable() -> Swift.Bool
  public func set_is_usable(val: Swift.Bool)
  public func get_is_public() -> Swift.Bool
  public func set_is_public(val: Swift.Bool)
  public func clone() -> LDKFramework_Mac.ChannelDetails
  public func get_inbound_payment_scid() -> LDKFramework_Mac.Option_u64Z
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelDetailsDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_NonePeerHandleErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NonePeerHandleErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NonePeerHandleErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.PeerHandleError?
  public class func ok() -> LDKFramework_Mac.Result_NonePeerHandleErrorZ
  public class func err(e: LDKFramework_Mac.PeerHandleError) -> LDKFramework_Mac.Result_NonePeerHandleErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NonePeerHandleErrorZ
}
@_hasMissingDesignatedInitializers public class HolderCommitmentTransaction : LDKFramework_Mac.NativeTypeWrapper {
  public init(commitment_tx: LDKFramework_Mac.CommitmentTransaction, counterparty_sig: [Swift.UInt8], counterparty_htlc_sigs: [[Swift.UInt8]], holder_funding_key: [Swift.UInt8], counterparty_funding_key: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKHolderCommitmentTransaction)
  public init(pointer: LDKFramework_Mac.LDKHolderCommitmentTransaction, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_counterparty_sig() -> [Swift.UInt8]
  public func set_counterparty_sig(val: [Swift.UInt8])
  public func set_counterparty_htlc_sigs(val: [[Swift.UInt8]])
  public func clone() -> LDKFramework_Mac.HolderCommitmentTransaction
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_HolderCommitmentTransactionDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_RouteParametersDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteParametersDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteParametersDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.RouteParameters?
  public class func ok(o: LDKFramework_Mac.RouteParameters) -> LDKFramework_Mac.Result_RouteParametersDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_RouteParametersDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RouteParametersDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NoneNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public class func ok() -> LDKFramework_Mac.Result_NoneNoneZ
  public class func err() -> LDKFramework_Mac.Result_NoneNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NoneNoneZ
}
@_hasMissingDesignatedInitializers open class MessageSendEventsProvider : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKMessageSendEventsProvider)
  public init(pointer: LDKFramework_Mac.LDKMessageSendEventsProvider, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func get_and_clear_pending_msg_events() -> [LDKFramework_Mac.LDKMessageSendEvent]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedMessageSendEventsProvider : LDKFramework_Mac.MessageSendEventsProvider {
  override public func get_and_clear_pending_msg_events() -> [LDKFramework_Mac.LDKMessageSendEvent]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKMessageSendEventsProvider)
  override public init(pointer: LDKFramework_Mac.LDKMessageSendEventsProvider, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Router : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKRouter)
  public init(pointer: LDKFramework_Mac.LDKRouter, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func find_route(payer: [Swift.UInt8], route_params: LDKFramework_Mac.RouteParameters, payment_hash: [Swift.UInt8]?, first_hops: [LDKFramework_Mac.LDKChannelDetails]?, scorer: LDKFramework_Mac.Score) -> LDKFramework_Mac.Result_RouteLightningErrorZ
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedRouter : LDKFramework_Mac.Router {
  public func find_route(payer: [Swift.UInt8], route_params: LDKFramework_Mac.RouteParameters, payment_hash: [Swift.UInt8]?, first_hops: [LDKFramework_Mac.ChannelDetails]?, scorer: LDKFramework_Mac.Score) -> LDKFramework_Mac.Result_RouteLightningErrorZ
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func find_route(payer: [Swift.UInt8], route_params: LDKFramework_Mac.RouteParameters, payment_hash: [Swift.UInt8]?, first_hops: [LDKFramework_Mac.LDKChannelDetails]?, scorer: LDKFramework_Mac.Score) -> LDKFramework_Mac.Result_RouteLightningErrorZ
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKRouter)
  override public init(pointer: LDKFramework_Mac.LDKRouter, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PaymentParameters : LDKFramework_Mac.NativeTypeWrapper {
  public init(payee_pubkey: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKPaymentParameters)
  public init(pointer: LDKFramework_Mac.LDKPaymentParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_payee_pubkey() -> [Swift.UInt8]
  public func set_payee_pubkey(val: [Swift.UInt8])
  public func get_features() -> LDKFramework_Mac.InvoiceFeatures
  public func set_features(val: LDKFramework_Mac.InvoiceFeatures)
  public func get_route_hints() -> [LDKFramework_Mac.RouteHint]
  public func set_route_hints(val: [LDKFramework_Mac.RouteHint])
  public func get_expiry_time() -> LDKFramework_Mac.Option_u64Z
  public func set_expiry_time(val: LDKFramework_Mac.Option_u64Z)
  public func get_max_total_cltv_expiry_delta() -> Swift.UInt32
  public func set_max_total_cltv_expiry_delta(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.PaymentParameters
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.PaymentParameters, b: LDKFramework_Mac.PaymentParameters) -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentParametersDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class C2Tuple_OutPointScriptZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_OutPointScriptZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_OutPointScriptZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_OutPointScriptZ
  public class func new(a: LDKFramework_Mac.OutPoint, b: [Swift.UInt8]) -> LDKFramework_Mac.C2Tuple_OutPointScriptZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_C2Tuple_SignatureSignatureZNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_SignatureSignatureZNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_SignatureSignatureZNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> LDKFramework_Mac.C2Tuple_SignatureSignatureZ?
  public class func ok(o: LDKFramework_Mac.C2Tuple_SignatureSignatureZ) -> LDKFramework_Mac.Result_C2Tuple_SignatureSignatureZNoneZ
  public class func err() -> LDKFramework_Mac.Result_C2Tuple_SignatureSignatureZNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_C2Tuple_SignatureSignatureZNoneZ
}
@_hasMissingDesignatedInitializers public class Route : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKRoute)
  public init(pointer: LDKFramework_Mac.LDKRoute, anchor: LDKFramework_Mac.NativeTypeWrapper)
  convenience public init(paths_arg: [[LDKFramework_Mac.RouteHop]], payment_params_arg: LDKFramework_Mac.PaymentParameters)
  public func get_paths() -> [[LDKFramework_Mac.RouteHop]]
  public func set_paths(val: [[LDKFramework_Mac.RouteHop]])
  public func get_payment_params() -> LDKFramework_Mac.PaymentParameters
  public func set_payment_params(val: LDKFramework_Mac.PaymentParameters)
  public func clone() -> LDKFramework_Mac.Route
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.Route, b: LDKFramework_Mac.Route) -> Swift.Bool
  public func get_total_fees() -> Swift.UInt64
  public func get_total_amount() -> Swift.UInt64
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_RouteDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelFeaturesDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelFeaturesDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelFeaturesDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelFeatures?
  public class func ok(o: LDKFramework_Mac.ChannelFeatures) -> LDKFramework_Mac.Result_ChannelFeaturesDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelFeaturesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_LockedChannelMonitorNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_LockedChannelMonitorNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_LockedChannelMonitorNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> LDKFramework_Mac.LockedChannelMonitor?
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func ok(o: LDKFramework_Mac.LockedChannelMonitor) -> LDKFramework_Mac.Result_LockedChannelMonitorNoneZ
  public class func err() -> LDKFramework_Mac.Result_LockedChannelMonitorNoneZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ShutdownDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ShutdownDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ShutdownDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Shutdown?
  public class func ok(o: LDKFramework_Mac.Shutdown) -> LDKFramework_Mac.Result_ShutdownDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ShutdownDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ShutdownDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_RouteHopDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteHopDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteHopDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.RouteHop?
  public class func ok(o: LDKFramework_Mac.RouteHop) -> LDKFramework_Mac.Result_RouteHopDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_RouteHopDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RouteHopDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class RouteHop : LDKFramework_Mac.NativeTypeWrapper {
  public init(pubkey_arg: [Swift.UInt8], node_features_arg: LDKFramework_Mac.NodeFeatures, short_channel_id_arg: Swift.UInt64, channel_features_arg: LDKFramework_Mac.ChannelFeatures, fee_msat_arg: Swift.UInt64, cltv_expiry_delta_arg: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKRouteHop)
  public init(pointer: LDKFramework_Mac.LDKRouteHop, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_pubkey() -> [Swift.UInt8]
  public func set_pubkey(val: [Swift.UInt8])
  public func get_node_features() -> LDKFramework_Mac.NodeFeatures
  public func set_node_features(val: LDKFramework_Mac.NodeFeatures)
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_channel_features() -> LDKFramework_Mac.ChannelFeatures
  public func set_channel_features(val: LDKFramework_Mac.ChannelFeatures)
  public func get_fee_msat() -> Swift.UInt64
  public func set_fee_msat(val: Swift.UInt64)
  public func get_cltv_expiry_delta() -> Swift.UInt32
  public func set_cltv_expiry_delta(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.RouteHop
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.RouteHop, b: LDKFramework_Mac.RouteHop) -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_RouteHopDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UpdateAddHTLC : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKUpdateAddHTLC)
  public init(pointer: LDKFramework_Mac.LDKUpdateAddHTLC, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func get_amount_msat() -> Swift.UInt64
  public func set_amount_msat(val: Swift.UInt64)
  public func get_payment_hash() -> [Swift.UInt8]
  public func set_payment_hash(val: [Swift.UInt8])
  public func get_cltv_expiry() -> Swift.UInt32
  public func set_cltv_expiry(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.UpdateAddHTLC
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UpdateAddHTLCDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ErroringMessageHandler : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKErroringMessageHandler)
  public init(pointer: LDKFramework_Mac.LDKErroringMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func as_MessageSendEventsProvider() -> LDKFramework_Mac.NativelyImplementedMessageSendEventsProvider
  public func as_ChannelMessageHandler() -> LDKFramework_Mac.NativelyImplementedChannelMessageHandler
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelFeatures : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKChannelFeatures)
  public init(pointer: LDKFramework_Mac.LDKChannelFeatures, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.ChannelFeatures, b: LDKFramework_Mac.ChannelFeatures) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.ChannelFeatures
  public func requires_unknown_bits() -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelFeaturesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelUpdateInfoDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelUpdateInfoDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelUpdateInfoDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelUpdateInfo?
  public class func ok(o: LDKFramework_Mac.ChannelUpdateInfo) -> LDKFramework_Mac.Result_ChannelUpdateInfoDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelUpdateInfoDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelUpdateInfoDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Option_FilterZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.Filter?)
  public init(pointer: LDKFramework_Mac.LDKCOption_FilterZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_FilterZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.Filter?
  public class func some(o: LDKFramework_Mac.Filter) -> LDKFramework_Mac.Option_FilterZ
  public class func none() -> LDKFramework_Mac.Option_FilterZ
  @objc deinit
}
@_hasMissingDesignatedInitializers open class LockableScore : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKLockableScore)
  public init(pointer: LDKFramework_Mac.LDKLockableScore, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func lock() -> LDKFramework_Mac.Score
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedLockableScore : LDKFramework_Mac.LockableScore {
  override public func lock() -> LDKFramework_Mac.Score
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKLockableScore)
  override public init(pointer: LDKFramework_Mac.LDKLockableScore, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueryShortChannelIds : LDKFramework_Mac.NativeTypeWrapper {
  public init(chain_hash_arg: [Swift.UInt8], short_channel_ids_arg: [Swift.UInt64])
  public init(pointer: LDKFramework_Mac.LDKQueryShortChannelIds)
  public init(pointer: LDKFramework_Mac.LDKQueryShortChannelIds, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func set_short_channel_ids(val: [Swift.UInt64])
  public func clone() -> LDKFramework_Mac.QueryShortChannelIds
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_QueryShortChannelIdsDecodeErrorZ
  public func write() -> [Swift.UInt8]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MinFinalCltvExpiry : LDKFramework_Mac.NativeTypeWrapper {
  public init(a_arg: Swift.UInt64)
  public init(pointer: LDKFramework_Mac.LDKMinFinalCltvExpiry)
  public init(pointer: LDKFramework_Mac.LDKMinFinalCltvExpiry, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_a() -> Swift.UInt64
  public func set_a(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.MinFinalCltvExpiry
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.MinFinalCltvExpiry, b: LDKFramework_Mac.MinFinalCltvExpiry) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_TransactionNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_TransactionNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_TransactionNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_TransactionNoneZ
  public class func err() -> LDKFramework_Mac.Result_TransactionNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_TransactionNoneZ
}
@_hasMissingDesignatedInitializers public class Result_RouteHintDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteHintDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteHintDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.RouteHint?
  public class func ok(o: LDKFramework_Mac.RouteHint) -> LDKFramework_Mac.Result_RouteHintDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_RouteHintDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RouteHintDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class UnsignedChannelUpdate : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKUnsignedChannelUpdate)
  public init(pointer: LDKFramework_Mac.LDKUnsignedChannelUpdate, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_timestamp() -> Swift.UInt32
  public func set_timestamp(val: Swift.UInt32)
  public func get_flags() -> Swift.UInt8
  public func set_flags(val: Swift.UInt8)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_fee_base_msat() -> Swift.UInt32
  public func set_fee_base_msat(val: Swift.UInt32)
  public func get_fee_proportional_millionths() -> Swift.UInt32
  public func set_fee_proportional_millionths(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.UnsignedChannelUpdate
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UnsignedChannelUpdateDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers open class ChannelMessageHandler : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKChannelMessageHandler)
  public init(pointer: LDKFramework_Mac.LDKChannelMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func handle_open_channel(their_node_id: [Swift.UInt8], their_features: LDKFramework_Mac.InitFeatures, msg: LDKFramework_Mac.OpenChannel)
  open func handle_accept_channel(their_node_id: [Swift.UInt8], their_features: LDKFramework_Mac.InitFeatures, msg: LDKFramework_Mac.AcceptChannel)
  open func handle_funding_created(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingCreated)
  open func handle_funding_signed(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingSigned)
  open func handle_funding_locked(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingLocked)
  open func handle_shutdown(their_node_id: [Swift.UInt8], their_features: LDKFramework_Mac.InitFeatures, msg: LDKFramework_Mac.Shutdown)
  open func handle_closing_signed(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ClosingSigned)
  open func handle_update_add_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateAddHTLC)
  open func handle_update_fulfill_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFulfillHTLC)
  open func handle_update_fail_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFailHTLC)
  open func handle_update_fail_malformed_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFailMalformedHTLC)
  open func handle_commitment_signed(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.CommitmentSigned)
  open func handle_revoke_and_ack(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.RevokeAndACK)
  open func handle_update_fee(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFee)
  open func handle_announcement_signatures(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.AnnouncementSignatures)
  open func peer_disconnected(their_node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
  open func peer_connected(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.Init)
  open func handle_channel_reestablish(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ChannelReestablish)
  open func handle_channel_update(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ChannelUpdate)
  open func handle_error(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ErrorMessage)
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedChannelMessageHandler : LDKFramework_Mac.ChannelMessageHandler {
  override public func handle_open_channel(their_node_id: [Swift.UInt8], their_features: LDKFramework_Mac.InitFeatures, msg: LDKFramework_Mac.OpenChannel)
  override public func handle_accept_channel(their_node_id: [Swift.UInt8], their_features: LDKFramework_Mac.InitFeatures, msg: LDKFramework_Mac.AcceptChannel)
  override public func handle_funding_created(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingCreated)
  override public func handle_funding_signed(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingSigned)
  override public func handle_funding_locked(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.FundingLocked)
  override public func handle_shutdown(their_node_id: [Swift.UInt8], their_features: LDKFramework_Mac.InitFeatures, msg: LDKFramework_Mac.Shutdown)
  override public func handle_closing_signed(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ClosingSigned)
  override public func handle_update_add_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateAddHTLC)
  override public func handle_update_fulfill_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFulfillHTLC)
  override public func handle_update_fail_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFailHTLC)
  override public func handle_update_fail_malformed_htlc(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFailMalformedHTLC)
  override public func handle_commitment_signed(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.CommitmentSigned)
  override public func handle_revoke_and_ack(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.RevokeAndACK)
  override public func handle_update_fee(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.UpdateFee)
  override public func handle_announcement_signatures(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.AnnouncementSignatures)
  override public func peer_disconnected(their_node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
  override public func peer_connected(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.Init)
  override public func handle_channel_reestablish(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ChannelReestablish)
  override public func handle_channel_update(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ChannelUpdate)
  override public func handle_error(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ErrorMessage)
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKChannelMessageHandler)
  override public init(pointer: LDKFramework_Mac.LDKChannelMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UnsignedChannelAnnouncement : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKUnsignedChannelAnnouncement)
  public init(pointer: LDKFramework_Mac.LDKUnsignedChannelAnnouncement, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_features() -> LDKFramework_Mac.ChannelFeatures
  public func set_features(val: LDKFramework_Mac.ChannelFeatures)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_short_channel_id() -> Swift.UInt64
  public func set_short_channel_id(val: Swift.UInt64)
  public func get_node_id_1() -> [Swift.UInt8]
  public func set_node_id_1(val: [Swift.UInt8])
  public func get_node_id_2() -> [Swift.UInt8]
  public func set_node_id_2(val: [Swift.UInt8])
  public func get_bitcoin_key_1() -> [Swift.UInt8]
  public func set_bitcoin_key_1(val: [Swift.UInt8])
  public func get_bitcoin_key_2() -> [Swift.UInt8]
  public func set_bitcoin_key_2(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.UnsignedChannelAnnouncement
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UnsignedChannelAnnouncementDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RevokeAndACK : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], per_commitment_secret_arg: [Swift.UInt8], next_per_commitment_point_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKRevokeAndACK)
  public init(pointer: LDKFramework_Mac.LDKRevokeAndACK, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_per_commitment_secret() -> [Swift.UInt8]
  public func set_per_commitment_secret(val: [Swift.UInt8])
  public func get_next_per_commitment_point() -> [Swift.UInt8]
  public func set_next_per_commitment_point(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.RevokeAndACK
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_RevokeAndACKDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BackgroundProcessor : LDKFramework_Mac.NativeTypeWrapper {
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(persister: LDKFramework_Mac.Persister, event_handler: LDKFramework_Mac.EventHandler, chain_monitor: LDKFramework_Mac.ChainMonitor, channel_manager: LDKFramework_Mac.ChannelManager, net_graph_msg_handler: LDKFramework_Mac.NetGraphMsgHandler?, peer_manager: LDKFramework_Mac.PeerManager, logger: LDKFramework_Mac.Logger)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKBackgroundProcessor)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKBackgroundProcessor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func join() -> LDKFramework_Mac.Result_NoneErrorZ
  public func stop() -> LDKFramework_Mac.Result_NoneErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UtilMethods {
  public class func constructor_BlockHashChannelManagerZ_read(ser: [Swift.UInt8], arg_keys_manager: LDKFramework_Mac.KeysInterface, arg_fee_estimator: LDKFramework_Mac.FeeEstimator, arg_chain_monitor: LDKFramework_Mac.Watch, arg_tx_broadcaster: LDKFramework_Mac.BroadcasterInterface, arg_logger: LDKFramework_Mac.Logger, arg_default_config: LDKFramework_Mac.UserConfig, arg_channel_monitors: [LDKFramework_Mac.LDKChannelMonitor]) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  public class func constructor_BlockHashChannelMonitorZ_read(ser: [Swift.UInt8], arg: LDKFramework_Mac.KeysInterface) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BestBlock : LDKFramework_Mac.NativeTypeWrapper {
  public init(block_hash: [Swift.UInt8], height: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKBestBlock)
  public init(pointer: LDKFramework_Mac.LDKBestBlock, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.BestBlock
  public func block_hash() -> [Swift.UInt8]
  public func height() -> Swift.UInt32
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MultiThreadedLockableScore : LDKFramework_Mac.NativeTypeWrapper {
  public init(score: LDKFramework_Mac.Score)
  public init(pointer: LDKFramework_Mac.LDKMultiThreadedLockableScore)
  public init(pointer: LDKFramework_Mac.LDKMultiThreadedLockableScore, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CommitmentSigned : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], signature_arg: [Swift.UInt8], htlc_signatures_arg: [[Swift.UInt8]])
  public init(pointer: LDKFramework_Mac.LDKCommitmentSigned)
  public init(pointer: LDKFramework_Mac.LDKCommitmentSigned, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func set_htlc_signatures(val: [[Swift.UInt8]])
  public func clone() -> LDKFramework_Mac.CommitmentSigned
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_CommitmentSignedDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InMemorySigner : LDKFramework_Mac.NativeTypeWrapper {
  public init(node_secret: [Swift.UInt8], funding_key: [Swift.UInt8], revocation_base_key: [Swift.UInt8], payment_key: [Swift.UInt8], delayed_payment_base_key: [Swift.UInt8], htlc_base_key: [Swift.UInt8], commitment_seed: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, channel_keys_id: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKInMemorySigner)
  public init(pointer: LDKFramework_Mac.LDKInMemorySigner, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_funding_key() -> [Swift.UInt8]
  public func set_funding_key(val: [Swift.UInt8])
  public func get_revocation_base_key() -> [Swift.UInt8]
  public func set_revocation_base_key(val: [Swift.UInt8])
  public func get_payment_key() -> [Swift.UInt8]
  public func set_payment_key(val: [Swift.UInt8])
  public func get_delayed_payment_base_key() -> [Swift.UInt8]
  public func set_delayed_payment_base_key(val: [Swift.UInt8])
  public func get_htlc_base_key() -> [Swift.UInt8]
  public func set_htlc_base_key(val: [Swift.UInt8])
  public func get_commitment_seed() -> [Swift.UInt8]
  public func set_commitment_seed(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.InMemorySigner
  public func counterparty_pubkeys() -> LDKFramework_Mac.ChannelPublicKeys
  public func counterparty_selected_contest_delay() -> Swift.UInt16
  public func holder_selected_contest_delay() -> Swift.UInt16
  public func is_outbound() -> Swift.Bool
  public func funding_outpoint() -> LDKFramework_Mac.OutPoint?
  public func get_channel_parameters() -> LDKFramework_Mac.ChannelTransactionParameters
  public func opt_anchors() -> Swift.Bool
  public func sign_counterparty_payment_input(spend_tx: [Swift.UInt8], input_idx: Swift.UInt, descriptor: LDKFramework_Mac.StaticPaymentOutputDescriptor) -> LDKFramework_Mac.Result_CVec_CVec_u8ZZNoneZ
  public func sign_dynamic_p2wsh_input(spend_tx: [Swift.UInt8], input_idx: Swift.UInt, descriptor: LDKFramework_Mac.DelayedPaymentOutputDescriptor) -> LDKFramework_Mac.Result_CVec_CVec_u8ZZNoneZ
  public func as_BaseSign() -> LDKFramework_Mac.NativelyImplementedBaseSign
  public func as_Sign() -> LDKFramework_Mac.NativelyImplementedSign
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8], arg: [Swift.UInt8]) -> LDKFramework_Mac.Result_InMemorySignerDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_COption_ClosureReasonZDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_ClosureReasonZDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_ClosureReasonZDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Option_ClosureReasonZ?
  public class func ok(o: LDKFramework_Mac.Option_ClosureReasonZ) -> LDKFramework_Mac.Result_COption_ClosureReasonZDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_COption_ClosureReasonZDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_COption_ClosureReasonZDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_StaticPaymentOutputDescriptorDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.StaticPaymentOutputDescriptor?
  public class func ok(o: LDKFramework_Mac.StaticPaymentOutputDescriptor) -> LDKFramework_Mac.Result_StaticPaymentOutputDescriptorDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_StaticPaymentOutputDescriptorDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_StaticPaymentOutputDescriptorDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ReplyShortChannelIdsEnd : LDKFramework_Mac.NativeTypeWrapper {
  public init(chain_hash_arg: [Swift.UInt8], full_information_arg: Swift.Bool)
  public init(pointer: LDKFramework_Mac.LDKReplyShortChannelIdsEnd)
  public init(pointer: LDKFramework_Mac.LDKReplyShortChannelIdsEnd, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_full_information() -> Swift.Bool
  public func set_full_information(val: Swift.Bool)
  public func clone() -> LDKFramework_Mac.ReplyShortChannelIdsEnd
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ReplyShortChannelIdsEndDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ClosingSignedFeeRangeDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ClosingSignedFeeRangeDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ClosingSignedFeeRangeDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ClosingSignedFeeRange?
  public class func ok(o: LDKFramework_Mac.ClosingSignedFeeRange) -> LDKFramework_Mac.Result_ClosingSignedFeeRangeDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ClosingSignedFeeRangeDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ClosingSignedFeeRangeDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_UpdateFailMalformedHTLCDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UpdateFailMalformedHTLC?
  public class func ok(o: LDKFramework_Mac.UpdateFailMalformedHTLC) -> LDKFramework_Mac.Result_UpdateFailMalformedHTLCDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UpdateFailMalformedHTLCDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UpdateFailMalformedHTLCDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ChannelAnnouncement : LDKFramework_Mac.NativeTypeWrapper {
  public init(node_signature_1_arg: [Swift.UInt8], node_signature_2_arg: [Swift.UInt8], bitcoin_signature_1_arg: [Swift.UInt8], bitcoin_signature_2_arg: [Swift.UInt8], contents_arg: LDKFramework_Mac.UnsignedChannelAnnouncement)
  public init(pointer: LDKFramework_Mac.LDKChannelAnnouncement)
  public init(pointer: LDKFramework_Mac.LDKChannelAnnouncement, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_node_signature_1() -> [Swift.UInt8]
  public func set_node_signature_1(val: [Swift.UInt8])
  public func get_node_signature_2() -> [Swift.UInt8]
  public func set_node_signature_2(val: [Swift.UInt8])
  public func get_bitcoin_signature_1() -> [Swift.UInt8]
  public func set_bitcoin_signature_1(val: [Swift.UInt8])
  public func get_bitcoin_signature_2() -> [Swift.UInt8]
  public func set_bitcoin_signature_2(val: [Swift.UInt8])
  public func get_contents() -> LDKFramework_Mac.UnsignedChannelAnnouncement
  public func set_contents(val: LDKFramework_Mac.UnsignedChannelAnnouncement)
  public func clone() -> LDKFramework_Mac.ChannelAnnouncement
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelAnnouncementDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelTypeFeaturesDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelTypeFeaturesDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelTypeFeaturesDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelTypeFeatures?
  public class func ok(o: LDKFramework_Mac.ChannelTypeFeatures) -> LDKFramework_Mac.Result_ChannelTypeFeaturesDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelTypeFeaturesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_COption_MonitorEventZDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_MonitorEventZDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_MonitorEventZDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Option_MonitorEventZ?
  public class func ok(o: LDKFramework_Mac.Option_MonitorEventZ) -> LDKFramework_Mac.Result_COption_MonitorEventZDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_COption_MonitorEventZDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_COption_MonitorEventZDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ChannelTransactionParameters : LDKFramework_Mac.NativeTypeWrapper {
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(holder_pubkeys_arg: LDKFramework_Mac.ChannelPublicKeys, holder_selected_contest_delay_arg: Swift.UInt16, is_outbound_from_holder_arg: Swift.Bool, counterparty_parameters_arg: LDKFramework_Mac.CounterpartyChannelTransactionParameters, funding_outpoint_arg: LDKFramework_Mac.OutPoint, opt_anchors_arg: LDKFramework_Mac.LDKCOption_NoneZ)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKChannelTransactionParameters)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKChannelTransactionParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_holder_pubkeys() -> LDKFramework_Mac.ChannelPublicKeys
  public func set_holder_pubkeys(val: LDKFramework_Mac.ChannelPublicKeys)
  public func get_holder_selected_contest_delay() -> Swift.UInt16
  public func set_holder_selected_contest_delay(val: Swift.UInt16)
  public func get_is_outbound_from_holder() -> Swift.Bool
  public func set_is_outbound_from_holder(val: Swift.Bool)
  public func get_counterparty_parameters() -> LDKFramework_Mac.CounterpartyChannelTransactionParameters
  public func set_counterparty_parameters(val: LDKFramework_Mac.CounterpartyChannelTransactionParameters)
  public func get_funding_outpoint() -> LDKFramework_Mac.OutPoint?
  public func set_funding_outpoint(val: LDKFramework_Mac.OutPoint)
  public func get_opt_anchors() -> LDKFramework_Mac.LDKCOption_NoneZ
  public func set_opt_anchors(val: LDKFramework_Mac.LDKCOption_NoneZ)
  public func clone() -> LDKFramework_Mac.ChannelTransactionParameters
  public func is_populated() -> Swift.Bool
  public func as_holder_broadcastable() -> LDKFramework_Mac.DirectedChannelTransactionParameters
  public func as_counterparty_broadcastable() -> LDKFramework_Mac.DirectedChannelTransactionParameters
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelTransactionParametersDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers open class RoutingMessageHandler : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKRoutingMessageHandler)
  public init(pointer: LDKFramework_Mac.LDKRoutingMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func handle_node_announcement(msg: LDKFramework_Mac.NodeAnnouncement) -> LDKFramework_Mac.Result_boolLightningErrorZ
  open func handle_channel_announcement(msg: LDKFramework_Mac.ChannelAnnouncement) -> LDKFramework_Mac.Result_boolLightningErrorZ
  open func handle_channel_update(msg: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.Result_boolLightningErrorZ
  open func get_next_channel_announcements(starting_point: Swift.UInt64, batch_amount: Swift.UInt8) -> [LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  open func get_next_node_announcements(starting_point: [Swift.UInt8], batch_amount: Swift.UInt8) -> [LDKFramework_Mac.LDKNodeAnnouncement]
  open func peer_connected(their_node_id: [Swift.UInt8], initValue: LDKFramework_Mac.Init)
  open func handle_reply_channel_range(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ReplyChannelRange) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  open func handle_reply_short_channel_ids_end(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ReplyShortChannelIdsEnd) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  open func handle_query_channel_range(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.QueryChannelRange) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  open func handle_query_short_channel_ids(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.QueryShortChannelIds) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedRoutingMessageHandler : LDKFramework_Mac.RoutingMessageHandler {
  override public func handle_node_announcement(msg: LDKFramework_Mac.NodeAnnouncement) -> LDKFramework_Mac.Result_boolLightningErrorZ
  override public func handle_channel_announcement(msg: LDKFramework_Mac.ChannelAnnouncement) -> LDKFramework_Mac.Result_boolLightningErrorZ
  override public func handle_channel_update(msg: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.Result_boolLightningErrorZ
  override public func get_next_channel_announcements(starting_point: Swift.UInt64, batch_amount: Swift.UInt8) -> [LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  override public func get_next_node_announcements(starting_point: [Swift.UInt8], batch_amount: Swift.UInt8) -> [LDKFramework_Mac.LDKNodeAnnouncement]
  override public func peer_connected(their_node_id: [Swift.UInt8], initValue: LDKFramework_Mac.Init)
  override public func handle_reply_channel_range(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ReplyChannelRange) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  override public func handle_reply_short_channel_ids_end(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.ReplyShortChannelIdsEnd) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  override public func handle_query_channel_range(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.QueryChannelRange) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  override public func handle_query_short_channel_ids(their_node_id: [Swift.UInt8], msg: LDKFramework_Mac.QueryShortChannelIds) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKRoutingMessageHandler)
  override public init(pointer: LDKFramework_Mac.LDKRoutingMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_NodeFeaturesDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeFeaturesDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeFeaturesDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.NodeFeatures?
  public class func ok(o: LDKFramework_Mac.NodeFeatures) -> LDKFramework_Mac.Result_NodeFeaturesDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_NodeFeaturesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_CVec_u8ZPeerHandleErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_u8ZPeerHandleErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_u8ZPeerHandleErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.PeerHandleError?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_CVec_u8ZPeerHandleErrorZ
  public class func err(e: LDKFramework_Mac.PeerHandleError) -> LDKFramework_Mac.Result_CVec_u8ZPeerHandleErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CVec_u8ZPeerHandleErrorZ
}
@_hasMissingDesignatedInitializers public class Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ?
  public class func ok(o: LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ReplyChannelRange : LDKFramework_Mac.NativeTypeWrapper {
  public init(chain_hash_arg: [Swift.UInt8], first_blocknum_arg: Swift.UInt32, number_of_blocks_arg: Swift.UInt32, sync_complete_arg: Swift.Bool, short_channel_ids_arg: [Swift.UInt64])
  public init(pointer: LDKFramework_Mac.LDKReplyChannelRange)
  public init(pointer: LDKFramework_Mac.LDKReplyChannelRange, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_first_blocknum() -> Swift.UInt32
  public func set_first_blocknum(val: Swift.UInt32)
  public func get_number_of_blocks() -> Swift.UInt32
  public func set_number_of_blocks(val: Swift.UInt32)
  public func get_sync_complete() -> Swift.Bool
  public func set_sync_complete(val: Swift.Bool)
  public func set_short_channel_ids(val: [Swift.UInt64])
  public func clone() -> LDKFramework_Mac.ReplyChannelRange
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ReplyChannelRangeDecodeErrorZ
  public func write() -> [Swift.UInt8]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_PaymentIdPaymentSendFailureZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentIdPaymentSendFailureZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentIdPaymentSendFailureZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.PaymentSendFailure?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
  public class func err(e: LDKFramework_Mac.PaymentSendFailure) -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
}
@_hasMissingDesignatedInitializers public class NetworkGraph : LDKFramework_Mac.NativeTypeWrapper {
  public init(genesis_hash: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKNetworkGraph)
  public init(pointer: LDKFramework_Mac.LDKNetworkGraph, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.NetworkGraph
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_NetworkGraphDecodeErrorZ
  public func read_only() -> LDKFramework_Mac.ReadOnlyNetworkGraph
  public func update_node_from_announcement(msg: LDKFramework_Mac.NodeAnnouncement) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  public func update_node_from_unsigned_announcement(msg: LDKFramework_Mac.UnsignedNodeAnnouncement) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  public func update_channel_from_announcement(msg: LDKFramework_Mac.ChannelAnnouncement, chain_access: LDKFramework_Mac.Option_AccessZ) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  public func update_channel_from_unsigned_announcement(msg: LDKFramework_Mac.UnsignedChannelAnnouncement, chain_access: LDKFramework_Mac.Option_AccessZ) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  public func close_channel_from_update(short_channel_id: Swift.UInt64, is_permanent: Swift.Bool)
  public func fail_node(_node_id: [Swift.UInt8], is_permanent: Swift.Bool)
  public func remove_stale_channels()
  public func remove_stale_channels_with_time(current_time_unix: Swift.UInt64)
  public func update_channel(msg: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  public func update_channel_unsigned(msg: LDKFramework_Mac.UnsignedChannelUpdate) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Option_ClosureReasonZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.ClosureReason?)
  public init(pointer: LDKFramework_Mac.LDKCOption_ClosureReasonZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_ClosureReasonZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.ClosureReason?
  public class func some(o: LDKFramework_Mac.ClosureReason) -> LDKFramework_Mac.Option_ClosureReasonZ
  public class func none() -> LDKFramework_Mac.Option_ClosureReasonZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_ClosureReasonZ
}
@_hasMissingDesignatedInitializers public class RetryAttempts : LDKFramework_Mac.NativeTypeWrapper {
  public init(a_arg: Swift.UInt)
  public init(pointer: LDKFramework_Mac.LDKRetryAttempts)
  public init(pointer: LDKFramework_Mac.LDKRetryAttempts, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_a() -> Swift.UInt
  public func set_a(val: Swift.UInt)
  public func clone() -> LDKFramework_Mac.RetryAttempts
  public class func eq(a: LDKFramework_Mac.RetryAttempts, b: LDKFramework_Mac.RetryAttempts) -> Swift.Bool
  public func hash() -> Swift.UInt64
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Shutdown : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], scriptpubkey_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKShutdown)
  public init(pointer: LDKFramework_Mac.LDKShutdown, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_scriptpubkey() -> [Swift.UInt8]
  public func set_scriptpubkey(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.Shutdown
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ShutdownDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetworkUpdate : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKNetworkUpdate)
  public init(pointer: LDKFramework_Mac.LDKNetworkUpdate, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum NetworkUpdateValueType {
    case ChannelUpdateMessage, ChannelClosed, NodeFailure
    public static func == (a: LDKFramework_Mac.NetworkUpdate.NetworkUpdateValueType, b: LDKFramework_Mac.NetworkUpdate.NetworkUpdateValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.NetworkUpdate.NetworkUpdateValueType?
  public func getValueAsChannelUpdateMessage() -> LDKFramework_Mac.NetworkUpdate.ChannelUpdateMessage?
  public func getValueAsChannelClosed() -> LDKFramework_Mac.NetworkUpdate.ChannelClosed?
  public func getValueAsNodeFailure() -> LDKFramework_Mac.NetworkUpdate.NodeFailure?
  @objc deinit
  public func clone() -> LDKFramework_Mac.NetworkUpdate
  public class func channel_update_message(msg: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.NetworkUpdate
  public class func channel_closed(short_channel_id: Swift.UInt64, is_permanent: Swift.Bool) -> LDKFramework_Mac.NetworkUpdate
  public class func node_failure(node_id: [Swift.UInt8], is_permanent: Swift.Bool) -> LDKFramework_Mac.NetworkUpdate
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_COption_NetworkUpdateZDecodeErrorZ
  @_hasMissingDesignatedInitializers public class ChannelUpdateMessage : LDKFramework_Mac.NativeTypeWrapper {
    public func getMsg() -> LDKFramework_Mac.ChannelUpdate
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ChannelClosed : LDKFramework_Mac.NativeTypeWrapper {
    public func getShort_channel_id() -> Swift.UInt64
    public func getIs_permanent() -> Swift.Bool
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class NodeFailure : LDKFramework_Mac.NativeTypeWrapper {
    public func getNode_id() -> [Swift.UInt8]
    public func getIs_permanent() -> Swift.Bool
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class UnsignedNodeAnnouncement : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKUnsignedNodeAnnouncement)
  public init(pointer: LDKFramework_Mac.LDKUnsignedNodeAnnouncement, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_features() -> LDKFramework_Mac.NodeFeatures
  public func set_features(val: LDKFramework_Mac.NodeFeatures)
  public func get_timestamp() -> Swift.UInt32
  public func set_timestamp(val: Swift.UInt32)
  public func get_node_id() -> [Swift.UInt8]
  public func set_node_id(val: [Swift.UInt8])
  public func get_rgb() -> [Swift.UInt8]
  public func set_rgb(val: [Swift.UInt8])
  public func get_alias() -> [Swift.UInt8]
  public func set_alias(val: [Swift.UInt8])
  public func set_addresses(val: [LDKFramework_Mac.NetAddress])
  public func clone() -> LDKFramework_Mac.UnsignedNodeAnnouncement
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UnsignedNodeAnnouncementDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_COption_TypeZDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_TypeZDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_COption_TypeZDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Option_TypeZ?
  public class func ok(o: LDKFramework_Mac.Option_TypeZ) -> LDKFramework_Mac.Result_COption_TypeZDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_COption_TypeZDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_COption_TypeZDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class DefaultRouter : LDKFramework_Mac.NativeTypeWrapper {
  public init(network_graph: LDKFramework_Mac.NetworkGraph, logger: LDKFramework_Mac.Logger, random_seed_bytes: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKDefaultRouter)
  public init(pointer: LDKFramework_Mac.LDKDefaultRouter, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func as_Router() -> LDKFramework_Mac.NativelyImplementedRouter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CounterpartyCommitmentSecrets : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCounterpartyCommitmentSecrets)
  public init(pointer: LDKFramework_Mac.LDKCounterpartyCommitmentSecrets, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.CounterpartyCommitmentSecrets
  public func get_min_seen_secret() -> Swift.UInt64
  public func provide_secret(idx: Swift.UInt64, secret: [Swift.UInt8]) -> LDKFramework_Mac.Result_NoneNoneZ
  public func get_secret(idx: Swift.UInt64) -> [Swift.UInt8]
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_CounterpartyCommitmentSecretsDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_CommitmentTransactionDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CommitmentTransactionDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CommitmentTransactionDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.CommitmentTransaction?
  public class func ok(o: LDKFramework_Mac.CommitmentTransaction) -> LDKFramework_Mac.Result_CommitmentTransactionDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_CommitmentTransactionDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CommitmentTransactionDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_UnsignedNodeAnnouncementDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UnsignedNodeAnnouncement?
  public class func ok(o: LDKFramework_Mac.UnsignedNodeAnnouncement) -> LDKFramework_Mac.Result_UnsignedNodeAnnouncementDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UnsignedNodeAnnouncementDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UnsignedNodeAnnouncementDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ChannelReestablish : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKChannelReestablish)
  public init(pointer: LDKFramework_Mac.LDKChannelReestablish, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_next_local_commitment_number() -> Swift.UInt64
  public func set_next_local_commitment_number(val: Swift.UInt64)
  public func get_next_remote_commitment_number() -> Swift.UInt64
  public func set_next_remote_commitment_number(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.ChannelReestablish
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelReestablishDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InvoiceFeatures : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKInvoiceFeatures)
  public init(pointer: LDKFramework_Mac.LDKInvoiceFeatures, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.InvoiceFeatures, b: LDKFramework_Mac.InvoiceFeatures) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.InvoiceFeatures
  public func requires_unknown_bits() -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_InvoiceFeaturesDecodeErrorZ
  public func set_variable_length_onion_optional()
  public func set_variable_length_onion_required()
  public func supports_variable_length_onion() -> Swift.Bool
  public func requires_variable_length_onion() -> Swift.Bool
  public func set_payment_secret_optional()
  public func set_payment_secret_required()
  public func supports_payment_secret() -> Swift.Bool
  public func requires_payment_secret() -> Swift.Bool
  public func set_basic_mpp_optional()
  public func set_basic_mpp_required()
  public func supports_basic_mpp() -> Swift.Bool
  public func requires_basic_mpp() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PaymentPurpose : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKPaymentPurpose)
  public init(pointer: LDKFramework_Mac.LDKPaymentPurpose, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum PaymentPurposeValueType {
    case InvoicePayment, SpontaneousPayment
    public static func == (a: LDKFramework_Mac.PaymentPurpose.PaymentPurposeValueType, b: LDKFramework_Mac.PaymentPurpose.PaymentPurposeValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.PaymentPurpose.PaymentPurposeValueType?
  public func getValueAsInvoicePayment() -> LDKFramework_Mac.PaymentPurpose.InvoicePayment?
  public func getValueAsSpontaneousPayment() -> [Swift.UInt8]?
  @objc deinit
  public func clone() -> LDKFramework_Mac.PaymentPurpose
  public class func invoice_payment(payment_preimage: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LDKFramework_Mac.PaymentPurpose
  public class func spontaneous_payment(a: [Swift.UInt8]) -> LDKFramework_Mac.PaymentPurpose
  @_hasMissingDesignatedInitializers public class InvoicePayment : LDKFramework_Mac.NativeTypeWrapper {
    public func getPayment_preimage() -> [Swift.UInt8]
    public func getPayment_secret() -> [Swift.UInt8]
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class Result_InMemorySignerDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_InMemorySignerDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_InMemorySignerDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.InMemorySigner?
  public class func ok(o: LDKFramework_Mac.InMemorySigner) -> LDKFramework_Mac.Result_InMemorySignerDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_InMemorySignerDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_InMemorySignerDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_HTLCOutputInCommitmentDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_HTLCOutputInCommitmentDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_HTLCOutputInCommitmentDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.HTLCOutputInCommitment?
  public class func ok(o: LDKFramework_Mac.HTLCOutputInCommitment) -> LDKFramework_Mac.Result_HTLCOutputInCommitmentDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_HTLCOutputInCommitmentDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_HTLCOutputInCommitmentDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_AnnouncementSignaturesDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_AnnouncementSignaturesDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_AnnouncementSignaturesDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.AnnouncementSignatures?
  public class func ok(o: LDKFramework_Mac.AnnouncementSignatures) -> LDKFramework_Mac.Result_AnnouncementSignaturesDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_AnnouncementSignaturesDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_AnnouncementSignaturesDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NoneAPIErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneAPIErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneAPIErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.APIError?
  public class func ok() -> LDKFramework_Mac.Result_NoneAPIErrorZ
  public class func err(e: LDKFramework_Mac.APIError) -> LDKFramework_Mac.Result_NoneAPIErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NoneAPIErrorZ
}
@_hasMissingDesignatedInitializers public class DataLossProtect : LDKFramework_Mac.NativeTypeWrapper {
  public init(your_last_per_commitment_secret_arg: [Swift.UInt8], my_current_per_commitment_point_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKDataLossProtect)
  public init(pointer: LDKFramework_Mac.LDKDataLossProtect, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_your_last_per_commitment_secret() -> [Swift.UInt8]
  public func set_your_last_per_commitment_secret(val: [Swift.UInt8])
  public func get_my_current_per_commitment_point() -> [Swift.UInt8]
  public func set_my_current_per_commitment_point(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.DataLossProtect
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_WarningMessageDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_WarningMessageDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_WarningMessageDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.WarningMessage?
  public class func ok(o: LDKFramework_Mac.WarningMessage) -> LDKFramework_Mac.Result_WarningMessageDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_WarningMessageDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_WarningMessageDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ClosingTransaction : LDKFramework_Mac.NativeTypeWrapper {
  public init(to_holder_value_sat: Swift.UInt64, to_counterparty_value_sat: Swift.UInt64, to_holder_script: [Swift.UInt8], to_counterparty_script: [Swift.UInt8], funding_outpoint: LDKFramework_Mac.OutPoint)
  public init(pointer: LDKFramework_Mac.LDKClosingTransaction)
  public init(pointer: LDKFramework_Mac.LDKClosingTransaction, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.ClosingTransaction
  public func hash() -> Swift.UInt64
  public func trust() -> LDKFramework_Mac.TrustedClosingTransaction
  public func verify(funding_outpoint: LDKFramework_Mac.OutPoint) -> LDKFramework_Mac.Result_TrustedClosingTransactionNoneZ
  public func to_holder_value_sat() -> Swift.UInt64
  public func to_counterparty_value_sat() -> Swift.UInt64
  public func to_holder_script() -> [Swift.UInt8]
  public func to_counterparty_script() -> [Swift.UInt8]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Pong : LDKFramework_Mac.NativeTypeWrapper {
  public init(byteslen_arg: Swift.UInt16)
  public init(pointer: LDKFramework_Mac.LDKPong)
  public init(pointer: LDKFramework_Mac.LDKPong, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_byteslen() -> Swift.UInt16
  public func set_byteslen(val: Swift.UInt16)
  public func clone() -> LDKFramework_Mac.Pong
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_PongDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PayeePubKey : LDKFramework_Mac.NativeTypeWrapper {
  public init(a_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKPayeePubKey)
  public init(pointer: LDKFramework_Mac.LDKPayeePubKey, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_a() -> [Swift.UInt8]
  public func set_a(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.PayeePubKey
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.PayeePubKey, b: LDKFramework_Mac.PayeePubKey) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_QueryShortChannelIdsDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_QueryShortChannelIdsDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_QueryShortChannelIdsDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.QueryShortChannelIds?
  public class func ok(o: LDKFramework_Mac.QueryShortChannelIds) -> LDKFramework_Mac.Result_QueryShortChannelIdsDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_QueryShortChannelIdsDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_QueryShortChannelIdsDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_PaymentSecretNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentSecretNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentSecretNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentSecretNoneZ
  public class func err() -> LDKFramework_Mac.Result_PaymentSecretNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PaymentSecretNoneZ
}
@_hasMissingDesignatedInitializers public class RawDataPart : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKRawDataPart)
  public init(pointer: LDKFramework_Mac.LDKRawDataPart, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_timestamp() -> LDKFramework_Mac.PositiveTimestamp
  public func set_timestamp(val: LDKFramework_Mac.PositiveTimestamp)
  public class func eq(a: LDKFramework_Mac.RawDataPart, b: LDKFramework_Mac.RawDataPart) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.RawDataPart
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelManagerReadArgs : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKChannelManagerReadArgs)
  public init(pointer: LDKFramework_Mac.LDKChannelManagerReadArgs, anchor: LDKFramework_Mac.NativeTypeWrapper)
  convenience public init(keys_manager: LDKFramework_Mac.KeysInterface, fee_estimator: LDKFramework_Mac.FeeEstimator, chain_monitor: LDKFramework_Mac.Watch, tx_broadcaster: LDKFramework_Mac.BroadcasterInterface, logger: LDKFramework_Mac.Logger, default_config: LDKFramework_Mac.UserConfig, channel_monitors: [LDKFramework_Mac.ChannelMonitor])
  public func get_keys_manager() -> LDKFramework_Mac.NativelyImplementedKeysInterface
  public func set_keys_manager(val: LDKFramework_Mac.KeysInterface)
  public func get_fee_estimator() -> LDKFramework_Mac.NativelyImplementedFeeEstimator
  public func set_fee_estimator(val: LDKFramework_Mac.FeeEstimator)
  public func get_chain_monitor() -> LDKFramework_Mac.NativelyImplementedWatch
  public func set_chain_monitor(val: LDKFramework_Mac.Watch)
  public func get_tx_broadcaster() -> LDKFramework_Mac.NativelyImplementedBroadcasterInterface
  public func set_tx_broadcaster(val: LDKFramework_Mac.BroadcasterInterface)
  public func get_logger() -> LDKFramework_Mac.NativelyImplementedLogger
  public func set_logger(val: LDKFramework_Mac.Logger)
  public func get_default_config() -> LDKFramework_Mac.UserConfig
  public func set_default_config(val: LDKFramework_Mac.UserConfig)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_RouteHintHopDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteHintHopDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RouteHintHopDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.RouteHintHop?
  public class func ok(o: LDKFramework_Mac.RouteHintHop) -> LDKFramework_Mac.Result_RouteHintHopDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_RouteHintHopDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RouteHintHopDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKIOError?
  public func getValue() -> [LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ]?
  public class func ok(o: [LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ]) -> LDKFramework_Mac.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func err(e: LDKFramework_Mac.LDKIOError) -> LDKFramework_Mac.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
}
@_hasMissingDesignatedInitializers public class Result_SecretKeyNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_SecretKeyNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_SecretKeyNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_SecretKeyNoneZ
  public class func err() -> LDKFramework_Mac.Result_SecretKeyNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_SecretKeyNoneZ
}
@_hasMissingDesignatedInitializers public class Option_NetAddressZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.NetAddress?)
  public init(pointer: LDKFramework_Mac.LDKCOption_NetAddressZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_NetAddressZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.NetAddress?
  public class func some(o: LDKFramework_Mac.NetAddress) -> LDKFramework_Mac.Option_NetAddressZ
  public class func none() -> LDKFramework_Mac.Option_NetAddressZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_NetAddressZ
}
@_hasMissingDesignatedInitializers open class KeysInterface : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKKeysInterface)
  public init(pointer: LDKFramework_Mac.LDKKeysInterface, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func get_node_secret(recipient: LDKFramework_Mac.LDKRecipient) -> LDKFramework_Mac.Result_SecretKeyNoneZ
  open func get_destination_script() -> [Swift.UInt8]
  open func get_shutdown_scriptpubkey() -> LDKFramework_Mac.ShutdownScript
  open func get_channel_signer(inbound: Swift.Bool, channel_value_satoshis: Swift.UInt64) -> LDKFramework_Mac.Sign
  open func get_secure_random_bytes() -> [Swift.UInt8]
  open func read_chan_signer(reader: [Swift.UInt8]) -> LDKFramework_Mac.Result_SignDecodeErrorZ
  open func sign_invoice(hrp_bytes: [Swift.UInt8], invoice_data: [Swift.UInt8], receipient: LDKFramework_Mac.LDKRecipient) -> LDKFramework_Mac.Result_RecoverableSignatureNoneZ
  open func get_inbound_payment_key_material() -> [Swift.UInt8]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedKeysInterface : LDKFramework_Mac.KeysInterface {
  override public func get_node_secret(recipient: LDKFramework_Mac.LDKRecipient) -> LDKFramework_Mac.Result_SecretKeyNoneZ
  override public func get_destination_script() -> [Swift.UInt8]
  override public func get_shutdown_scriptpubkey() -> LDKFramework_Mac.ShutdownScript
  override public func get_channel_signer(inbound: Swift.Bool, channel_value_satoshis: Swift.UInt64) -> LDKFramework_Mac.Sign
  override public func get_secure_random_bytes() -> [Swift.UInt8]
  override public func read_chan_signer(reader: [Swift.UInt8]) -> LDKFramework_Mac.Result_SignDecodeErrorZ
  override public func sign_invoice(hrp_bytes: [Swift.UInt8], invoice_data: [Swift.UInt8], receipient: LDKFramework_Mac.LDKRecipient) -> LDKFramework_Mac.Result_RecoverableSignatureNoneZ
  override public func get_inbound_payment_key_material() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKKeysInterface)
  override public init(pointer: LDKFramework_Mac.LDKKeysInterface, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelUpdateInfo : LDKFramework_Mac.NativeTypeWrapper {
  public init(last_update_arg: Swift.UInt32, enabled_arg: Swift.Bool, cltv_expiry_delta_arg: Swift.UInt16, htlc_minimum_msat_arg: Swift.UInt64, htlc_maximum_msat_arg: LDKFramework_Mac.Option_u64Z, fees_arg: LDKFramework_Mac.RoutingFees, last_update_message_arg: LDKFramework_Mac.ChannelUpdate)
  public init(pointer: LDKFramework_Mac.LDKChannelUpdateInfo)
  public init(pointer: LDKFramework_Mac.LDKChannelUpdateInfo, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_last_update() -> Swift.UInt32
  public func set_last_update(val: Swift.UInt32)
  public func get_enabled() -> Swift.Bool
  public func set_enabled(val: Swift.Bool)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_htlc_maximum_msat() -> LDKFramework_Mac.Option_u64Z
  public func set_htlc_maximum_msat(val: LDKFramework_Mac.Option_u64Z)
  public func get_fees() -> LDKFramework_Mac.RoutingFees
  public func set_fees(val: LDKFramework_Mac.RoutingFees)
  public func get_last_update_message() -> LDKFramework_Mac.ChannelUpdate
  public func set_last_update_message(val: LDKFramework_Mac.ChannelUpdate)
  public func clone() -> LDKFramework_Mac.ChannelUpdateInfo
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelUpdateInfoDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_NoneErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKIOError?
  public class func ok() -> LDKFramework_Mac.Result_NoneErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func err(e: LDKFramework_Mac.LDKIOError) -> LDKFramework_Mac.Result_NoneErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NoneErrorZ
}
@_hasMissingDesignatedInitializers public class Result_ChannelPublicKeysDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelPublicKeysDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelPublicKeysDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelPublicKeys?
  public class func ok(o: LDKFramework_Mac.ChannelPublicKeys) -> LDKFramework_Mac.Result_ChannelPublicKeysDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelPublicKeysDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelPublicKeysDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_ShutdownScriptInvalidShutdownScriptZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ShutdownScriptInvalidShutdownScriptZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ShutdownScriptInvalidShutdownScriptZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.InvalidShutdownScript?
  public func getValue() -> LDKFramework_Mac.ShutdownScript?
  public class func ok(o: LDKFramework_Mac.ShutdownScript) -> LDKFramework_Mac.Result_ShutdownScriptInvalidShutdownScriptZ
  public class func err(e: LDKFramework_Mac.InvalidShutdownScript) -> LDKFramework_Mac.Result_ShutdownScriptInvalidShutdownScriptZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ShutdownScriptInvalidShutdownScriptZ
}
@_hasMissingDesignatedInitializers public class Result_TxCreationKeysErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_TxCreationKeysErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_TxCreationKeysErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKSecp256k1Error?
  public func getValue() -> LDKFramework_Mac.TxCreationKeys?
  public class func ok(o: LDKFramework_Mac.TxCreationKeys) -> LDKFramework_Mac.Result_TxCreationKeysErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func err(e: LDKFramework_Mac.LDKSecp256k1Error) -> LDKFramework_Mac.Result_TxCreationKeysErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_TxCreationKeysErrorZ
}
@_hasMissingDesignatedInitializers public class Result_NodeIdDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeIdDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeIdDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.NodeId?
  public class func ok(o: LDKFramework_Mac.NodeId) -> LDKFramework_Mac.Result_NodeIdDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_NodeIdDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NodeIdDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_UpdateFulfillHTLCDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFulfillHTLCDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFulfillHTLCDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UpdateFulfillHTLC?
  public class func ok(o: LDKFramework_Mac.UpdateFulfillHTLC) -> LDKFramework_Mac.Result_UpdateFulfillHTLCDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UpdateFulfillHTLCDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UpdateFulfillHTLCDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ClosingSigned : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], fee_satoshis_arg: Swift.UInt64, signature_arg: [Swift.UInt8], fee_range_arg: LDKFramework_Mac.ClosingSignedFeeRange)
  public init(pointer: LDKFramework_Mac.LDKClosingSigned)
  public init(pointer: LDKFramework_Mac.LDKClosingSigned, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_fee_satoshis() -> Swift.UInt64
  public func set_fee_satoshis(val: Swift.UInt64)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func get_fee_range() -> LDKFramework_Mac.ClosingSignedFeeRange
  public func set_fee_range(val: LDKFramework_Mac.ClosingSignedFeeRange)
  public func clone() -> LDKFramework_Mac.ClosingSigned
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ClosingSignedDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WarningMessage : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], data_arg: Swift.String)
  public init(pointer: LDKFramework_Mac.LDKWarningMessage)
  public init(pointer: LDKFramework_Mac.LDKWarningMessage, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_data() -> Swift.String
  public func set_data(val: Swift.String)
  public func clone() -> LDKFramework_Mac.WarningMessage
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_WarningMessageDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FundingSigned : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], signature_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKFundingSigned)
  public init(pointer: LDKFramework_Mac.LDKFundingSigned, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.FundingSigned
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_FundingSignedDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_NodeAnnouncementDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeAnnouncementDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NodeAnnouncementDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.NodeAnnouncement?
  public class func ok(o: LDKFramework_Mac.NodeAnnouncement) -> LDKFramework_Mac.Result_NodeAnnouncementDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_NodeAnnouncementDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NodeAnnouncementDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class CommitmentUpdate : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKCommitmentUpdate)
  public init(pointer: LDKFramework_Mac.LDKCommitmentUpdate, anchor: LDKFramework_Mac.NativeTypeWrapper)
  convenience public init(update_add_htlcs_arg: [LDKFramework_Mac.UpdateAddHTLC], update_fulfill_htlcs_arg: [LDKFramework_Mac.UpdateFulfillHTLC], update_fail_htlcs_arg: [LDKFramework_Mac.UpdateFailHTLC], update_fail_malformed_htlcs_arg: [LDKFramework_Mac.UpdateFailMalformedHTLC], update_fee_arg: LDKFramework_Mac.UpdateFee, commitment_signed_arg: LDKFramework_Mac.CommitmentSigned)
  public func get_update_add_htlcs() -> [LDKFramework_Mac.UpdateAddHTLC]
  public func set_update_add_htlcs(val: [LDKFramework_Mac.UpdateAddHTLC])
  public func get_update_fulfill_htlcs() -> [LDKFramework_Mac.UpdateFulfillHTLC]
  public func set_update_fulfill_htlcs(val: [LDKFramework_Mac.UpdateFulfillHTLC])
  public func get_update_fail_htlcs() -> [LDKFramework_Mac.UpdateFailHTLC]
  public func set_update_fail_htlcs(val: [LDKFramework_Mac.UpdateFailHTLC])
  public func get_update_fail_malformed_htlcs() -> [LDKFramework_Mac.UpdateFailMalformedHTLC]
  public func set_update_fail_malformed_htlcs(val: [LDKFramework_Mac.UpdateFailMalformedHTLC])
  public func get_update_fee() -> LDKFramework_Mac.UpdateFee
  public func set_update_fee(val: LDKFramework_Mac.UpdateFee)
  public func get_commitment_signed() -> LDKFramework_Mac.CommitmentSigned
  public func set_commitment_signed(val: LDKFramework_Mac.CommitmentSigned)
  public func clone() -> LDKFramework_Mac.CommitmentUpdate
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Logger : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKLogger)
  public init(pointer: LDKFramework_Mac.LDKLogger, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func log(record: LDKFramework_Mac.Record)
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedLogger : LDKFramework_Mac.Logger {
  override public func log(record: LDKFramework_Mac.Record)
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKLogger)
  override public init(pointer: LDKFramework_Mac.LDKLogger, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_TxCreationKeysDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_TxCreationKeysDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_TxCreationKeysDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.TxCreationKeys?
  public class func ok(o: LDKFramework_Mac.TxCreationKeys) -> LDKFramework_Mac.Result_TxCreationKeysDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_TxCreationKeysDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_TxCreationKeysDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class InitFeatures : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKInitFeatures)
  public init(pointer: LDKFramework_Mac.LDKInitFeatures, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.InitFeatures, b: LDKFramework_Mac.InitFeatures) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.InitFeatures
  public func requires_unknown_bits() -> Swift.Bool
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_InitFeaturesDecodeErrorZ
  public func set_data_loss_protect_optional()
  public func set_data_loss_protect_required()
  public func supports_data_loss_protect() -> Swift.Bool
  public func requires_data_loss_protect() -> Swift.Bool
  public func set_initial_routing_sync_optional()
  public func set_initial_routing_sync_required()
  public func initial_routing_sync() -> Swift.Bool
  public func set_upfront_shutdown_script_optional()
  public func set_upfront_shutdown_script_required()
  public func supports_upfront_shutdown_script() -> Swift.Bool
  public func requires_upfront_shutdown_script() -> Swift.Bool
  public func set_gossip_queries_optional()
  public func set_gossip_queries_required()
  public func supports_gossip_queries() -> Swift.Bool
  public func requires_gossip_queries() -> Swift.Bool
  public func set_variable_length_onion_optional()
  public func set_variable_length_onion_required()
  public func supports_variable_length_onion() -> Swift.Bool
  public func requires_variable_length_onion() -> Swift.Bool
  public func set_static_remote_key_optional()
  public func set_static_remote_key_required()
  public func supports_static_remote_key() -> Swift.Bool
  public func requires_static_remote_key() -> Swift.Bool
  public func set_payment_secret_optional()
  public func set_payment_secret_required()
  public func supports_payment_secret() -> Swift.Bool
  public func requires_payment_secret() -> Swift.Bool
  public func set_basic_mpp_optional()
  public func set_basic_mpp_required()
  public func supports_basic_mpp() -> Swift.Bool
  public func requires_basic_mpp() -> Swift.Bool
  public func set_shutdown_any_segwit_optional()
  public func set_shutdown_any_segwit_required()
  public func supports_shutdown_anysegwit() -> Swift.Bool
  public func requires_shutdown_anysegwit() -> Swift.Bool
  public func set_channel_type_optional()
  public func set_channel_type_required()
  public func supports_channel_type() -> Swift.Bool
  public func requires_channel_type() -> Swift.Bool
  public func set_scid_privacy_optional()
  public func set_scid_privacy_required()
  public func supports_scid_privacy() -> Swift.Bool
  public func requires_scid_privacy() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_TxOutAccessErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_TxOutAccessErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_TxOutAccessErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKAccessError?
  public func getValue() -> LDKFramework_Mac.TxOut?
  public class func ok(o: LDKFramework_Mac.LDKTxOut) -> LDKFramework_Mac.Result_TxOutAccessErrorZ
  public class func err(e: LDKFramework_Mac.LDKAccessError) -> LDKFramework_Mac.Result_TxOutAccessErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_TxOutAccessErrorZ
}
@_hasMissingDesignatedInitializers public class CounterpartyChannelTransactionParameters : LDKFramework_Mac.NativeTypeWrapper {
  public init(pubkeys_arg: LDKFramework_Mac.ChannelPublicKeys, selected_contest_delay_arg: Swift.UInt16)
  public init(pointer: LDKFramework_Mac.LDKCounterpartyChannelTransactionParameters)
  public init(pointer: LDKFramework_Mac.LDKCounterpartyChannelTransactionParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_pubkeys() -> LDKFramework_Mac.ChannelPublicKeys
  public func set_pubkeys(val: LDKFramework_Mac.ChannelPublicKeys)
  public func get_selected_contest_delay() -> Swift.UInt16
  public func set_selected_contest_delay(val: Swift.UInt16)
  public func clone() -> LDKFramework_Mac.CounterpartyChannelTransactionParameters
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_CounterpartyChannelTransactionParametersDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_OpenChannelDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_OpenChannelDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_OpenChannelDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.OpenChannel?
  public class func ok(o: LDKFramework_Mac.OpenChannel) -> LDKFramework_Mac.Result_OpenChannelDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_OpenChannelDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_OpenChannelDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class OpenChannel : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKOpenChannel)
  public init(pointer: LDKFramework_Mac.LDKOpenChannel, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_chain_hash() -> [Swift.UInt8]
  public func set_chain_hash(val: [Swift.UInt8])
  public func get_temporary_channel_id() -> [Swift.UInt8]
  public func set_temporary_channel_id(val: [Swift.UInt8])
  public func get_funding_satoshis() -> Swift.UInt64
  public func set_funding_satoshis(val: Swift.UInt64)
  public func get_push_msat() -> Swift.UInt64
  public func set_push_msat(val: Swift.UInt64)
  public func get_dust_limit_satoshis() -> Swift.UInt64
  public func set_dust_limit_satoshis(val: Swift.UInt64)
  public func get_max_htlc_value_in_flight_msat() -> Swift.UInt64
  public func set_max_htlc_value_in_flight_msat(val: Swift.UInt64)
  public func get_channel_reserve_satoshis() -> Swift.UInt64
  public func set_channel_reserve_satoshis(val: Swift.UInt64)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_feerate_per_kw() -> Swift.UInt32
  public func set_feerate_per_kw(val: Swift.UInt32)
  public func get_to_self_delay() -> Swift.UInt16
  public func set_to_self_delay(val: Swift.UInt16)
  public func get_max_accepted_htlcs() -> Swift.UInt16
  public func set_max_accepted_htlcs(val: Swift.UInt16)
  public func get_funding_pubkey() -> [Swift.UInt8]
  public func set_funding_pubkey(val: [Swift.UInt8])
  public func get_revocation_basepoint() -> [Swift.UInt8]
  public func set_revocation_basepoint(val: [Swift.UInt8])
  public func get_payment_point() -> [Swift.UInt8]
  public func set_payment_point(val: [Swift.UInt8])
  public func get_delayed_payment_basepoint() -> [Swift.UInt8]
  public func set_delayed_payment_basepoint(val: [Swift.UInt8])
  public func get_htlc_basepoint() -> [Swift.UInt8]
  public func set_htlc_basepoint(val: [Swift.UInt8])
  public func get_first_per_commitment_point() -> [Swift.UInt8]
  public func set_first_per_commitment_point(val: [Swift.UInt8])
  public func get_channel_flags() -> Swift.UInt8
  public func set_channel_flags(val: Swift.UInt8)
  public func get_channel_type() -> LDKFramework_Mac.ChannelTypeFeatures
  public func set_channel_type(val: LDKFramework_Mac.ChannelTypeFeatures)
  public func clone() -> LDKFramework_Mac.OpenChannel
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_OpenChannelDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Option_u32Z : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: Swift.UInt32?)
  public init(pointer: LDKFramework_Mac.LDKCOption_u32Z)
  public init(pointer: LDKFramework_Mac.LDKCOption_u32Z, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> Swift.UInt32?
  public class func some(o: Swift.UInt32) -> LDKFramework_Mac.Option_u32Z
  public class func none() -> LDKFramework_Mac.Option_u32Z
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_u32Z
}
@_hasMissingDesignatedInitializers public class FilesystemPersister : LDKFramework_Mac.NativeTypeWrapper {
  public init(path_to_channel_data: Swift.String)
  public init(pointer: LDKFramework_Mac.LDKFilesystemPersister)
  public init(pointer: LDKFramework_Mac.LDKFilesystemPersister, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_data_dir() -> Swift.String
  public class func persist_manager(data_dir: Swift.String, manager: LDKFramework_Mac.ChannelManager) -> LDKFramework_Mac.Result_NoneErrorZ
  public class func persist_network_graph(data_dir: Swift.String, network_graph: LDKFramework_Mac.NetworkGraph) -> LDKFramework_Mac.Result_NoneErrorZ
  public func read_channelmonitors(keys_manager: LDKFramework_Mac.KeysInterface) -> LDKFramework_Mac.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ
  public func as_Persist() -> LDKFramework_Mac.NativelyImplementedPersist
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InvoiceSignature : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKInvoiceSignature)
  public init(pointer: LDKFramework_Mac.LDKInvoiceSignature, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.InvoiceSignature
  public class func eq(a: LDKFramework_Mac.InvoiceSignature, b: LDKFramework_Mac.InvoiceSignature) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChainParameters : LDKFramework_Mac.NativeTypeWrapper {
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(network_arg: LDKFramework_Mac.LDKNetwork, best_block_arg: LDKFramework_Mac.BestBlock)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKChainParameters)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKChainParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_network() -> LDKFramework_Mac.LDKNetwork
  public func set_network(val: LDKFramework_Mac.LDKNetwork)
  public func get_best_block() -> LDKFramework_Mac.BestBlock
  public func set_best_block(val: LDKFramework_Mac.BestBlock)
  public func clone() -> LDKFramework_Mac.ChainParameters
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoutingFees : LDKFramework_Mac.NativeTypeWrapper {
  public init(base_msat_arg: Swift.UInt32, proportional_millionths_arg: Swift.UInt32)
  public init(pointer: LDKFramework_Mac.LDKRoutingFees)
  public init(pointer: LDKFramework_Mac.LDKRoutingFees, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_base_msat() -> Swift.UInt32
  public func set_base_msat(val: Swift.UInt32)
  public func get_proportional_millionths() -> Swift.UInt32
  public func set_proportional_millionths(val: Swift.UInt32)
  public class func eq(a: LDKFramework_Mac.RoutingFees, b: LDKFramework_Mac.RoutingFees) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.RoutingFees
  public func hash() -> Swift.UInt64
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_RoutingFeesDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelConfig : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKChannelConfig)
  public init(pointer: LDKFramework_Mac.LDKChannelConfig, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_forwarding_fee_proportional_millionths() -> Swift.UInt32
  public func set_forwarding_fee_proportional_millionths(val: Swift.UInt32)
  public func get_forwarding_fee_base_msat() -> Swift.UInt32
  public func set_forwarding_fee_base_msat(val: Swift.UInt32)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func get_announced_channel() -> Swift.Bool
  public func set_announced_channel(val: Swift.Bool)
  public func get_commit_upfront_shutdown_pubkey() -> Swift.Bool
  public func set_commit_upfront_shutdown_pubkey(val: Swift.Bool)
  public func get_max_dust_htlc_exposure_msat() -> Swift.UInt64
  public func set_max_dust_htlc_exposure_msat(val: Swift.UInt64)
  public func get_force_close_avoidance_max_fee_satoshis() -> Swift.UInt64
  public func set_force_close_avoidance_max_fee_satoshis(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.ChannelConfig
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelConfigDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CounterpartyForwardingInfo : LDKFramework_Mac.NativeTypeWrapper {
  public init(fee_base_msat_arg: Swift.UInt32, fee_proportional_millionths_arg: Swift.UInt32, cltv_expiry_delta_arg: Swift.UInt16)
  public init(pointer: LDKFramework_Mac.LDKCounterpartyForwardingInfo)
  public init(pointer: LDKFramework_Mac.LDKCounterpartyForwardingInfo, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_fee_base_msat() -> Swift.UInt32
  public func set_fee_base_msat(val: Swift.UInt32)
  public func get_fee_proportional_millionths() -> Swift.UInt32
  public func set_fee_proportional_millionths(val: Swift.UInt32)
  public func get_cltv_expiry_delta() -> Swift.UInt16
  public func set_cltv_expiry_delta(val: Swift.UInt16)
  public func clone() -> LDKFramework_Mac.CounterpartyForwardingInfo
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_CounterpartyForwardingInfoDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RawInvoice : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKRawInvoice)
  public init(pointer: LDKFramework_Mac.LDKRawInvoice, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_data() -> LDKFramework_Mac.RawDataPart
  public func set_data(val: LDKFramework_Mac.RawDataPart)
  public class func eq(a: LDKFramework_Mac.RawInvoice, b: LDKFramework_Mac.RawInvoice) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.RawInvoice
  public func hash() -> [Swift.UInt8]
  public func payment_hash() -> LDKFramework_Mac.Sha256
  public func description() -> LDKFramework_Mac.Description
  public func payee_pub_key() -> LDKFramework_Mac.PayeePubKey
  public func description_hash() -> LDKFramework_Mac.Sha256
  public func expiry_time() -> LDKFramework_Mac.ExpiryTime
  public func min_final_cltv_expiry() -> LDKFramework_Mac.MinFinalCltvExpiry
  public func payment_secret() -> [Swift.UInt8]
  public func features() -> LDKFramework_Mac.InvoiceFeatures
  public func private_routes() -> [LDKFramework_Mac.PrivateRoute]
  public func amount_pico_btc() -> LDKFramework_Mac.Option_u64Z
  public func currency() -> LDKFramework_Mac.LDKCurrency
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Persist : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKPersist)
  public init(pointer: LDKFramework_Mac.LDKPersist, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func persist_new_channel(channel_id: LDKFramework_Mac.OutPoint, data: LDKFramework_Mac.ChannelMonitor, update_id: LDKFramework_Mac.MonitorUpdateId) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  open func update_persisted_channel(channel_id: LDKFramework_Mac.OutPoint, update: LDKFramework_Mac.ChannelMonitorUpdate, data: LDKFramework_Mac.ChannelMonitor, update_id: LDKFramework_Mac.MonitorUpdateId) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedPersist : LDKFramework_Mac.Persist {
  override public func persist_new_channel(channel_id: LDKFramework_Mac.OutPoint, data: LDKFramework_Mac.ChannelMonitor, update_id: LDKFramework_Mac.MonitorUpdateId) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  override public func update_persisted_channel(channel_id: LDKFramework_Mac.OutPoint, update: LDKFramework_Mac.ChannelMonitorUpdate, data: LDKFramework_Mac.ChannelMonitor, update_id: LDKFramework_Mac.MonitorUpdateId) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKPersist)
  override public init(pointer: LDKFramework_Mac.LDKPersist, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_PayeePubKeyErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PayeePubKeyErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PayeePubKeyErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKSecp256k1Error?
  public func getValue() -> LDKFramework_Mac.PayeePubKey?
  public class func ok(o: LDKFramework_Mac.PayeePubKey) -> LDKFramework_Mac.Result_PayeePubKeyErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func err(e: LDKFramework_Mac.LDKSecp256k1Error) -> LDKFramework_Mac.Result_PayeePubKeyErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PayeePubKeyErrorZ
}
@_hasMissingDesignatedInitializers public class Result_ChannelDetailsDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelDetailsDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelDetailsDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelDetails?
  public class func ok(o: LDKFramework_Mac.ChannelDetails) -> LDKFramework_Mac.Result_ChannelDetailsDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelDetailsDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelDetailsDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ChannelPublicKeys : LDKFramework_Mac.NativeTypeWrapper {
  public init(funding_pubkey_arg: [Swift.UInt8], revocation_basepoint_arg: [Swift.UInt8], payment_point_arg: [Swift.UInt8], delayed_payment_basepoint_arg: [Swift.UInt8], htlc_basepoint_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKChannelPublicKeys)
  public init(pointer: LDKFramework_Mac.LDKChannelPublicKeys, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_funding_pubkey() -> [Swift.UInt8]
  public func set_funding_pubkey(val: [Swift.UInt8])
  public func get_revocation_basepoint() -> [Swift.UInt8]
  public func set_revocation_basepoint(val: [Swift.UInt8])
  public func get_payment_point() -> [Swift.UInt8]
  public func set_payment_point(val: [Swift.UInt8])
  public func get_delayed_payment_basepoint() -> [Swift.UInt8]
  public func set_delayed_payment_basepoint(val: [Swift.UInt8])
  public func get_htlc_basepoint() -> [Swift.UInt8]
  public func set_htlc_basepoint(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.ChannelPublicKeys
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelPublicKeysDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_GossipTimestampFilterDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_GossipTimestampFilterDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_GossipTimestampFilterDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.GossipTimestampFilter?
  public class func ok(o: LDKFramework_Mac.GossipTimestampFilter) -> LDKFramework_Mac.Result_GossipTimestampFilterDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_GossipTimestampFilterDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_GossipTimestampFilterDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class UpdateFulfillHTLC : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], htlc_id_arg: Swift.UInt64, payment_preimage_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKUpdateFulfillHTLC)
  public init(pointer: LDKFramework_Mac.LDKUpdateFulfillHTLC, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_htlc_id() -> Swift.UInt64
  public func set_htlc_id(val: Swift.UInt64)
  public func get_payment_preimage() -> [Swift.UInt8]
  public func set_payment_preimage(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.UpdateFulfillHTLC
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_UpdateFulfillHTLCDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecodeError : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKDecodeError)
  public init(pointer: LDKFramework_Mac.LDKDecodeError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.DecodeError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InvalidShutdownScript : LDKFramework_Mac.NativeTypeWrapper {
  public init(script_arg: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKInvalidShutdownScript)
  public init(pointer: LDKFramework_Mac.LDKInvalidShutdownScript, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_script() -> [Swift.UInt8]
  public func set_script(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.InvalidShutdownScript
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_boolLightningErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_boolLightningErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_boolLightningErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LightningError?
  public func getValue() -> Swift.Bool?
  public class func ok(o: Swift.Bool) -> LDKFramework_Mac.Result_boolLightningErrorZ
  public class func err(e: LDKFramework_Mac.LightningError) -> LDKFramework_Mac.Result_boolLightningErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_boolLightningErrorZ
}
@_hasMissingDesignatedInitializers open class CustomMessageHandler : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCustomMessageHandler)
  public init(pointer: LDKFramework_Mac.LDKCustomMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func handle_custom_message(msg: LDKFramework_Mac.BindingsType, sender_node_id: [Swift.UInt8]) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  open func get_and_clear_pending_msg() -> [LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedCustomMessageHandler : LDKFramework_Mac.CustomMessageHandler {
  override public func handle_custom_message(msg: LDKFramework_Mac.BindingsType, sender_node_id: [Swift.UInt8]) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  override public func get_and_clear_pending_msg() -> [LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKCustomMessageHandler)
  override public init(pointer: LDKFramework_Mac.LDKCustomMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_PaymentSecretAPIErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentSecretAPIErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PaymentSecretAPIErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.APIError?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentSecretAPIErrorZ
  public class func err(e: LDKFramework_Mac.APIError) -> LDKFramework_Mac.Result_PaymentSecretAPIErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PaymentSecretAPIErrorZ
}
@_hasMissingDesignatedInitializers public class Result_UpdateAddHTLCDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateAddHTLCDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateAddHTLCDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UpdateAddHTLC?
  public class func ok(o: LDKFramework_Mac.UpdateAddHTLC) -> LDKFramework_Mac.Result_UpdateAddHTLCDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UpdateAddHTLCDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UpdateAddHTLCDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ScoringParameters : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKScoringParameters)
  public init(pointer: LDKFramework_Mac.LDKScoringParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_base_penalty_msat() -> Swift.UInt64
  public func set_base_penalty_msat(val: Swift.UInt64)
  public func get_failure_penalty_msat() -> Swift.UInt64
  public func set_failure_penalty_msat(val: Swift.UInt64)
  public func get_overuse_penalty_start_1024th() -> Swift.UInt16
  public func set_overuse_penalty_start_1024th(val: Swift.UInt16)
  public func get_overuse_penalty_msat_per_1024th() -> Swift.UInt64
  public func set_overuse_penalty_msat_per_1024th(val: Swift.UInt64)
  public func get_failure_penalty_half_life() -> Swift.UInt64
  public func set_failure_penalty_half_life(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.ScoringParameters
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ScoringParametersDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ShutdownScriptDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ShutdownScriptDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ShutdownScriptDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ShutdownScript?
  public class func ok(o: LDKFramework_Mac.ShutdownScript) -> LDKFramework_Mac.Result_ShutdownScriptDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ShutdownScriptDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ShutdownScriptDecodeErrorZ
}
@_hasMissingDesignatedInitializers open class Confirm : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKConfirm)
  public init(pointer: LDKFramework_Mac.LDKConfirm, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func transactions_confirmed(header: [Swift.UInt8]?, txdata: [LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32)
  open func transaction_unconfirmed(txid: [Swift.UInt8]?)
  open func best_block_updated(header: [Swift.UInt8]?, height: Swift.UInt32)
  open func get_relevant_txids() -> [LDKFramework_Mac.LDKTxid]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedConfirm : LDKFramework_Mac.Confirm {
  public func transactions_confirmed(header: [Swift.UInt8]?, txdata: [LDKFramework_Mac.C2Tuple_usizeTransactionZ], height: Swift.UInt32)
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func transactions_confirmed(header: [Swift.UInt8]?, txdata: [LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ], height: Swift.UInt32)
  override public func transaction_unconfirmed(txid: [Swift.UInt8]?)
  override public func best_block_updated(header: [Swift.UInt8]?, height: Swift.UInt32)
  override public func get_relevant_txids() -> [LDKFramework_Mac.LDKTxid]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKConfirm)
  override public init(pointer: LDKFramework_Mac.LDKConfirm, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ParseError : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKParseError)
  public init(pointer: LDKFramework_Mac.LDKParseError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum ParseErrorValueType {
    case Bech32Error, ParseAmountError, MalformedSignature, DescriptionDecodeError, InvalidSliceLength
    public static func == (a: LDKFramework_Mac.ParseError.ParseErrorValueType, b: LDKFramework_Mac.ParseError.ParseErrorValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.ParseError.ParseErrorValueType?
  public func getValueAsBech32Error() -> LDKFramework_Mac.Bech32Error?
  public func getValueAsParseAmountError() -> ()?
  public func getValueAsMalformedSignature() -> LDKFramework_Mac.LDKSecp256k1Error?
  public func getValueAsDescriptionDecodeError() -> ()?
  public func getValueAsInvalidSliceLength() -> Swift.String?
  @objc deinit
  public func clone() -> LDKFramework_Mac.ParseError
  public class func bech32_error(a: LDKFramework_Mac.Bech32Error) -> LDKFramework_Mac.ParseError
  public class func malformed_signature(a: LDKFramework_Mac.LDKSecp256k1Error) -> LDKFramework_Mac.ParseError
  public class func bad_prefix() -> LDKFramework_Mac.ParseError
  public class func unknown_currency() -> LDKFramework_Mac.ParseError
  public class func unknown_si_prefix() -> LDKFramework_Mac.ParseError
  public class func malformed_hrp() -> LDKFramework_Mac.ParseError
  public class func too_short_data_part() -> LDKFramework_Mac.ParseError
  public class func unexpected_end_of_tagged_fields() -> LDKFramework_Mac.ParseError
  public class func padding_error() -> LDKFramework_Mac.ParseError
  public class func integer_overflow_error() -> LDKFramework_Mac.ParseError
  public class func invalid_seg_wit_program_length() -> LDKFramework_Mac.ParseError
  public class func invalid_pub_key_hash_length() -> LDKFramework_Mac.ParseError
  public class func invalid_script_hash_length() -> LDKFramework_Mac.ParseError
  public class func invalid_recovery_id() -> LDKFramework_Mac.ParseError
  public class func invalid_slice_length(a: Swift.String) -> LDKFramework_Mac.ParseError
  public class func skip() -> LDKFramework_Mac.ParseError
  public func to_str() -> Swift.String
}
@_hasMissingDesignatedInitializers public class PhantomKeysManager : LDKFramework_Mac.NativeTypeWrapper {
  public init(seed: [Swift.UInt8], starting_time_secs: Swift.UInt64, starting_time_nanos: Swift.UInt32, cross_node_seed: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKPhantomKeysManager)
  public init(pointer: LDKFramework_Mac.LDKPhantomKeysManager, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func as_KeysInterface() -> LDKFramework_Mac.NativelyImplementedKeysInterface
  public func spend_spendable_outputs(descriptors: [LDKFramework_Mac.SpendableOutputDescriptor], outputs: [LDKFramework_Mac.TxOut], change_destination_script: [Swift.UInt8], feerate_sat_per_1000_weight: Swift.UInt32) -> LDKFramework_Mac.Result_TransactionNoneZ
  public func derive_channel_keys(channel_value_satoshis: Swift.UInt64, params: [Swift.UInt8]) -> LDKFramework_Mac.InMemorySigner
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ChannelHandshakeConfig : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKChannelHandshakeConfig)
  public init(pointer: LDKFramework_Mac.LDKChannelHandshakeConfig, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_minimum_depth() -> Swift.UInt32
  public func set_minimum_depth(val: Swift.UInt32)
  public func get_our_to_self_delay() -> Swift.UInt16
  public func set_our_to_self_delay(val: Swift.UInt16)
  public func get_our_htlc_minimum_msat() -> Swift.UInt64
  public func set_our_htlc_minimum_msat(val: Swift.UInt64)
  public func get_negotiate_scid_privacy() -> Swift.Bool
  public func set_negotiate_scid_privacy(val: Swift.Bool)
  public func clone() -> LDKFramework_Mac.ChannelHandshakeConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class C2Tuple_SignatureCVec_SignatureZZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_SignatureCVec_SignatureZZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_SignatureCVec_SignatureZZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_SignatureCVec_SignatureZZ
  public class func new(a: [Swift.UInt8], b: [[Swift.UInt8]]) -> LDKFramework_Mac.C2Tuple_SignatureCVec_SignatureZZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Bech32Error : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKBech32Error)
  public init(pointer: LDKFramework_Mac.LDKBech32Error, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum Bech32ErrorValueType {
    case InvalidChar, InvalidData
    public static func == (a: LDKFramework_Mac.Bech32Error.Bech32ErrorValueType, b: LDKFramework_Mac.Bech32Error.Bech32ErrorValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.Bech32Error.Bech32ErrorValueType?
  public func getValueAsInvalidChar() -> Swift.UInt32?
  public func getValueAsInvalidData() -> Swift.UInt8?
  public func clone() -> LDKFramework_Mac.Bech32Error
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IgnoringMessageHandler : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKIgnoringMessageHandler)
  public init(pointer: LDKFramework_Mac.LDKIgnoringMessageHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func as_MessageSendEventsProvider() -> LDKFramework_Mac.NativelyImplementedMessageSendEventsProvider
  public func as_RoutingMessageHandler() -> LDKFramework_Mac.NativelyImplementedRoutingMessageHandler
  public func as_CustomMessageReader() -> LDKFramework_Mac.NativelyImplementedCustomMessageReader
  public func as_CustomMessageHandler() -> LDKFramework_Mac.NativelyImplementedCustomMessageHandler
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProbabilisticScoringParameters : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKProbabilisticScoringParameters)
  public init(pointer: LDKFramework_Mac.LDKProbabilisticScoringParameters, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_base_penalty_msat() -> Swift.UInt64
  public func set_base_penalty_msat(val: Swift.UInt64)
  public func get_liquidity_penalty_multiplier_msat() -> Swift.UInt64
  public func set_liquidity_penalty_multiplier_msat(val: Swift.UInt64)
  public func get_liquidity_offset_half_life() -> Swift.UInt64
  public func set_liquidity_offset_half_life(val: Swift.UInt64)
  public func get_amount_penalty_multiplier_msat() -> Swift.UInt64
  public func set_amount_penalty_multiplier_msat(val: Swift.UInt64)
  public func clone() -> LDKFramework_Mac.ProbabilisticScoringParameters
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Fallback : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKFallback)
  public init(pointer: LDKFramework_Mac.LDKFallback, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum FallbackValueType {
    case SegWitProgram, PubKeyHash, ScriptHash
    public static func == (a: LDKFramework_Mac.Fallback.FallbackValueType, b: LDKFramework_Mac.Fallback.FallbackValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.Fallback.FallbackValueType?
  public func getValueAsSegWitProgram() -> LDKFramework_Mac.Fallback.SegWitProgram?
  public func getValueAsPubKeyHash() -> [Swift.UInt8]?
  public func getValueAsScriptHash() -> [Swift.UInt8]?
  @objc deinit
  public func clone() -> LDKFramework_Mac.Fallback
  public class func seg_wit_program(version: Swift.UInt8, program: [Swift.UInt8]) -> LDKFramework_Mac.Fallback
  public class func pub_key_hash(a: [Swift.UInt8]) -> LDKFramework_Mac.Fallback
  public class func script_hash(a: [Swift.UInt8]) -> LDKFramework_Mac.Fallback
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.Fallback, b: LDKFramework_Mac.Fallback) -> Swift.Bool
  @_hasMissingDesignatedInitializers public class SegWitProgram : LDKFramework_Mac.NativeTypeWrapper {
    public func getVersion() -> Swift.UInt8
    public func getProgram() -> [Swift.UInt8]
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class Result_HolderCommitmentTransactionDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_HolderCommitmentTransactionDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_HolderCommitmentTransactionDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.HolderCommitmentTransaction?
  public class func ok(o: LDKFramework_Mac.HolderCommitmentTransaction) -> LDKFramework_Mac.Result_HolderCommitmentTransactionDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_HolderCommitmentTransactionDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_HolderCommitmentTransactionDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_ChannelConfigDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelConfigDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelConfigDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelConfig?
  public class func ok(o: LDKFramework_Mac.ChannelConfig) -> LDKFramework_Mac.Result_ChannelConfigDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelConfigDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelConfigDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_UpdateFeeDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFeeDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_UpdateFeeDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.UpdateFee?
  public class func ok(o: LDKFramework_Mac.UpdateFee) -> LDKFramework_Mac.Result_UpdateFeeDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_UpdateFeeDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_UpdateFeeDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_InvoiceParseOrSemanticErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceParseOrSemanticErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceParseOrSemanticErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.ParseOrSemanticError?
  public func getValue() -> LDKFramework_Mac.Invoice?
  public class func ok(o: LDKFramework_Mac.Invoice) -> LDKFramework_Mac.Result_InvoiceParseOrSemanticErrorZ
  public class func err(e: LDKFramework_Mac.ParseOrSemanticError) -> LDKFramework_Mac.Result_InvoiceParseOrSemanticErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_InvoiceParseOrSemanticErrorZ
}
@_hasMissingDesignatedInitializers public class Result_ChannelInfoDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelInfoDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelInfoDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelInfo?
  public class func ok(o: LDKFramework_Mac.ChannelInfo) -> LDKFramework_Mac.Result_ChannelInfoDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelInfoDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelInfoDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Option_C2Tuple_usizeTransactionZZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.C2Tuple_usizeTransactionZ?)
  public init(pointer: LDKFramework_Mac.LDKCOption_C2Tuple_usizeTransactionZZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_C2Tuple_usizeTransactionZZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.C2Tuple_usizeTransactionZ?
  public class func some(o: LDKFramework_Mac.C2Tuple_usizeTransactionZ) -> LDKFramework_Mac.Option_C2Tuple_usizeTransactionZZ
  public class func none() -> LDKFramework_Mac.Option_C2Tuple_usizeTransactionZZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_C2Tuple_usizeTransactionZZ
}
@_hasMissingDesignatedInitializers public class Result_PrivateRouteCreationErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PrivateRouteCreationErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PrivateRouteCreationErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKCreationError?
  public func getValue() -> LDKFramework_Mac.PrivateRoute?
  public class func ok(o: LDKFramework_Mac.PrivateRoute) -> LDKFramework_Mac.Result_PrivateRouteCreationErrorZ
  public class func err(e: LDKFramework_Mac.LDKCreationError) -> LDKFramework_Mac.Result_PrivateRouteCreationErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PrivateRouteCreationErrorZ
}
@_hasMissingDesignatedInitializers public class Result_HTLCUpdateDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_HTLCUpdateDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_HTLCUpdateDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.HTLCUpdate?
  public class func ok(o: LDKFramework_Mac.HTLCUpdate) -> LDKFramework_Mac.Result_HTLCUpdateDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_HTLCUpdateDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_HTLCUpdateDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ
  public class func new(a: [Swift.UInt8], b: [LDKFramework_Mac.C2Tuple_u32ScriptZ]) -> LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ClosingSignedDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ClosingSignedDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ClosingSignedDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ClosingSigned?
  public class func ok(o: LDKFramework_Mac.ClosingSigned) -> LDKFramework_Mac.Result_ClosingSignedDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ClosingSignedDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ClosingSignedDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Record : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKRecord)
  public init(pointer: LDKFramework_Mac.LDKRecord, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_level() -> LDKFramework_Mac.LDKLevel
  public func set_level(val: LDKFramework_Mac.LDKLevel)
  public func get_args() -> Swift.String
  public func set_args(val: Swift.String)
  public func get_module_path() -> Swift.String
  public func set_module_path(val: Swift.String)
  public func get_file() -> Swift.String
  public func set_file(val: Swift.String)
  public func get_line() -> Swift.UInt32
  public func set_line(val: Swift.UInt32)
  public func clone() -> LDKFramework_Mac.Record
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_CVec_SignatureZNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_SignatureZNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_SignatureZNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> [[Swift.UInt8]]?
  public class func ok(o: [[Swift.UInt8]]) -> LDKFramework_Mac.Result_CVec_SignatureZNoneZ
  public class func err() -> LDKFramework_Mac.Result_CVec_SignatureZNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CVec_SignatureZNoneZ
}
@_hasMissingDesignatedInitializers public class PhantomRouteHints : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKPhantomRouteHints)
  public init(pointer: LDKFramework_Mac.LDKPhantomRouteHints, anchor: LDKFramework_Mac.NativeTypeWrapper)
  convenience public init(channels_arg: [LDKFramework_Mac.ChannelDetails], phantom_scid_arg: Swift.UInt64, real_node_pubkey_arg: [Swift.UInt8])
  public func get_channels() -> [LDKFramework_Mac.ChannelDetails]
  public func set_channels(val: [LDKFramework_Mac.ChannelDetails])
  public func get_phantom_scid() -> Swift.UInt64
  public func set_phantom_scid(val: Swift.UInt64)
  public func get_real_node_pubkey() -> [Swift.UInt8]
  public func set_real_node_pubkey(val: [Swift.UInt8])
  public func clone() -> LDKFramework_Mac.PhantomRouteHints
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_PhantomRouteHintsDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PeerManager : LDKFramework_Mac.NativeTypeWrapper {
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(message_handler: LDKFramework_Mac.MessageHandler, our_node_secret: [Swift.UInt8], ephemeral_random_data: [Swift.UInt8], logger: LDKFramework_Mac.Logger, custom_message_handler: LDKFramework_Mac.CustomMessageHandler)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKPeerManager)
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public init(pointer: LDKFramework_Mac.LDKPeerManager, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_peer_node_ids() -> [[Swift.UInt8]]
  public func new_outbound_connection(their_node_id: [Swift.UInt8], descriptor: LDKFramework_Mac.SocketDescriptor, remote_network_address: LDKFramework_Mac.Option_NetAddressZ) -> LDKFramework_Mac.Result_CVec_u8ZPeerHandleErrorZ
  public func new_inbound_connection(descriptor: LDKFramework_Mac.SocketDescriptor, remote_network_address: LDKFramework_Mac.Option_NetAddressZ) -> LDKFramework_Mac.Result_NonePeerHandleErrorZ
  public func write_buffer_space_avail(descriptor: LDKFramework_Mac.SocketDescriptor) -> LDKFramework_Mac.Result_NonePeerHandleErrorZ
  public func read_event(peer_descriptor: LDKFramework_Mac.SocketDescriptor, data: [Swift.UInt8]) -> LDKFramework_Mac.Result_boolPeerHandleErrorZ
  public func process_events()
  public func socket_disconnected(descriptor: LDKFramework_Mac.SocketDescriptor)
  public func disconnect_by_node_id(node_id: [Swift.UInt8], no_connection_possible: Swift.Bool)
  public func disconnect_all_peers()
  public func timer_tick_occurred()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EffectiveCapacity : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKEffectiveCapacity)
  public init(pointer: LDKFramework_Mac.LDKEffectiveCapacity, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum EffectiveCapacityValueType {
    case ExactLiquidity, MaximumHTLC, Total
    public static func == (a: LDKFramework_Mac.EffectiveCapacity.EffectiveCapacityValueType, b: LDKFramework_Mac.EffectiveCapacity.EffectiveCapacityValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.EffectiveCapacity.EffectiveCapacityValueType?
  public func getValueAsExactLiquidity() -> LDKFramework_Mac.EffectiveCapacity.ExactLiquidity?
  public func getValueAsMaximumHTLC() -> LDKFramework_Mac.EffectiveCapacity.MaximumHTLC?
  public func getValueAsTotal() -> LDKFramework_Mac.EffectiveCapacity.Total?
  @objc deinit
  public func clone() -> LDKFramework_Mac.EffectiveCapacity
  public class func exact_liquidity(liquidity_msat: Swift.UInt64) -> LDKFramework_Mac.EffectiveCapacity
  public class func maximum_htlc(amount_msat: Swift.UInt64) -> LDKFramework_Mac.EffectiveCapacity
  public class func total(capacity_msat: Swift.UInt64) -> LDKFramework_Mac.EffectiveCapacity
  public class func infinite() -> LDKFramework_Mac.EffectiveCapacity
  public class func unknown() -> LDKFramework_Mac.EffectiveCapacity
  public func as_msat() -> Swift.UInt64
  @_hasMissingDesignatedInitializers public class ExactLiquidity : LDKFramework_Mac.NativeTypeWrapper {
    public func getLiquidity_msat() -> Swift.UInt64
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MaximumHTLC : LDKFramework_Mac.NativeTypeWrapper {
    public func getAmount_msat() -> Swift.UInt64
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class Total : LDKFramework_Mac.NativeTypeWrapper {
    public func getCapacity_msat() -> Swift.UInt64
    @objc deinit
  }
}
public typealias LDKTransactionOutputs = LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
public typealias TransactionOutputs = LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ
public typealias LDKTxid = LDKFramework_Mac.LDKThirtyTwoBytes
public typealias Txid = [Swift.UInt8]
@_hasMissingDesignatedInitializers open class NativeTypeWrapper : Swift.Hashable {
  public static func == (lhs: LDKFramework_Mac.NativeTypeWrapper, rhs: LDKFramework_Mac.NativeTypeWrapper) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class NativeTraitWrapper : LDKFramework_Mac.NativeTypeWrapper {
  public func activate() -> Self
  public func activateOnce() -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Bindings {
  public enum PrintSeverity : Swift.UInt {
    case DEBUG
    case WARNING
    case ERROR
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  public class func setLogThreshold(severity: LDKFramework_Mac.Bindings.PrintSeverity)
  public class func new_LDKFourBytes(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKFourBytes
  public class func LDKFourBytes_to_array(nativeType: LDKFramework_Mac.LDKFourBytes) -> [Swift.UInt8]
  public class func new_LDKPublicKey(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKPublicKey
  public class func LDKPublicKey_to_array(nativeType: LDKFramework_Mac.LDKPublicKey) -> [Swift.UInt8]
  public class func new_LDKRecoverableSignature(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKRecoverableSignature
  public class func LDKRecoverableSignature_to_array(nativeType: LDKFramework_Mac.LDKRecoverableSignature) -> [Swift.UInt8]
  public class func new_LDKSecretKey(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKSecretKey
  public class func LDKSecretKey_to_array(nativeType: LDKFramework_Mac.LDKSecretKey) -> [Swift.UInt8]
  public class func new_LDKSignature(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKSignature
  public class func LDKSignature_to_array(nativeType: LDKFramework_Mac.LDKSignature) -> [Swift.UInt8]
  public class func new_LDKSixteenBytes(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKSixteenBytes
  public class func LDKSixteenBytes_to_array(nativeType: LDKFramework_Mac.LDKSixteenBytes) -> [Swift.UInt8]
  public class func new_LDKThirtyTwoBytes(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKThirtyTwoBytes
  public class func LDKThirtyTwoBytes_to_array(nativeType: LDKFramework_Mac.LDKThirtyTwoBytes) -> [Swift.UInt8]
  public class func new_LDKThreeBytes(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKThreeBytes
  public class func LDKThreeBytes_to_array(nativeType: LDKFramework_Mac.LDKThreeBytes) -> [Swift.UInt8]
  public class func new_LDKTwelveBytes(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKTwelveBytes
  public class func LDKTwelveBytes_to_array(nativeType: LDKFramework_Mac.LDKTwelveBytes) -> [Swift.UInt8]
  public class func new_LDKTwentyBytes(array: [Swift.UInt8]) -> LDKFramework_Mac.LDKTwentyBytes
  public class func LDKTwentyBytes_to_array(nativeType: LDKFramework_Mac.LDKTwentyBytes) -> [Swift.UInt8]
  public class func new_LDKu5(array: Swift.UInt8) -> LDKFramework_Mac.LDKu5
  public class func LDKu5_to_array(nativeType: LDKFramework_Mac.LDKu5) -> Swift.UInt8
  public class func array_to_tuple80(array: [Swift.UInt8]) -> (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)
  public class func tuple80_to_array(nativeType: (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)) -> [Swift.UInt8]
  public class func new_LDKCVec_APIErrorZWrapper(array: [LDKFramework_Mac.LDKAPIError]) -> LDKFramework_Mac.Bindings.LDKCVec_APIErrorZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_APIErrorZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_APIErrorZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_APIErrorZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_APIErrorZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKAPIError]
  public class func extractNativeLDKAPIErrorArray(array: [LDKFramework_Mac.APIError]) -> [LDKFramework_Mac.LDKAPIError]
  public class func wrapNativeLDKAPIErrorArray(array: [LDKFramework_Mac.LDKAPIError]) -> [LDKFramework_Mac.APIError]
  public class func wrapDanglingNativeLDKAPIErrorArray(array: [LDKFramework_Mac.LDKAPIError]) -> [LDKFramework_Mac.APIError]
  public class func new_LDKCVec_BalanceZWrapper(array: [LDKFramework_Mac.LDKBalance]) -> LDKFramework_Mac.Bindings.LDKCVec_BalanceZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_BalanceZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_BalanceZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_BalanceZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_BalanceZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKBalance]
  public class func extractNativeLDKBalanceArray(array: [LDKFramework_Mac.Balance]) -> [LDKFramework_Mac.LDKBalance]
  public class func wrapNativeLDKBalanceArray(array: [LDKFramework_Mac.LDKBalance]) -> [LDKFramework_Mac.Balance]
  public class func wrapDanglingNativeLDKBalanceArray(array: [LDKFramework_Mac.LDKBalance]) -> [LDKFramework_Mac.Balance]
  public class func new_LDKCVec_C2Tuple_BlockHashChannelMonitorZZWrapper(array: [LDKFramework_Mac.LDKC2Tuple_BlockHashChannelMonitorZ]) -> LDKFramework_Mac.Bindings.LDKCVec_C2Tuple_BlockHashChannelMonitorZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_BlockHashChannelMonitorZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_C2Tuple_BlockHashChannelMonitorZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_BlockHashChannelMonitorZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_C2Tuple_BlockHashChannelMonitorZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC2Tuple_BlockHashChannelMonitorZ]
  public class func extractNativeLDKC2Tuple_BlockHashChannelMonitorZArray(array: [LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ]) -> [LDKFramework_Mac.LDKC2Tuple_BlockHashChannelMonitorZ]
  public class func wrapNativeLDKC2Tuple_BlockHashChannelMonitorZArray(array: [LDKFramework_Mac.LDKC2Tuple_BlockHashChannelMonitorZ]) -> [LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ]
  public class func wrapDanglingNativeLDKC2Tuple_BlockHashChannelMonitorZArray(array: [LDKFramework_Mac.LDKC2Tuple_BlockHashChannelMonitorZ]) -> [LDKFramework_Mac.C2Tuple_BlockHashChannelMonitorZ]
  public class func new_LDKCVec_C2Tuple_PublicKeyTypeZZWrapper(array: [LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ]) -> LDKFramework_Mac.Bindings.LDKCVec_C2Tuple_PublicKeyTypeZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_PublicKeyTypeZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_C2Tuple_PublicKeyTypeZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_PublicKeyTypeZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_C2Tuple_PublicKeyTypeZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ]
  public class func extractNativeLDKC2Tuple_PublicKeyTypeZArray(array: [LDKFramework_Mac.C2Tuple_PublicKeyTypeZ]) -> [LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ]
  public class func wrapNativeLDKC2Tuple_PublicKeyTypeZArray(array: [LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ]) -> [LDKFramework_Mac.C2Tuple_PublicKeyTypeZ]
  public class func wrapDanglingNativeLDKC2Tuple_PublicKeyTypeZArray(array: [LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ]) -> [LDKFramework_Mac.C2Tuple_PublicKeyTypeZ]
  public class func new_LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZWrapper(array: [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> LDKFramework_Mac.Bindings.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func extractNativeLDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZArray(array: [LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func wrapNativeLDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZArray(array: [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> [LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func wrapDanglingNativeLDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZArray(array: [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]) -> [LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32ScriptZZZ]
  public class func new_LDKCVec_C2Tuple_u32ScriptZZWrapper(array: [LDKFramework_Mac.LDKC2Tuple_u32ScriptZ]) -> LDKFramework_Mac.Bindings.LDKCVec_C2Tuple_u32ScriptZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_u32ScriptZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_C2Tuple_u32ScriptZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_u32ScriptZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_C2Tuple_u32ScriptZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC2Tuple_u32ScriptZ]
  public class func extractNativeLDKC2Tuple_u32ScriptZArray(array: [LDKFramework_Mac.C2Tuple_u32ScriptZ]) -> [LDKFramework_Mac.LDKC2Tuple_u32ScriptZ]
  public class func wrapNativeLDKC2Tuple_u32ScriptZArray(array: [LDKFramework_Mac.LDKC2Tuple_u32ScriptZ]) -> [LDKFramework_Mac.C2Tuple_u32ScriptZ]
  public class func wrapDanglingNativeLDKC2Tuple_u32ScriptZArray(array: [LDKFramework_Mac.LDKC2Tuple_u32ScriptZ]) -> [LDKFramework_Mac.C2Tuple_u32ScriptZ]
  public class func new_LDKCVec_C2Tuple_u32TxOutZZWrapper(array: [LDKFramework_Mac.LDKC2Tuple_u32TxOutZ]) -> LDKFramework_Mac.Bindings.LDKCVec_C2Tuple_u32TxOutZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_u32TxOutZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_C2Tuple_u32TxOutZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_u32TxOutZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_C2Tuple_u32TxOutZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC2Tuple_u32TxOutZ]
  public class func extractNativeLDKC2Tuple_u32TxOutZArray(array: [LDKFramework_Mac.C2Tuple_u32TxOutZ]) -> [LDKFramework_Mac.LDKC2Tuple_u32TxOutZ]
  public class func wrapNativeLDKC2Tuple_u32TxOutZArray(array: [LDKFramework_Mac.LDKC2Tuple_u32TxOutZ]) -> [LDKFramework_Mac.C2Tuple_u32TxOutZ]
  public class func wrapDanglingNativeLDKC2Tuple_u32TxOutZArray(array: [LDKFramework_Mac.LDKC2Tuple_u32TxOutZ]) -> [LDKFramework_Mac.C2Tuple_u32TxOutZ]
  public class func new_LDKCVec_C2Tuple_usizeTransactionZZWrapper(array: [LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ]) -> LDKFramework_Mac.Bindings.LDKCVec_C2Tuple_usizeTransactionZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C2Tuple_usizeTransactionZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_C2Tuple_usizeTransactionZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C2Tuple_usizeTransactionZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_C2Tuple_usizeTransactionZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ]
  public class func extractNativeLDKC2Tuple_usizeTransactionZArray(array: [LDKFramework_Mac.C2Tuple_usizeTransactionZ]) -> [LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ]
  public class func wrapNativeLDKC2Tuple_usizeTransactionZArray(array: [LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ]) -> [LDKFramework_Mac.C2Tuple_usizeTransactionZ]
  public class func wrapDanglingNativeLDKC2Tuple_usizeTransactionZArray(array: [LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ]) -> [LDKFramework_Mac.C2Tuple_usizeTransactionZ]
  public class func new_LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZWrapper(array: [LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> LDKFramework_Mac.Bindings.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func extractNativeLDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZArray(array: [LDKFramework_Mac.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> [LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func wrapNativeLDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZArray(array: [LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> [LDKFramework_Mac.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func wrapDanglingNativeLDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZArray(array: [LDKFramework_Mac.LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]) -> [LDKFramework_Mac.C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ]
  public class func new_LDKCVec_CResult_NoneAPIErrorZZWrapper(array: [LDKFramework_Mac.LDKCResult_NoneAPIErrorZ]) -> LDKFramework_Mac.Bindings.LDKCVec_CResult_NoneAPIErrorZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_CResult_NoneAPIErrorZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_CResult_NoneAPIErrorZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_CResult_NoneAPIErrorZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_CResult_NoneAPIErrorZZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKCResult_NoneAPIErrorZ]
  public class func extractNativeLDKCResult_NoneAPIErrorZArray(array: [LDKFramework_Mac.Result_NoneAPIErrorZ]) -> [LDKFramework_Mac.LDKCResult_NoneAPIErrorZ]
  public class func wrapNativeLDKCResult_NoneAPIErrorZArray(array: [LDKFramework_Mac.LDKCResult_NoneAPIErrorZ]) -> [LDKFramework_Mac.Result_NoneAPIErrorZ]
  public class func wrapDanglingNativeLDKCResult_NoneAPIErrorZArray(array: [LDKFramework_Mac.LDKCResult_NoneAPIErrorZ]) -> [LDKFramework_Mac.Result_NoneAPIErrorZ]
  public class func new_LDKCVec_CVec_RouteHopZZWrapper(array: [[LDKFramework_Mac.LDKRouteHop]]) -> LDKFramework_Mac.Bindings.LDKCVec_CVec_RouteHopZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_CVec_RouteHopZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_CVec_RouteHopZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_CVec_RouteHopZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_CVec_RouteHopZZ, deallocate: Swift.Bool = true) -> [[LDKFramework_Mac.LDKRouteHop]]
  public class func new_LDKCVec_CVec_u8ZZWrapper(array: [[Swift.UInt8]]) -> LDKFramework_Mac.Bindings.LDKCVec_CVec_u8ZZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_CVec_u8ZZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_CVec_u8ZZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_CVec_u8ZZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_CVec_u8ZZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_ChannelDetailsZWrapper(array: [LDKFramework_Mac.LDKChannelDetails]) -> LDKFramework_Mac.Bindings.LDKCVec_ChannelDetailsZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_ChannelDetailsZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_ChannelDetailsZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_ChannelDetailsZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_ChannelDetailsZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKChannelDetails]
  public class func extractNativeLDKChannelDetailsArray(array: [LDKFramework_Mac.ChannelDetails]) -> [LDKFramework_Mac.LDKChannelDetails]
  public class func wrapNativeLDKChannelDetailsArray(array: [LDKFramework_Mac.LDKChannelDetails]) -> [LDKFramework_Mac.ChannelDetails]
  public class func wrapDanglingNativeLDKChannelDetailsArray(array: [LDKFramework_Mac.LDKChannelDetails]) -> [LDKFramework_Mac.ChannelDetails]
  public class func new_LDKCVec_ChannelMonitorZWrapper(array: [LDKFramework_Mac.LDKChannelMonitor]) -> LDKFramework_Mac.Bindings.LDKCVec_ChannelMonitorZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_ChannelMonitorZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_ChannelMonitorZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_ChannelMonitorZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_ChannelMonitorZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKChannelMonitor]
  public class func extractNativeLDKChannelMonitorArray(array: [LDKFramework_Mac.ChannelMonitor]) -> [LDKFramework_Mac.LDKChannelMonitor]
  public class func wrapNativeLDKChannelMonitorArray(array: [LDKFramework_Mac.LDKChannelMonitor]) -> [LDKFramework_Mac.ChannelMonitor]
  public class func wrapDanglingNativeLDKChannelMonitorArray(array: [LDKFramework_Mac.LDKChannelMonitor]) -> [LDKFramework_Mac.ChannelMonitor]
  public class func new_LDKCVec_EventZWrapper(array: [LDKFramework_Mac.LDKEvent]) -> LDKFramework_Mac.Bindings.LDKCVec_EventZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_EventZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_EventZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_EventZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_EventZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKEvent]
  public class func extractNativeLDKEventArray(array: [LDKFramework_Mac.Event]) -> [LDKFramework_Mac.LDKEvent]
  public class func wrapNativeLDKEventArray(array: [LDKFramework_Mac.LDKEvent]) -> [LDKFramework_Mac.Event]
  public class func wrapDanglingNativeLDKEventArray(array: [LDKFramework_Mac.LDKEvent]) -> [LDKFramework_Mac.Event]
  public class func new_LDKCVec_MessageSendEventZWrapper(array: [LDKFramework_Mac.LDKMessageSendEvent]) -> LDKFramework_Mac.Bindings.LDKCVec_MessageSendEventZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_MessageSendEventZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_MessageSendEventZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_MessageSendEventZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_MessageSendEventZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKMessageSendEvent]
  public class func extractNativeLDKMessageSendEventArray(array: [LDKFramework_Mac.MessageSendEvent]) -> [LDKFramework_Mac.LDKMessageSendEvent]
  public class func wrapNativeLDKMessageSendEventArray(array: [LDKFramework_Mac.LDKMessageSendEvent]) -> [LDKFramework_Mac.MessageSendEvent]
  public class func wrapDanglingNativeLDKMessageSendEventArray(array: [LDKFramework_Mac.LDKMessageSendEvent]) -> [LDKFramework_Mac.MessageSendEvent]
  public class func new_LDKCVec_MonitorEventZWrapper(array: [LDKFramework_Mac.LDKMonitorEvent]) -> LDKFramework_Mac.Bindings.LDKCVec_MonitorEventZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_MonitorEventZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_MonitorEventZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_MonitorEventZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_MonitorEventZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKMonitorEvent]
  public class func extractNativeLDKMonitorEventArray(array: [LDKFramework_Mac.MonitorEvent]) -> [LDKFramework_Mac.LDKMonitorEvent]
  public class func wrapNativeLDKMonitorEventArray(array: [LDKFramework_Mac.LDKMonitorEvent]) -> [LDKFramework_Mac.MonitorEvent]
  public class func wrapDanglingNativeLDKMonitorEventArray(array: [LDKFramework_Mac.LDKMonitorEvent]) -> [LDKFramework_Mac.MonitorEvent]
  public class func new_LDKCVec_NetAddressZWrapper(array: [LDKFramework_Mac.LDKNetAddress]) -> LDKFramework_Mac.Bindings.LDKCVec_NetAddressZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_NetAddressZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_NetAddressZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_NetAddressZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_NetAddressZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKNetAddress]
  public class func extractNativeLDKNetAddressArray(array: [LDKFramework_Mac.NetAddress]) -> [LDKFramework_Mac.LDKNetAddress]
  public class func wrapNativeLDKNetAddressArray(array: [LDKFramework_Mac.LDKNetAddress]) -> [LDKFramework_Mac.NetAddress]
  public class func wrapDanglingNativeLDKNetAddressArray(array: [LDKFramework_Mac.LDKNetAddress]) -> [LDKFramework_Mac.NetAddress]
  public class func new_LDKCVec_NodeAnnouncementZWrapper(array: [LDKFramework_Mac.LDKNodeAnnouncement]) -> LDKFramework_Mac.Bindings.LDKCVec_NodeAnnouncementZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_NodeAnnouncementZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_NodeAnnouncementZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_NodeAnnouncementZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_NodeAnnouncementZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKNodeAnnouncement]
  public class func extractNativeLDKNodeAnnouncementArray(array: [LDKFramework_Mac.NodeAnnouncement]) -> [LDKFramework_Mac.LDKNodeAnnouncement]
  public class func wrapNativeLDKNodeAnnouncementArray(array: [LDKFramework_Mac.LDKNodeAnnouncement]) -> [LDKFramework_Mac.NodeAnnouncement]
  public class func wrapDanglingNativeLDKNodeAnnouncementArray(array: [LDKFramework_Mac.LDKNodeAnnouncement]) -> [LDKFramework_Mac.NodeAnnouncement]
  public class func new_LDKCVec_OutPointZWrapper(array: [LDKFramework_Mac.LDKOutPoint]) -> LDKFramework_Mac.Bindings.LDKCVec_OutPointZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_OutPointZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_OutPointZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_OutPointZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_OutPointZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKOutPoint]
  public class func extractNativeLDKOutPointArray(array: [LDKFramework_Mac.OutPoint]) -> [LDKFramework_Mac.LDKOutPoint]
  public class func wrapNativeLDKOutPointArray(array: [LDKFramework_Mac.LDKOutPoint]) -> [LDKFramework_Mac.OutPoint]
  public class func wrapDanglingNativeLDKOutPointArray(array: [LDKFramework_Mac.LDKOutPoint]) -> [LDKFramework_Mac.OutPoint]
  public class func new_LDKCVec_PaymentPreimageZWrapper(array: [[Swift.UInt8]]) -> LDKFramework_Mac.Bindings.LDKCVec_PaymentPreimageZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PaymentPreimageZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_PaymentPreimageZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PaymentPreimageZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_PaymentPreimageZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_PhantomRouteHintsZWrapper(array: [LDKFramework_Mac.LDKPhantomRouteHints]) -> LDKFramework_Mac.Bindings.LDKCVec_PhantomRouteHintsZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PhantomRouteHintsZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_PhantomRouteHintsZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PhantomRouteHintsZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_PhantomRouteHintsZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKPhantomRouteHints]
  public class func extractNativeLDKPhantomRouteHintsArray(array: [LDKFramework_Mac.PhantomRouteHints]) -> [LDKFramework_Mac.LDKPhantomRouteHints]
  public class func wrapNativeLDKPhantomRouteHintsArray(array: [LDKFramework_Mac.LDKPhantomRouteHints]) -> [LDKFramework_Mac.PhantomRouteHints]
  public class func wrapDanglingNativeLDKPhantomRouteHintsArray(array: [LDKFramework_Mac.LDKPhantomRouteHints]) -> [LDKFramework_Mac.PhantomRouteHints]
  public class func new_LDKCVec_PrivateRouteZWrapper(array: [LDKFramework_Mac.LDKPrivateRoute]) -> LDKFramework_Mac.Bindings.LDKCVec_PrivateRouteZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PrivateRouteZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_PrivateRouteZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PrivateRouteZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_PrivateRouteZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKPrivateRoute]
  public class func extractNativeLDKPrivateRouteArray(array: [LDKFramework_Mac.PrivateRoute]) -> [LDKFramework_Mac.LDKPrivateRoute]
  public class func wrapNativeLDKPrivateRouteArray(array: [LDKFramework_Mac.LDKPrivateRoute]) -> [LDKFramework_Mac.PrivateRoute]
  public class func wrapDanglingNativeLDKPrivateRouteArray(array: [LDKFramework_Mac.LDKPrivateRoute]) -> [LDKFramework_Mac.PrivateRoute]
  public class func new_LDKCVec_PublicKeyZWrapper(array: [[Swift.UInt8]]) -> LDKFramework_Mac.Bindings.LDKCVec_PublicKeyZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_PublicKeyZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_PublicKeyZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_PublicKeyZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_PublicKeyZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_RouteHintHopZWrapper(array: [LDKFramework_Mac.LDKRouteHintHop]) -> LDKFramework_Mac.Bindings.LDKCVec_RouteHintHopZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_RouteHintHopZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_RouteHintHopZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_RouteHintHopZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_RouteHintHopZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKRouteHintHop]
  public class func extractNativeLDKRouteHintHopArray(array: [LDKFramework_Mac.RouteHintHop]) -> [LDKFramework_Mac.LDKRouteHintHop]
  public class func wrapNativeLDKRouteHintHopArray(array: [LDKFramework_Mac.LDKRouteHintHop]) -> [LDKFramework_Mac.RouteHintHop]
  public class func wrapDanglingNativeLDKRouteHintHopArray(array: [LDKFramework_Mac.LDKRouteHintHop]) -> [LDKFramework_Mac.RouteHintHop]
  public class func new_LDKCVec_RouteHintZWrapper(array: [LDKFramework_Mac.LDKRouteHint]) -> LDKFramework_Mac.Bindings.LDKCVec_RouteHintZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_RouteHintZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_RouteHintZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_RouteHintZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_RouteHintZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKRouteHint]
  public class func extractNativeLDKRouteHintArray(array: [LDKFramework_Mac.RouteHint]) -> [LDKFramework_Mac.LDKRouteHint]
  public class func wrapNativeLDKRouteHintArray(array: [LDKFramework_Mac.LDKRouteHint]) -> [LDKFramework_Mac.RouteHint]
  public class func wrapDanglingNativeLDKRouteHintArray(array: [LDKFramework_Mac.LDKRouteHint]) -> [LDKFramework_Mac.RouteHint]
  public class func new_LDKCVec_RouteHopZWrapper(array: [LDKFramework_Mac.LDKRouteHop]) -> LDKFramework_Mac.Bindings.LDKCVec_RouteHopZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_RouteHopZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_RouteHopZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_RouteHopZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_RouteHopZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKRouteHop]
  public class func extractNativeLDKRouteHopArray(array: [LDKFramework_Mac.RouteHop]) -> [LDKFramework_Mac.LDKRouteHop]
  public class func wrapNativeLDKRouteHopArray(array: [LDKFramework_Mac.LDKRouteHop]) -> [LDKFramework_Mac.RouteHop]
  public class func wrapDanglingNativeLDKRouteHopArray(array: [LDKFramework_Mac.LDKRouteHop]) -> [LDKFramework_Mac.RouteHop]
  public class func new_LDKCVec_SignatureZWrapper(array: [[Swift.UInt8]]) -> LDKFramework_Mac.Bindings.LDKCVec_SignatureZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_SignatureZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_SignatureZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_SignatureZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_SignatureZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_SpendableOutputDescriptorZWrapper(array: [LDKFramework_Mac.LDKSpendableOutputDescriptor]) -> LDKFramework_Mac.Bindings.LDKCVec_SpendableOutputDescriptorZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_SpendableOutputDescriptorZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_SpendableOutputDescriptorZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_SpendableOutputDescriptorZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_SpendableOutputDescriptorZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKSpendableOutputDescriptor]
  public class func extractNativeLDKSpendableOutputDescriptorArray(array: [LDKFramework_Mac.SpendableOutputDescriptor]) -> [LDKFramework_Mac.LDKSpendableOutputDescriptor]
  public class func wrapNativeLDKSpendableOutputDescriptorArray(array: [LDKFramework_Mac.LDKSpendableOutputDescriptor]) -> [LDKFramework_Mac.SpendableOutputDescriptor]
  public class func wrapDanglingNativeLDKSpendableOutputDescriptorArray(array: [LDKFramework_Mac.LDKSpendableOutputDescriptor]) -> [LDKFramework_Mac.SpendableOutputDescriptor]
  public class func new_LDKCVec_TransactionOutputsZWrapper(array: [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> LDKFramework_Mac.Bindings.LDKCVec_TransactionOutputsZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TransactionOutputsZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_TransactionOutputsZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TransactionOutputsZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_TransactionOutputsZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func extractNativeLDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZArray(array: [LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func wrapNativeLDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZArray(array: [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> [LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func wrapDanglingNativeLDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZArray(array: [LDKFramework_Mac.LDKC2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]) -> [LDKFramework_Mac.C2Tuple_TxidCVec_C2Tuple_u32TxOutZZZ]
  public class func new_LDKCVec_TransactionZWrapper(array: [[Swift.UInt8]]) -> LDKFramework_Mac.Bindings.LDKCVec_TransactionZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TransactionZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_TransactionZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TransactionZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_TransactionZ, deallocate: Swift.Bool = true) -> [[Swift.UInt8]]
  public class func new_LDKCVec_TxOutZWrapper(array: [LDKFramework_Mac.LDKTxOut]) -> LDKFramework_Mac.Bindings.LDKCVec_TxOutZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TxOutZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_TxOutZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TxOutZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_TxOutZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKTxOut]
  public class func extractNativeLDKTxOutArray(array: [LDKFramework_Mac.TxOut]) -> [LDKFramework_Mac.LDKTxOut]
  public class func wrapNativeLDKTxOutArray(array: [LDKFramework_Mac.LDKTxOut]) -> [LDKFramework_Mac.TxOut]
  public class func wrapDanglingNativeLDKTxOutArray(array: [LDKFramework_Mac.LDKTxOut]) -> [LDKFramework_Mac.TxOut]
  public class func new_LDKCVec_TxidZWrapper(array: [LDKFramework_Mac.LDKThirtyTwoBytes]) -> LDKFramework_Mac.Bindings.LDKCVec_TxidZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_TxidZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_TxidZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_TxidZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_TxidZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKThirtyTwoBytes]
  public class func new_LDKCVec_UpdateAddHTLCZWrapper(array: [LDKFramework_Mac.LDKUpdateAddHTLC]) -> LDKFramework_Mac.Bindings.LDKCVec_UpdateAddHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateAddHTLCZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_UpdateAddHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateAddHTLCZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_UpdateAddHTLCZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKUpdateAddHTLC]
  public class func extractNativeLDKUpdateAddHTLCArray(array: [LDKFramework_Mac.UpdateAddHTLC]) -> [LDKFramework_Mac.LDKUpdateAddHTLC]
  public class func wrapNativeLDKUpdateAddHTLCArray(array: [LDKFramework_Mac.LDKUpdateAddHTLC]) -> [LDKFramework_Mac.UpdateAddHTLC]
  public class func wrapDanglingNativeLDKUpdateAddHTLCArray(array: [LDKFramework_Mac.LDKUpdateAddHTLC]) -> [LDKFramework_Mac.UpdateAddHTLC]
  public class func new_LDKCVec_UpdateFailHTLCZWrapper(array: [LDKFramework_Mac.LDKUpdateFailHTLC]) -> LDKFramework_Mac.Bindings.LDKCVec_UpdateFailHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateFailHTLCZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_UpdateFailHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateFailHTLCZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_UpdateFailHTLCZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKUpdateFailHTLC]
  public class func extractNativeLDKUpdateFailHTLCArray(array: [LDKFramework_Mac.UpdateFailHTLC]) -> [LDKFramework_Mac.LDKUpdateFailHTLC]
  public class func wrapNativeLDKUpdateFailHTLCArray(array: [LDKFramework_Mac.LDKUpdateFailHTLC]) -> [LDKFramework_Mac.UpdateFailHTLC]
  public class func wrapDanglingNativeLDKUpdateFailHTLCArray(array: [LDKFramework_Mac.LDKUpdateFailHTLC]) -> [LDKFramework_Mac.UpdateFailHTLC]
  public class func new_LDKCVec_UpdateFailMalformedHTLCZWrapper(array: [LDKFramework_Mac.LDKUpdateFailMalformedHTLC]) -> LDKFramework_Mac.Bindings.LDKCVec_UpdateFailMalformedHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateFailMalformedHTLCZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_UpdateFailMalformedHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateFailMalformedHTLCZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_UpdateFailMalformedHTLCZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKUpdateFailMalformedHTLC]
  public class func extractNativeLDKUpdateFailMalformedHTLCArray(array: [LDKFramework_Mac.UpdateFailMalformedHTLC]) -> [LDKFramework_Mac.LDKUpdateFailMalformedHTLC]
  public class func wrapNativeLDKUpdateFailMalformedHTLCArray(array: [LDKFramework_Mac.LDKUpdateFailMalformedHTLC]) -> [LDKFramework_Mac.UpdateFailMalformedHTLC]
  public class func wrapDanglingNativeLDKUpdateFailMalformedHTLCArray(array: [LDKFramework_Mac.LDKUpdateFailMalformedHTLC]) -> [LDKFramework_Mac.UpdateFailMalformedHTLC]
  public class func new_LDKCVec_UpdateFulfillHTLCZWrapper(array: [LDKFramework_Mac.LDKUpdateFulfillHTLC]) -> LDKFramework_Mac.Bindings.LDKCVec_UpdateFulfillHTLCZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_UpdateFulfillHTLCZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_UpdateFulfillHTLCZ)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_UpdateFulfillHTLCZ_to_array(nativeType: LDKFramework_Mac.LDKCVec_UpdateFulfillHTLCZ, deallocate: Swift.Bool = true) -> [LDKFramework_Mac.LDKUpdateFulfillHTLC]
  public class func extractNativeLDKUpdateFulfillHTLCArray(array: [LDKFramework_Mac.UpdateFulfillHTLC]) -> [LDKFramework_Mac.LDKUpdateFulfillHTLC]
  public class func wrapNativeLDKUpdateFulfillHTLCArray(array: [LDKFramework_Mac.LDKUpdateFulfillHTLC]) -> [LDKFramework_Mac.UpdateFulfillHTLC]
  public class func wrapDanglingNativeLDKUpdateFulfillHTLCArray(array: [LDKFramework_Mac.LDKUpdateFulfillHTLC]) -> [LDKFramework_Mac.UpdateFulfillHTLC]
  public class func new_LDKCVec_u5ZWrapper(array: [Swift.UInt8]) -> LDKFramework_Mac.Bindings.LDKCVec_u5ZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_u5ZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_u5Z)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_u5Z_to_array(nativeType: LDKFramework_Mac.LDKCVec_u5Z, deallocate: Swift.Bool = true) -> [Swift.UInt8]
  public class func new_LDKCVec_u64ZWrapper(array: [Swift.UInt64]) -> LDKFramework_Mac.Bindings.LDKCVec_u64ZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_u64ZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_u64Z)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_u64Z_to_array(nativeType: LDKFramework_Mac.LDKCVec_u64Z, deallocate: Swift.Bool = true) -> [Swift.UInt64]
  public class func new_LDKCVec_u8ZWrapper(array: [Swift.UInt8]) -> LDKFramework_Mac.Bindings.LDKCVec_u8ZWrapper
  @_hasMissingDesignatedInitializers public class LDKCVec_u8ZWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKCVec_u8Z)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKCVec_u8Z_to_array(nativeType: LDKFramework_Mac.LDKCVec_u8Z, deallocate: Swift.Bool = true) -> [Swift.UInt8]
  public class func new_LDKu8sliceWrapper(array: [Swift.UInt8]) -> LDKFramework_Mac.Bindings.LDKu8sliceWrapper
  @_hasMissingDesignatedInitializers public class LDKu8sliceWrapper : LDKFramework_Mac.NativeTypeWrapper {
    public init(pointer: LDKFramework_Mac.LDKu8slice)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKu8slice_to_array(nativeType: LDKFramework_Mac.LDKu8slice) -> [Swift.UInt8]
  public class func swift_ldk_get_compiled_version() -> Swift.String
  public class func swift_ldk_c_bindings_get_compiled_version() -> Swift.String
  public class func swift_CResult_NoneNoneZ_is_ok(o: LDKFramework_Mac.Result_NoneNoneZ) -> Swift.Bool
  public class func swift_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_CounterpartyCommitmentSecretsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_SecretKeyErrorZ_is_ok(o: LDKFramework_Mac.Result_SecretKeyErrorZ) -> Swift.Bool
  public class func swift_CResult_PublicKeyErrorZ_is_ok(o: LDKFramework_Mac.Result_PublicKeyErrorZ) -> Swift.Bool
  public class func swift_CResult_TxCreationKeysDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_TxCreationKeysDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelPublicKeysDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelPublicKeysDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TxCreationKeysErrorZ_is_ok(o: LDKFramework_Mac.Result_TxCreationKeysErrorZ) -> Swift.Bool
  public class func swift_CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_HTLCOutputInCommitmentDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_CounterpartyChannelTransactionParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelTransactionParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_HolderCommitmentTransactionDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_BuiltCommitmentTransactionDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TrustedClosingTransactionNoneZ_is_ok(o: LDKFramework_Mac.Result_TrustedClosingTransactionNoneZ) -> Swift.Bool
  public class func swift_CResult_CommitmentTransactionDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_CommitmentTransactionDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TrustedCommitmentTransactionNoneZ_is_ok(o: LDKFramework_Mac.Result_TrustedCommitmentTransactionNoneZ) -> Swift.Bool
  public class func swift_CResult_CVec_SignatureZNoneZ_is_ok(o: LDKFramework_Mac.Result_CVec_SignatureZNoneZ) -> Swift.Bool
  public class func swift_CResult_ShutdownScriptDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ShutdownScriptDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(o: LDKFramework_Mac.Result_ShutdownScriptInvalidShutdownScriptZ) -> Swift.Bool
  public class func swift_CResult_NoneErrorZ_is_ok(o: LDKFramework_Mac.Result_NoneErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteHopDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_RouteHopDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_RouteDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteParametersDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_RouteParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentParametersDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_PaymentParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteHintDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_RouteHintDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteHintHopDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_RouteHintHopDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RouteLightningErrorZ_is_ok(o: LDKFramework_Mac.Result_RouteLightningErrorZ) -> Swift.Bool
  public class func swift_CResult_TxOutAccessErrorZ_is_ok(o: LDKFramework_Mac.Result_TxOutAccessErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneChannelMonitorUpdateErrZ_is_ok(o: LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ) -> Swift.Bool
  public class func swift_CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_COption_ClosureReasonZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_EventZDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_COption_EventZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_FixedPenaltyScorerDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ScoringParametersDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ScoringParametersDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ScorerDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ScorerDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ProbabilisticScorerDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ProbabilisticScorerDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InitFeaturesDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_InitFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelFeaturesDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeFeaturesDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_NodeFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceFeaturesDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_InvoiceFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelTypeFeaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_DelayedPaymentOutputDescriptorDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_StaticPaymentOutputDescriptorDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_SpendableOutputDescriptorDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_SignatureCVec_SignatureZZNoneZ_is_ok(o: LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ) -> Swift.Bool
  public class func swift_CResult_SignatureNoneZ_is_ok(o: LDKFramework_Mac.Result_SignatureNoneZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_SignatureSignatureZNoneZ_is_ok(o: LDKFramework_Mac.Result_C2Tuple_SignatureSignatureZNoneZ) -> Swift.Bool
  public class func swift_CResult_SecretKeyNoneZ_is_ok(o: LDKFramework_Mac.Result_SecretKeyNoneZ) -> Swift.Bool
  public class func swift_CResult_SignDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_SignDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RecoverableSignatureNoneZ_is_ok(o: LDKFramework_Mac.Result_RecoverableSignatureNoneZ) -> Swift.Bool
  public class func swift_CResult_CVec_CVec_u8ZZNoneZ_is_ok(o: LDKFramework_Mac.Result_CVec_CVec_u8ZZNoneZ) -> Swift.Bool
  public class func swift_CResult_InMemorySignerDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_InMemorySignerDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_TransactionNoneZ_is_ok(o: LDKFramework_Mac.Result_TransactionNoneZ) -> Swift.Bool
  public class func swift_CResult_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ_is_ok(o: LDKFramework_Mac.Result_CVec_C2Tuple_BlockHashChannelMonitorZZErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneAPIErrorZ_is_ok(o: LDKFramework_Mac.Result_NoneAPIErrorZ) -> Swift.Bool
  public class func swift_CResult__u832APIErrorZ_is_ok(o: LDKFramework_Mac.Result__u832APIErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentIdPaymentSendFailureZ_is_ok(o: LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ) -> Swift.Bool
  public class func swift_CResult_NonePaymentSendFailureZ_is_ok(o: LDKFramework_Mac.Result_NonePaymentSendFailureZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ_is_ok(o: LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_PaymentHashPaymentSecretZNoneZ_is_ok(o: LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ_is_ok(o: LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentSecretNoneZ_is_ok(o: LDKFramework_Mac.Result_PaymentSecretNoneZ) -> Swift.Bool
  public class func swift_CResult_PaymentSecretAPIErrorZ_is_ok(o: LDKFramework_Mac.Result_PaymentSecretAPIErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentPreimageAPIErrorZ_is_ok(o: LDKFramework_Mac.Result_PaymentPreimageAPIErrorZ) -> Swift.Bool
  public class func swift_CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_CounterpartyForwardingInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelCounterpartyDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelCounterpartyDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelDetailsDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelDetailsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PhantomRouteHintsDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_PhantomRouteHintsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_BlockHashChannelManagerZDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelConfigDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelConfigDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_OutPointDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_OutPointDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_TypeZDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_COption_TypeZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PaymentIdPaymentErrorZ_is_ok(o: LDKFramework_Mac.Result_PaymentIdPaymentErrorZ) -> Swift.Bool
  public class func swift_CResult_SiPrefixParseErrorZ_is_ok(o: LDKFramework_Mac.Result_SiPrefixParseErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceParseOrSemanticErrorZ_is_ok(o: LDKFramework_Mac.Result_InvoiceParseOrSemanticErrorZ) -> Swift.Bool
  public class func swift_CResult_SignedRawInvoiceParseErrorZ_is_ok(o: LDKFramework_Mac.Result_SignedRawInvoiceParseErrorZ) -> Swift.Bool
  public class func swift_CResult_PayeePubKeyErrorZ_is_ok(o: LDKFramework_Mac.Result_PayeePubKeyErrorZ) -> Swift.Bool
  public class func swift_CResult_PositiveTimestampCreationErrorZ_is_ok(o: LDKFramework_Mac.Result_PositiveTimestampCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneSemanticErrorZ_is_ok(o: LDKFramework_Mac.Result_NoneSemanticErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceSemanticErrorZ_is_ok(o: LDKFramework_Mac.Result_InvoiceSemanticErrorZ) -> Swift.Bool
  public class func swift_CResult_DescriptionCreationErrorZ_is_ok(o: LDKFramework_Mac.Result_DescriptionCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_PrivateRouteCreationErrorZ_is_ok(o: LDKFramework_Mac.Result_PrivateRouteCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_StringErrorZ_is_ok(o: LDKFramework_Mac.Result_StringErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelMonitorUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_MonitorEventZDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_COption_MonitorEventZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_HTLCUpdateDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_HTLCUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NoneLightningErrorZ_is_ok(o: LDKFramework_Mac.Result_NoneLightningErrorZ) -> Swift.Bool
  public class func swift_CResult_boolLightningErrorZ_is_ok(o: LDKFramework_Mac.Result_boolLightningErrorZ) -> Swift.Bool
  public class func swift_CResult_CVec_u8ZPeerHandleErrorZ_is_ok(o: LDKFramework_Mac.Result_CVec_u8ZPeerHandleErrorZ) -> Swift.Bool
  public class func swift_CResult_NonePeerHandleErrorZ_is_ok(o: LDKFramework_Mac.Result_NonePeerHandleErrorZ) -> Swift.Bool
  public class func swift_CResult_boolPeerHandleErrorZ_is_ok(o: LDKFramework_Mac.Result_boolPeerHandleErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeIdDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_NodeIdDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_COption_NetworkUpdateZDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelUpdateInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelInfoDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RoutingFeesDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_RoutingFeesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_NodeAnnouncementInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeInfoDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_NodeInfoDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NetworkGraphDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_NetworkGraphDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NetAddressDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_NetAddressDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_AcceptChannelDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_AcceptChannelDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_AnnouncementSignaturesDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelReestablishDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelReestablishDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ClosingSignedDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ClosingSignedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ClosingSignedFeeRangeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_CommitmentSignedDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_CommitmentSignedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_FundingCreatedDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_FundingCreatedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_FundingSignedDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_FundingSignedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_FundingLockedDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_FundingLockedDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InitDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_InitDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_OpenChannelDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_OpenChannelDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_RevokeAndACKDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_RevokeAndACKDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ShutdownDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ShutdownDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFailHTLCDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UpdateFailHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UpdateFailMalformedHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFeeDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UpdateFeeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UpdateFulfillHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UpdateAddHTLCDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UpdateAddHTLCDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PingDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_PingDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_PongDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_PongDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UnsignedChannelAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelAnnouncementDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UnsignedChannelUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ChannelUpdateDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ChannelUpdateDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ErrorMessageDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ErrorMessageDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_WarningMessageDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_WarningMessageDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_UnsignedNodeAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_NodeAnnouncementDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_NodeAnnouncementDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_QueryShortChannelIdsDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ReplyShortChannelIdsEndDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_QueryChannelRangeDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_QueryChannelRangeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_ReplyChannelRangeDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_ReplyChannelRangeDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_GossipTimestampFilterDecodeErrorZ_is_ok(o: LDKFramework_Mac.Result_GossipTimestampFilterDecodeErrorZ) -> Swift.Bool
  public class func swift_CResult_InvoiceSignOrCreationErrorZ_is_ok(o: LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ) -> Swift.Bool
  public class func swift_CResult_LockedChannelMonitorNoneZ_is_ok(o: LDKFramework_Mac.Result_LockedChannelMonitorNoneZ) -> Swift.Bool
  public class func swift_sign(msg: [Swift.UInt8], sk: [Swift.UInt8]) -> LDKFramework_Mac.Result_StringErrorZ
  public class func swift_recover_pk(msg: [Swift.UInt8], sig: Swift.String) -> LDKFramework_Mac.Result_PublicKeyErrorZ
  public class func swift_verify(msg: [Swift.UInt8], sig: Swift.String, pk: [Swift.UInt8]) -> Swift.Bool
  public class func swift_construct_invoice_preimage(hrp_bytes: [Swift.UInt8], data_without_signature: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_C2Tuple_BlockHashChannelMonitorZ_read(ser: [Swift.UInt8], arg: LDKFramework_Mac.KeysInterface) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelMonitorZDecodeErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func swift_C2Tuple_BlockHashChannelManagerZ_read(ser: [Swift.UInt8], arg: LDKFramework_Mac.ChannelManagerReadArgs) -> LDKFramework_Mac.Result_C2Tuple_BlockHashChannelManagerZDecodeErrorZ
  public class func swift_htlc_success_tx_weight(opt_anchors: Swift.Bool) -> Swift.UInt64
  public class func swift_htlc_timeout_tx_weight(opt_anchors: Swift.Bool) -> Swift.UInt64
  public class func swift_build_commitment_secret(commitment_seed: [Swift.UInt8], idx: Swift.UInt64) -> [Swift.UInt8]
  public class func swift_build_closing_transaction(to_holder_value_sat: Swift.UInt64, to_counterparty_value_sat: Swift.UInt64, to_holder_script: [Swift.UInt8], to_counterparty_script: [Swift.UInt8], funding_outpoint: LDKFramework_Mac.OutPoint) -> [Swift.UInt8]
  public class func swift_derive_private_key(per_commitment_point: [Swift.UInt8], base_secret: [Swift.UInt8]) -> LDKFramework_Mac.Result_SecretKeyErrorZ
  public class func swift_derive_public_key(per_commitment_point: [Swift.UInt8], base_point: [Swift.UInt8]) -> LDKFramework_Mac.Result_PublicKeyErrorZ
  public class func swift_derive_private_revocation_key(per_commitment_secret: [Swift.UInt8], countersignatory_revocation_base_secret: [Swift.UInt8]) -> LDKFramework_Mac.Result_SecretKeyErrorZ
  public class func swift_derive_public_revocation_key(per_commitment_point: [Swift.UInt8], countersignatory_revocation_base_point: [Swift.UInt8]) -> LDKFramework_Mac.Result_PublicKeyErrorZ
  public class func swift_get_revokeable_redeemscript(revocation_key: [Swift.UInt8], contest_delay: Swift.UInt16, broadcaster_delayed_payment_key: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_get_htlc_redeemscript(htlc: LDKFramework_Mac.HTLCOutputInCommitment, opt_anchors: Swift.Bool, keys: LDKFramework_Mac.TxCreationKeys) -> [Swift.UInt8]
  public class func swift_make_funding_redeemscript(broadcaster: [Swift.UInt8], countersignatory: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_build_htlc_transaction(commitment_txid: [Swift.UInt8], feerate_per_kw: Swift.UInt32, contest_delay: Swift.UInt16, htlc: LDKFramework_Mac.HTLCOutputInCommitment, opt_anchors: Swift.Bool, broadcaster_delayed_payment_key: [Swift.UInt8], revocation_key: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_get_anchor_redeemscript(funding_pubkey: [Swift.UInt8]) -> [Swift.UInt8]
  public class func swift_get_commitment_transaction_number_obscure_factor(broadcaster_payment_basepoint: [Swift.UInt8], countersignatory_payment_basepoint: [Swift.UInt8], outbound_from_broadcaster: Swift.Bool) -> Swift.UInt64
  public class func swift_find_route(our_node_pubkey: [Swift.UInt8], route_params: LDKFramework_Mac.RouteParameters, network: LDKFramework_Mac.NetworkGraph, first_hops: [LDKFramework_Mac.ChannelDetails]?, logger: LDKFramework_Mac.Logger, scorer: LDKFramework_Mac.Score, random_seed_bytes: [Swift.UInt8]) -> LDKFramework_Mac.Result_RouteLightningErrorZ
  public class func swift_create_phantom_invoice(amt_msat: LDKFramework_Mac.Option_u64Z, description: Swift.String, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8], phantom_route_hints: [LDKFramework_Mac.PhantomRouteHints], keys_manager: LDKFramework_Mac.KeysInterface, network: LDKFramework_Mac.LDKCurrency) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_phantom_invoice_with_description_hash(amt_msat: LDKFramework_Mac.Option_u64Z, description_hash: LDKFramework_Mac.Sha256, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8], phantom_route_hints: [LDKFramework_Mac.PhantomRouteHints], keys_manager: LDKFramework_Mac.KeysInterface, network: LDKFramework_Mac.LDKCurrency) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager(channelmanager: LDKFramework_Mac.ChannelManager, keys_manager: LDKFramework_Mac.KeysInterface, network: LDKFramework_Mac.LDKCurrency, amt_msat: LDKFramework_Mac.Option_u64Z, description: Swift.String) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager_with_description_hash(channelmanager: LDKFramework_Mac.ChannelManager, keys_manager: LDKFramework_Mac.KeysInterface, network: LDKFramework_Mac.LDKCurrency, amt_msat: LDKFramework_Mac.Option_u64Z, description_hash: LDKFramework_Mac.Sha256) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch(channelmanager: LDKFramework_Mac.ChannelManager, keys_manager: LDKFramework_Mac.KeysInterface, network: LDKFramework_Mac.LDKCurrency, amt_msat: LDKFramework_Mac.Option_u64Z, description_hash: LDKFramework_Mac.Sha256, duration_since_epoch: Swift.UInt64) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func swift_create_invoice_from_channelmanager_and_duration_since_epoch(channelmanager: LDKFramework_Mac.ChannelManager, keys_manager: LDKFramework_Mac.KeysInterface, network: LDKFramework_Mac.LDKCurrency, amt_msat: LDKFramework_Mac.Option_u64Z, description: Swift.String, duration_since_epoch: Swift.UInt64) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func cacheInstance(instance: LDKFramework_Mac.NativeTraitWrapper, countIdempotently: Swift.Bool = false)
  public class func instanceToPointer(instance: LDKFramework_Mac.NativeTraitWrapper) -> Swift.UnsafeMutableRawPointer
  public class func pointerToInstance<T>(pointer: Swift.UnsafeRawPointer, sourceMarker: Swift.String?) -> T where T : LDKFramework_Mac.NativeTraitWrapper
  public class func removeInstancePointer(instance: LDKFramework_Mac.NativeTraitWrapper) -> Swift.Bool
  public class func clearInstancePointers()
  public class func new_LDKTransactionWrapper(array: [Swift.UInt8]) -> LDKFramework_Mac.Bindings.LDKTransactionWrapper
  @_hasMissingDesignatedInitializers public class LDKTransactionWrapper {
    public init(pointer: LDKFramework_Mac.LDKTransaction)
    public func noOpRetain()
    @objc deinit
  }
  public class func LDKTransaction_to_array(nativeType: LDKFramework_Mac.LDKTransaction, deallocate: Swift.Bool = true) -> [Swift.UInt8]
  public class func LDKStr_to_string(nativeType: LDKFramework_Mac.LDKStr, deallocate: Swift.Bool = true) -> Swift.String
  public class func UnsafeIntPointer_to_string(nativeType: Swift.UnsafePointer<Swift.Int8>) -> Swift.String
  public class func string_to_unsafe_int8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.Int8>
  public class func string_to_unsafe_uint8_pointer(string: Swift.String) -> Swift.UnsafePointer<Swift.UInt8>
  public class func new_LDKStr(string: Swift.String, chars_is_owned: Swift.Bool = false) -> LDKFramework_Mac.LDKStr
  public class func createInvoiceFromChannelManager(channelManager: LDKFramework_Mac.ChannelManager, keysManager: LDKFramework_Mac.KeysInterface, network: LDKFramework_Mac.LDKCurrency, amountMsat: Swift.UInt64?, description: Swift.String) -> LDKFramework_Mac.Result_InvoiceSignOrCreationErrorZ
  public class func get_ldk_swift_bindings_version() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InstanceCrashSimulator : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public func getPointer() -> Swift.UnsafeMutableRawPointer
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_NoneLightningErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneLightningErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_NoneLightningErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LightningError?
  public class func ok() -> LDKFramework_Mac.Result_NoneLightningErrorZ
  public class func err(e: LDKFramework_Mac.LightningError) -> LDKFramework_Mac.Result_NoneLightningErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_NoneLightningErrorZ
}
@_hasMissingDesignatedInitializers public class Option_MonitorEventZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.MonitorEvent?)
  public init(pointer: LDKFramework_Mac.LDKCOption_MonitorEventZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_MonitorEventZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.MonitorEvent?
  public class func some(o: LDKFramework_Mac.MonitorEvent) -> LDKFramework_Mac.Option_MonitorEventZ
  public class func none() -> LDKFramework_Mac.Option_MonitorEventZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_MonitorEventZ
}
@_hasMissingDesignatedInitializers public class Description : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKDescription)
  public init(pointer: LDKFramework_Mac.LDKDescription, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.Description
  public func hash() -> Swift.UInt64
  public class func eq(a: LDKFramework_Mac.Description, b: LDKFramework_Mac.Description) -> Swift.Bool
  public class func new(description: Swift.String) -> LDKFramework_Mac.Result_DescriptionCreationErrorZ
  public func into_inner() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PaymentSendFailure : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKPaymentSendFailure)
  public init(pointer: LDKFramework_Mac.LDKPaymentSendFailure, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum PaymentSendFailureValueType {
    case ParameterError, PathParameterError, AllFailedRetrySafe, PartialFailure
    public static func == (a: LDKFramework_Mac.PaymentSendFailure.PaymentSendFailureValueType, b: LDKFramework_Mac.PaymentSendFailure.PaymentSendFailureValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.PaymentSendFailure.PaymentSendFailureValueType?
  public func getValueAsParameterError() -> LDKFramework_Mac.APIError?
  public func getValueAsPathParameterError() -> [LDKFramework_Mac.Result_NoneAPIErrorZ]?
  public func getValueAsAllFailedRetrySafe() -> [LDKFramework_Mac.APIError]?
  public func getValueAsPartialFailure() -> LDKFramework_Mac.PaymentSendFailure.PartialFailure?
  @objc deinit
  public func clone() -> LDKFramework_Mac.PaymentSendFailure
  public class func parameter_error(a: LDKFramework_Mac.APIError) -> LDKFramework_Mac.PaymentSendFailure
  public class func path_parameter_error(a: [LDKFramework_Mac.Result_NoneAPIErrorZ]) -> LDKFramework_Mac.PaymentSendFailure
  public class func all_failed_retry_safe(a: [LDKFramework_Mac.APIError]) -> LDKFramework_Mac.PaymentSendFailure
  public class func partial_failure(results: [LDKFramework_Mac.Result_NoneAPIErrorZ], failed_paths_retry: LDKFramework_Mac.RouteParameters, payment_id: [Swift.UInt8]) -> LDKFramework_Mac.PaymentSendFailure
  @_hasMissingDesignatedInitializers public class PartialFailure : LDKFramework_Mac.NativeTypeWrapper {
    public func getResults() -> [LDKFramework_Mac.Result_NoneAPIErrorZ]
    public func getFailed_paths_retry() -> LDKFramework_Mac.RouteParameters
    public func getPayment_id() -> [Swift.UInt8]
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers open class SocketDescriptor : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKSocketDescriptor)
  public init(pointer: LDKFramework_Mac.LDKSocketDescriptor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.SocketDescriptor
  @objc deinit
  open func send_data(data: [Swift.UInt8], resume_read: Swift.Bool) -> Swift.UInt
  open func disconnect_socket()
  open func eq(other_arg: LDKFramework_Mac.SocketDescriptor) -> Swift.Bool
  open func hash() -> Swift.UInt64
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedSocketDescriptor : LDKFramework_Mac.SocketDescriptor {
  override public func send_data(data: [Swift.UInt8], resume_read: Swift.Bool) -> Swift.UInt
  override public func disconnect_socket()
  override public func eq(other_arg: LDKFramework_Mac.SocketDescriptor) -> Swift.Bool
  override public func hash() -> Swift.UInt64
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKSocketDescriptor)
  override public init(pointer: LDKFramework_Mac.LDKSocketDescriptor, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentSecretZNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_PaymentHashPaymentSecretZNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> LDKFramework_Mac.C2Tuple_PaymentHashPaymentSecretZ?
  public class func ok(o: LDKFramework_Mac.C2Tuple_PaymentHashPaymentSecretZ) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
  public class func err() -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
}
@_hasMissingDesignatedInitializers public class Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.PaymentSendFailure?
  public func getValue() -> LDKFramework_Mac.C2Tuple_PaymentHashPaymentIdZ?
  public class func ok(o: LDKFramework_Mac.C2Tuple_PaymentHashPaymentIdZ) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
  public class func err(e: LDKFramework_Mac.PaymentSendFailure) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
}
@_hasMissingDesignatedInitializers public class Result_FundingCreatedDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_FundingCreatedDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_FundingCreatedDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.FundingCreated?
  public class func ok(o: LDKFramework_Mac.FundingCreated) -> LDKFramework_Mac.Result_FundingCreatedDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_FundingCreatedDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_FundingCreatedDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result__u832APIErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult__u832APIErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult__u832APIErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.APIError?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result__u832APIErrorZ
  public class func err(e: LDKFramework_Mac.APIError) -> LDKFramework_Mac.Result__u832APIErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result__u832APIErrorZ
}
@_hasMissingDesignatedInitializers open class Score : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKScore)
  public init(pointer: LDKFramework_Mac.LDKScore, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func channel_penalty_msat(short_channel_id: Swift.UInt64, send_amt_msat: Swift.UInt64, capacity_msat: Swift.UInt64, source: LDKFramework_Mac.NodeId, target: LDKFramework_Mac.NodeId) -> Swift.UInt64
  open func payment_path_failed(path: [LDKFramework_Mac.LDKRouteHop], short_channel_id: Swift.UInt64)
  open func payment_path_successful(path: [LDKFramework_Mac.LDKRouteHop])
  open func write() -> [Swift.UInt8]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedScore : LDKFramework_Mac.Score {
  override public func channel_penalty_msat(short_channel_id: Swift.UInt64, send_amt_msat: Swift.UInt64, capacity_msat: Swift.UInt64, source: LDKFramework_Mac.NodeId, target: LDKFramework_Mac.NodeId) -> Swift.UInt64
  public func payment_path_failed(path: [LDKFramework_Mac.RouteHop], short_channel_id: Swift.UInt64)
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func payment_path_failed(path: [LDKFramework_Mac.LDKRouteHop], short_channel_id: Swift.UInt64)
  public func payment_path_successful(path: [LDKFramework_Mac.RouteHop])
  @available(*, deprecated, message: "Use method taking Swift object array type instead.")
  override public func payment_path_successful(path: [LDKFramework_Mac.LDKRouteHop])
  override public func write() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKScore)
  override public init(pointer: LDKFramework_Mac.LDKScore, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TrustedCommitmentTransaction : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKTrustedCommitmentTransaction)
  public init(pointer: LDKFramework_Mac.LDKTrustedCommitmentTransaction, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func txid() -> [Swift.UInt8]
  public func built_transaction() -> LDKFramework_Mac.BuiltCommitmentTransaction
  public func keys() -> LDKFramework_Mac.TxCreationKeys
  public func opt_anchors() -> Swift.Bool
  public func get_htlc_sigs(htlc_base_key: [Swift.UInt8], channel_parameters: LDKFramework_Mac.DirectedChannelTransactionParameters) -> LDKFramework_Mac.Result_CVec_SignatureZNoneZ
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Listen : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKListen)
  public init(pointer: LDKFramework_Mac.LDKListen, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func block_connected(block: [Swift.UInt8], height: Swift.UInt32)
  open func block_disconnected(header: [Swift.UInt8]?, height: Swift.UInt32)
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedListen : LDKFramework_Mac.Listen {
  override public func block_connected(block: [Swift.UInt8], height: Swift.UInt32)
  override public func block_disconnected(header: [Swift.UInt8]?, height: Swift.UInt32)
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKListen)
  override public init(pointer: LDKFramework_Mac.LDKListen, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_ChannelCounterpartyDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelCounterpartyDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelCounterpartyDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelCounterparty?
  public class func ok(o: LDKFramework_Mac.ChannelCounterparty) -> LDKFramework_Mac.Result_ChannelCounterpartyDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelCounterpartyDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelCounterpartyDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class ShutdownScript : LDKFramework_Mac.NativeTypeWrapper {
  public init(script_hash: [Swift.UInt8])
  public init(pointer: LDKFramework_Mac.LDKShutdownScript)
  public init(pointer: LDKFramework_Mac.LDKShutdownScript, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.ShutdownScript
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ShutdownScriptDecodeErrorZ
  public class func new_witness_program(version: Swift.UInt8, program: [Swift.UInt8]) -> LDKFramework_Mac.Result_ShutdownScriptInvalidShutdownScriptZ
  public func into_inner() -> [Swift.UInt8]
  public func as_legacy_pubkey() -> [Swift.UInt8]
  public func is_compatible(features: LDKFramework_Mac.InitFeatures) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Option_NetworkUpdateZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(value: LDKFramework_Mac.NetworkUpdate?)
  public init(pointer: LDKFramework_Mac.LDKCOption_NetworkUpdateZ)
  public init(pointer: LDKFramework_Mac.LDKCOption_NetworkUpdateZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func getValue() -> LDKFramework_Mac.NetworkUpdate?
  public class func some(o: LDKFramework_Mac.NetworkUpdate) -> LDKFramework_Mac.Option_NetworkUpdateZ
  public class func none() -> LDKFramework_Mac.Option_NetworkUpdateZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Option_NetworkUpdateZ
}
@_hasMissingDesignatedInitializers public class C3Tuple_RawInvoice_u832InvoiceSignatureZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ)
  public init(pointer: LDKFramework_Mac.LDKC3Tuple_RawInvoice_u832InvoiceSignatureZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C3Tuple_RawInvoice_u832InvoiceSignatureZ
  public class func new(a: LDKFramework_Mac.RawInvoice, b: [Swift.UInt8], c: LDKFramework_Mac.InvoiceSignature) -> LDKFramework_Mac.C3Tuple_RawInvoice_u832InvoiceSignatureZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class C2Tuple_usizeTransactionZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_usizeTransactionZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_usizeTransactionZ
  public class func new(a: Swift.UInt, b: [Swift.UInt8]) -> LDKFramework_Mac.C2Tuple_usizeTransactionZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SignedRawInvoice : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKSignedRawInvoice)
  public init(pointer: LDKFramework_Mac.LDKSignedRawInvoice, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public class func eq(a: LDKFramework_Mac.SignedRawInvoice, b: LDKFramework_Mac.SignedRawInvoice) -> Swift.Bool
  public func clone() -> LDKFramework_Mac.SignedRawInvoice
  public func into_parts() -> LDKFramework_Mac.C3Tuple_RawInvoice_u832InvoiceSignatureZ
  public func raw_invoice() -> LDKFramework_Mac.RawInvoice
  public func hash() -> [Swift.UInt8]
  public func signature() -> LDKFramework_Mac.InvoiceSignature
  public func recover_payee_pub_key() -> LDKFramework_Mac.Result_PayeePubKeyErrorZ
  public func check_signature() -> Swift.Bool
  public class func from_str(s: Swift.String) -> LDKFramework_Mac.Result_SignedRawInvoiceParseErrorZ
  public func to_str() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_TrustedClosingTransactionNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_TrustedClosingTransactionNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_TrustedClosingTransactionNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> LDKFramework_Mac.TrustedClosingTransaction?
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func ok(o: LDKFramework_Mac.TrustedClosingTransaction) -> LDKFramework_Mac.Result_TrustedClosingTransactionNoneZ
  public class func err() -> LDKFramework_Mac.Result_TrustedClosingTransactionNoneZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_PublicKeyErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PublicKeyErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PublicKeyErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKSecp256k1Error?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_PublicKeyErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func err(e: LDKFramework_Mac.LDKSecp256k1Error) -> LDKFramework_Mac.Result_PublicKeyErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PublicKeyErrorZ
}
@_hasMissingDesignatedInitializers open class Watch : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKWatch)
  public init(pointer: LDKFramework_Mac.LDKWatch, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func watch_channel(funding_txo: LDKFramework_Mac.OutPoint, monitor: LDKFramework_Mac.ChannelMonitor) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  open func update_channel(funding_txo: LDKFramework_Mac.OutPoint, update: LDKFramework_Mac.ChannelMonitorUpdate) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  open func release_pending_monitor_events() -> [LDKFramework_Mac.LDKMonitorEvent]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedWatch : LDKFramework_Mac.Watch {
  override public func watch_channel(funding_txo: LDKFramework_Mac.OutPoint, monitor: LDKFramework_Mac.ChannelMonitor) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  override public func update_channel(funding_txo: LDKFramework_Mac.OutPoint, update: LDKFramework_Mac.ChannelMonitorUpdate) -> LDKFramework_Mac.Result_NoneChannelMonitorUpdateErrZ
  override public func release_pending_monitor_events() -> [LDKFramework_Mac.LDKMonitorEvent]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKWatch)
  override public init(pointer: LDKFramework_Mac.LDKWatch, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class C2Tuple_SignatureSignatureZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_SignatureSignatureZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_SignatureSignatureZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_SignatureSignatureZ
  public class func new(a: [Swift.UInt8], b: [Swift.UInt8]) -> LDKFramework_Mac.C2Tuple_SignatureSignatureZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_RoutingFeesDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_RoutingFeesDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_RoutingFeesDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.RoutingFees?
  public class func ok(o: LDKFramework_Mac.RoutingFees) -> LDKFramework_Mac.Result_RoutingFeesDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_RoutingFeesDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_RoutingFeesDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Balance : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKBalance)
  public init(pointer: LDKFramework_Mac.LDKBalance, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum BalanceValueType {
    case ClaimableOnChannelClose, ClaimableAwaitingConfirmations, ContentiousClaimable, MaybeClaimableHTLCAwaitingTimeout
    public static func == (a: LDKFramework_Mac.Balance.BalanceValueType, b: LDKFramework_Mac.Balance.BalanceValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.Balance.BalanceValueType?
  public func getValueAsClaimableOnChannelClose() -> LDKFramework_Mac.Balance.ClaimableOnChannelClose?
  public func getValueAsClaimableAwaitingConfirmations() -> LDKFramework_Mac.Balance.ClaimableAwaitingConfirmations?
  public func getValueAsContentiousClaimable() -> LDKFramework_Mac.Balance.ContentiousClaimable?
  public func getValueAsMaybeClaimableHTLCAwaitingTimeout() -> LDKFramework_Mac.Balance.MaybeClaimableHTLCAwaitingTimeout?
  @objc deinit
  public func clone() -> LDKFramework_Mac.Balance
  public class func claimable_on_channel_close(claimable_amount_satoshis: Swift.UInt64) -> LDKFramework_Mac.Balance
  public class func claimable_awaiting_confirmations(claimable_amount_satoshis: Swift.UInt64, confirmation_height: Swift.UInt32) -> LDKFramework_Mac.Balance
  public class func contentious_claimable(claimable_amount_satoshis: Swift.UInt64, timeout_height: Swift.UInt32) -> LDKFramework_Mac.Balance
  public class func maybe_claimable_htlcawaiting_timeout(claimable_amount_satoshis: Swift.UInt64, claimable_height: Swift.UInt32) -> LDKFramework_Mac.Balance
  public class func eq(a: LDKFramework_Mac.Balance, b: LDKFramework_Mac.Balance) -> Swift.Bool
  @_hasMissingDesignatedInitializers public class ClaimableOnChannelClose : LDKFramework_Mac.NativeTypeWrapper {
    public func getClaimable_amount_satoshis() -> Swift.UInt64
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ClaimableAwaitingConfirmations : LDKFramework_Mac.NativeTypeWrapper {
    public func getClaimable_amount_satoshis() -> Swift.UInt64
    public func getConfirmation_height() -> Swift.UInt32
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class ContentiousClaimable : LDKFramework_Mac.NativeTypeWrapper {
    public func getClaimable_amount_satoshis() -> Swift.UInt64
    public func getTimeout_height() -> Swift.UInt32
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class MaybeClaimableHTLCAwaitingTimeout : LDKFramework_Mac.NativeTypeWrapper {
    public func getClaimable_amount_satoshis() -> Swift.UInt64
    public func getClaimable_height() -> Swift.UInt32
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers open class EventHandler : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKEventHandler)
  public init(pointer: LDKFramework_Mac.LDKEventHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func handle_event(event: LDKFramework_Mac.Event)
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedEventHandler : LDKFramework_Mac.EventHandler {
  override public func handle_event(event: LDKFramework_Mac.Event)
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKEventHandler)
  override public init(pointer: LDKFramework_Mac.LDKEventHandler, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Ping : LDKFramework_Mac.NativeTypeWrapper {
  public init(ponglen_arg: Swift.UInt16, byteslen_arg: Swift.UInt16)
  public init(pointer: LDKFramework_Mac.LDKPing)
  public init(pointer: LDKFramework_Mac.LDKPing, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_ponglen() -> Swift.UInt16
  public func set_ponglen(val: Swift.UInt16)
  public func get_byteslen() -> Swift.UInt16
  public func set_byteslen(val: Swift.UInt16)
  public func clone() -> LDKFramework_Mac.Ping
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_PingDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_CVec_CVec_u8ZZNoneZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_CVec_u8ZZNoneZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CVec_CVec_u8ZZNoneZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getValue() -> [[Swift.UInt8]]?
  public class func ok(o: [[Swift.UInt8]]) -> LDKFramework_Mac.Result_CVec_CVec_u8ZZNoneZ
  public class func err() -> LDKFramework_Mac.Result_CVec_CVec_u8ZZNoneZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CVec_CVec_u8ZZNoneZ
}
@_hasMissingDesignatedInitializers public class C2Tuple_PublicKeyTypeZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_PublicKeyTypeZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_PublicKeyTypeZ
  public class func new(a: [Swift.UInt8], b: LDKFramework_Mac.BindingsType) -> LDKFramework_Mac.C2Tuple_PublicKeyTypeZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_StringErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_StringErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_StringErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKSecp256k1Error?
  public func getValue() -> Swift.String?
  public class func ok(o: Swift.String) -> LDKFramework_Mac.Result_StringErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func err(e: LDKFramework_Mac.LDKSecp256k1Error) -> LDKFramework_Mac.Result_StringErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ErrorMessage : LDKFramework_Mac.NativeTypeWrapper {
  public init(channel_id_arg: [Swift.UInt8], data_arg: Swift.String)
  public init(pointer: LDKFramework_Mac.LDKErrorMessage)
  public init(pointer: LDKFramework_Mac.LDKErrorMessage, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_channel_id() -> [Swift.UInt8]
  public func set_channel_id(val: [Swift.UInt8])
  public func get_data() -> Swift.String
  public func set_data(val: Swift.String)
  public func clone() -> LDKFramework_Mac.ErrorMessage
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ErrorMessageDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BaseSign : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKBaseSign)
  public init(pointer: LDKFramework_Mac.LDKBaseSign, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func get_per_commitment_point(idx: Swift.UInt64) -> [Swift.UInt8]
  open func release_commitment_secret(idx: Swift.UInt64) -> [Swift.UInt8]
  open func validate_holder_commitment(holder_tx: LDKFramework_Mac.HolderCommitmentTransaction, preimages: [[Swift.UInt8]]) -> LDKFramework_Mac.Result_NoneNoneZ
  open func channel_keys_id() -> [Swift.UInt8]
  open func sign_counterparty_commitment(commitment_tx: LDKFramework_Mac.CommitmentTransaction, preimages: [[Swift.UInt8]]) -> LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  open func validate_counterparty_revocation(idx: Swift.UInt64, secret: [Swift.UInt8]?) -> LDKFramework_Mac.Result_NoneNoneZ
  open func sign_holder_commitment_and_htlcs(commitment_tx: LDKFramework_Mac.HolderCommitmentTransaction) -> LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  open func sign_justice_revoked_output(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?) -> LDKFramework_Mac.Result_SignatureNoneZ
  open func sign_justice_revoked_htlc(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?, htlc: LDKFramework_Mac.HTLCOutputInCommitment) -> LDKFramework_Mac.Result_SignatureNoneZ
  open func sign_counterparty_htlc_transaction(htlc_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_point: [Swift.UInt8], htlc: LDKFramework_Mac.HTLCOutputInCommitment) -> LDKFramework_Mac.Result_SignatureNoneZ
  open func sign_closing_transaction(closing_tx: LDKFramework_Mac.ClosingTransaction) -> LDKFramework_Mac.Result_SignatureNoneZ
  open func sign_channel_announcement(msg: LDKFramework_Mac.UnsignedChannelAnnouncement) -> LDKFramework_Mac.Result_C2Tuple_SignatureSignatureZNoneZ
  open func ready_channel(channel_parameters: LDKFramework_Mac.ChannelTransactionParameters)
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedBaseSign : LDKFramework_Mac.BaseSign {
  override public func get_per_commitment_point(idx: Swift.UInt64) -> [Swift.UInt8]
  override public func release_commitment_secret(idx: Swift.UInt64) -> [Swift.UInt8]
  override public func validate_holder_commitment(holder_tx: LDKFramework_Mac.HolderCommitmentTransaction, preimages: [[Swift.UInt8]]) -> LDKFramework_Mac.Result_NoneNoneZ
  override public func channel_keys_id() -> [Swift.UInt8]
  override public func sign_counterparty_commitment(commitment_tx: LDKFramework_Mac.CommitmentTransaction, preimages: [[Swift.UInt8]]) -> LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  override public func validate_counterparty_revocation(idx: Swift.UInt64, secret: [Swift.UInt8]?) -> LDKFramework_Mac.Result_NoneNoneZ
  override public func sign_holder_commitment_and_htlcs(commitment_tx: LDKFramework_Mac.HolderCommitmentTransaction) -> LDKFramework_Mac.Result_C2Tuple_SignatureCVec_SignatureZZNoneZ
  override public func sign_justice_revoked_output(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?) -> LDKFramework_Mac.Result_SignatureNoneZ
  override public func sign_justice_revoked_htlc(justice_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_key: [Swift.UInt8]?, htlc: LDKFramework_Mac.HTLCOutputInCommitment) -> LDKFramework_Mac.Result_SignatureNoneZ
  override public func sign_counterparty_htlc_transaction(htlc_tx: [Swift.UInt8], input: Swift.UInt, amount: Swift.UInt64, per_commitment_point: [Swift.UInt8], htlc: LDKFramework_Mac.HTLCOutputInCommitment) -> LDKFramework_Mac.Result_SignatureNoneZ
  override public func sign_closing_transaction(closing_tx: LDKFramework_Mac.ClosingTransaction) -> LDKFramework_Mac.Result_SignatureNoneZ
  override public func sign_channel_announcement(msg: LDKFramework_Mac.UnsignedChannelAnnouncement) -> LDKFramework_Mac.Result_C2Tuple_SignatureSignatureZNoneZ
  override public func ready_channel(channel_parameters: LDKFramework_Mac.ChannelTransactionParameters)
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKBaseSign)
  override public init(pointer: LDKFramework_Mac.LDKBaseSign, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetAddress : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKNetAddress)
  public init(pointer: LDKFramework_Mac.LDKNetAddress, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum NetAddressValueType {
    case IPv4, IPv6, OnionV2, OnionV3
    public static func == (a: LDKFramework_Mac.NetAddress.NetAddressValueType, b: LDKFramework_Mac.NetAddress.NetAddressValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.NetAddress.NetAddressValueType?
  public func getValueAsIPv4() -> LDKFramework_Mac.NetAddress.IPv4?
  public func getValueAsIPv6() -> LDKFramework_Mac.NetAddress.IPv6?
  public func getValueAsOnionV2() -> [Swift.UInt8]?
  public func getValueAsOnionV3() -> LDKFramework_Mac.NetAddress.OnionV3?
  @objc deinit
  public func clone() -> LDKFramework_Mac.NetAddress
  public class func ipv4(addr: [Swift.UInt8], port: Swift.UInt16) -> LDKFramework_Mac.NetAddress
  public class func ipv6(addr: [Swift.UInt8], port: Swift.UInt16) -> LDKFramework_Mac.NetAddress
  public class func onion_v2(a: [Swift.UInt8]) -> LDKFramework_Mac.NetAddress
  public class func onion_v3(ed25519_pubkey: [Swift.UInt8], checksum: Swift.UInt16, version: Swift.UInt8, port: Swift.UInt16) -> LDKFramework_Mac.NetAddress
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_NetAddressDecodeErrorZ
  @_hasMissingDesignatedInitializers public class IPv4 : LDKFramework_Mac.NativeTypeWrapper {
    public func getAddr() -> [Swift.UInt8]
    public func getPort() -> Swift.UInt16
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class IPv6 : LDKFramework_Mac.NativeTypeWrapper {
    public func getAddr() -> [Swift.UInt8]
    public func getPort() -> Swift.UInt16
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class OnionV3 : LDKFramework_Mac.NativeTypeWrapper {
    public func getEd25519_pubkey() -> [Swift.UInt8]
    public func getChecksum() -> Swift.UInt16
    public func getVersion() -> Swift.UInt8
    public func getPort() -> Swift.UInt16
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class ParseOrSemanticError : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKParseOrSemanticError)
  public init(pointer: LDKFramework_Mac.LDKParseOrSemanticError, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public enum ParseOrSemanticErrorValueType {
    case ParseError, SemanticError
    public static func == (a: LDKFramework_Mac.ParseOrSemanticError.ParseOrSemanticErrorValueType, b: LDKFramework_Mac.ParseOrSemanticError.ParseOrSemanticErrorValueType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func getValueType() -> LDKFramework_Mac.ParseOrSemanticError.ParseOrSemanticErrorValueType?
  public func getValueAsParseError() -> LDKFramework_Mac.ParseError?
  public func getValueAsSemanticError() -> LDKFramework_Mac.LDKSemanticError?
  @objc deinit
  public func clone() -> LDKFramework_Mac.ParseOrSemanticError
  public class func parse_error(a: LDKFramework_Mac.ParseError) -> LDKFramework_Mac.ParseOrSemanticError
  public class func semantic_error(a: LDKFramework_Mac.LDKSemanticError) -> LDKFramework_Mac.ParseOrSemanticError
  public func to_str() -> Swift.String
}
@_hasMissingDesignatedInitializers public class Result_PingDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_PingDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_PingDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.Ping?
  public class func ok(o: LDKFramework_Mac.Ping) -> LDKFramework_Mac.Result_PingDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_PingDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_PingDecodeErrorZ
}
@_hasMissingDesignatedInitializers open class BindingsType : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKType)
  public init(pointer: LDKFramework_Mac.LDKType, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.BindingsType
  @objc deinit
  open func type_id() -> Swift.UInt16
  open func debug_str() -> Swift.String
  open func write() -> [Swift.UInt8]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedBindingsType : LDKFramework_Mac.BindingsType {
  override public func type_id() -> Swift.UInt16
  override public func debug_str() -> Swift.String
  override public func write() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKType)
  override public init(pointer: LDKFramework_Mac.LDKType, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_InvoiceSemanticErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceSemanticErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_InvoiceSemanticErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKSemanticError?
  public func getValue() -> LDKFramework_Mac.Invoice?
  public class func ok(o: LDKFramework_Mac.Invoice) -> LDKFramework_Mac.Result_InvoiceSemanticErrorZ
  public class func err(e: LDKFramework_Mac.LDKSemanticError) -> LDKFramework_Mac.Result_InvoiceSemanticErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_InvoiceSemanticErrorZ
}
@_hasMissingDesignatedInitializers public class ChannelInfo : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKChannelInfo)
  public init(pointer: LDKFramework_Mac.LDKChannelInfo, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_features() -> LDKFramework_Mac.ChannelFeatures
  public func set_features(val: LDKFramework_Mac.ChannelFeatures)
  public func get_node_one() -> LDKFramework_Mac.NodeId
  public func set_node_one(val: LDKFramework_Mac.NodeId)
  public func get_one_to_two() -> LDKFramework_Mac.ChannelUpdateInfo
  public func set_one_to_two(val: LDKFramework_Mac.ChannelUpdateInfo)
  public func get_node_two() -> LDKFramework_Mac.NodeId
  public func set_node_two(val: LDKFramework_Mac.NodeId)
  public func get_two_to_one() -> LDKFramework_Mac.ChannelUpdateInfo
  public func set_two_to_one(val: LDKFramework_Mac.ChannelUpdateInfo)
  public func get_capacity_sats() -> LDKFramework_Mac.Option_u64Z
  public func set_capacity_sats(val: LDKFramework_Mac.Option_u64Z)
  public func get_announcement_message() -> LDKFramework_Mac.ChannelAnnouncement
  public func set_announcement_message(val: LDKFramework_Mac.ChannelAnnouncement)
  public func clone() -> LDKFramework_Mac.ChannelInfo
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ChannelInfoDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_SecretKeyErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_SecretKeyErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_SecretKeyErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKSecp256k1Error?
  public func getValue() -> [Swift.UInt8]?
  public class func ok(o: [Swift.UInt8]) -> LDKFramework_Mac.Result_SecretKeyErrorZ
  #warning("This method passes non-cloneable objects by owned value. Here be dragons.")
  @available(*, deprecated, message: "This method passes non-cloneable objects by owned value. Here be dragons.")
  public class func err(e: LDKFramework_Mac.LDKSecp256k1Error) -> LDKFramework_Mac.Result_SecretKeyErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_SecretKeyErrorZ
}
@_hasMissingDesignatedInitializers public class ChannelManager : LDKFramework_Mac.NativeTypeWrapper {
  public init(fee_est: LDKFramework_Mac.FeeEstimator, chain_monitor: LDKFramework_Mac.Watch, tx_broadcaster: LDKFramework_Mac.BroadcasterInterface, logger: LDKFramework_Mac.Logger, keys_manager: LDKFramework_Mac.KeysInterface, config: LDKFramework_Mac.UserConfig, params: LDKFramework_Mac.ChainParameters)
  public init(pointer: LDKFramework_Mac.LDKChannelManager)
  public init(pointer: LDKFramework_Mac.LDKChannelManager, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_current_default_configuration() -> LDKFramework_Mac.UserConfig
  public func create_channel(their_network_key: [Swift.UInt8], channel_value_satoshis: Swift.UInt64, push_msat: Swift.UInt64, user_channel_id: Swift.UInt64, override_config: LDKFramework_Mac.UserConfig) -> LDKFramework_Mac.Result__u832APIErrorZ
  public func list_channels() -> [LDKFramework_Mac.ChannelDetails]
  public func list_usable_channels() -> [LDKFramework_Mac.ChannelDetails]
  public func close_channel(channel_id: [Swift.UInt8]) -> LDKFramework_Mac.Result_NoneAPIErrorZ
  public func close_channel_with_target_feerate(channel_id: [Swift.UInt8], target_feerate_sats_per_1000_weight: Swift.UInt32) -> LDKFramework_Mac.Result_NoneAPIErrorZ
  public func force_close_channel(channel_id: [Swift.UInt8]) -> LDKFramework_Mac.Result_NoneAPIErrorZ
  public func force_close_all_channels()
  public func send_payment(route: LDKFramework_Mac.Route, payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentIdPaymentSendFailureZ
  public func retry_payment(route: LDKFramework_Mac.Route, payment_id: [Swift.UInt8]) -> LDKFramework_Mac.Result_NonePaymentSendFailureZ
  public func abandon_payment(payment_id: [Swift.UInt8])
  public func send_spontaneous_payment(route: LDKFramework_Mac.Route, payment_preimage: [Swift.UInt8]) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentIdZPaymentSendFailureZ
  public func funding_transaction_generated(temporary_channel_id: [Swift.UInt8], funding_transaction: [Swift.UInt8]) -> LDKFramework_Mac.Result_NoneAPIErrorZ
  public func broadcast_node_announcement(rgb: [Swift.UInt8], alias: [Swift.UInt8], addresses: [LDKFramework_Mac.NetAddress])
  public func process_pending_htlc_forwards()
  public func timer_tick_occurred()
  public func fail_htlc_backwards(payment_hash: [Swift.UInt8]) -> Swift.Bool
  public func claim_funds(payment_preimage: [Swift.UInt8]) -> Swift.Bool
  public func get_our_node_id() -> [Swift.UInt8]
  public func accept_inbound_channel(temporary_channel_id: [Swift.UInt8], user_channel_id: Swift.UInt64) -> LDKFramework_Mac.Result_NoneAPIErrorZ
  public func create_inbound_payment(min_value_msat: LDKFramework_Mac.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZNoneZ
  public func create_inbound_payment_legacy(min_value_msat: LDKFramework_Mac.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LDKFramework_Mac.Result_C2Tuple_PaymentHashPaymentSecretZAPIErrorZ
  public func create_inbound_payment_for_hash(payment_hash: [Swift.UInt8], min_value_msat: LDKFramework_Mac.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LDKFramework_Mac.Result_PaymentSecretNoneZ
  public func create_inbound_payment_for_hash_legacy(payment_hash: [Swift.UInt8], min_value_msat: LDKFramework_Mac.Option_u64Z, invoice_expiry_delta_secs: Swift.UInt32) -> LDKFramework_Mac.Result_PaymentSecretAPIErrorZ
  public func get_payment_preimage(payment_hash: [Swift.UInt8], payment_secret: [Swift.UInt8]) -> LDKFramework_Mac.Result_PaymentPreimageAPIErrorZ
  public func get_phantom_scid() -> Swift.UInt64
  public func get_phantom_route_hints() -> LDKFramework_Mac.PhantomRouteHints
  public func as_MessageSendEventsProvider() -> LDKFramework_Mac.NativelyImplementedMessageSendEventsProvider
  public func as_EventsProvider() -> LDKFramework_Mac.NativelyImplementedEventsProvider
  public func as_Listen() -> LDKFramework_Mac.NativelyImplementedListen
  public func as_Confirm() -> LDKFramework_Mac.NativelyImplementedConfirm
  public func await_persistable_update_timeout(max_wait: Swift.UInt64) -> Swift.Bool
  public func await_persistable_update()
  public func current_best_block() -> LDKFramework_Mac.BestBlock
  public func as_ChannelMessageHandler() -> LDKFramework_Mac.NativelyImplementedChannelMessageHandler
  public func write() -> [Swift.UInt8]
  public func as_Payer() -> LDKFramework_Mac.NativelyImplementedPayer
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AcceptChannel : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKAcceptChannel)
  public init(pointer: LDKFramework_Mac.LDKAcceptChannel, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_temporary_channel_id() -> [Swift.UInt8]
  public func set_temporary_channel_id(val: [Swift.UInt8])
  public func get_dust_limit_satoshis() -> Swift.UInt64
  public func set_dust_limit_satoshis(val: Swift.UInt64)
  public func get_max_htlc_value_in_flight_msat() -> Swift.UInt64
  public func set_max_htlc_value_in_flight_msat(val: Swift.UInt64)
  public func get_channel_reserve_satoshis() -> Swift.UInt64
  public func set_channel_reserve_satoshis(val: Swift.UInt64)
  public func get_htlc_minimum_msat() -> Swift.UInt64
  public func set_htlc_minimum_msat(val: Swift.UInt64)
  public func get_minimum_depth() -> Swift.UInt32
  public func set_minimum_depth(val: Swift.UInt32)
  public func get_to_self_delay() -> Swift.UInt16
  public func set_to_self_delay(val: Swift.UInt16)
  public func get_max_accepted_htlcs() -> Swift.UInt16
  public func set_max_accepted_htlcs(val: Swift.UInt16)
  public func get_funding_pubkey() -> [Swift.UInt8]
  public func set_funding_pubkey(val: [Swift.UInt8])
  public func get_revocation_basepoint() -> [Swift.UInt8]
  public func set_revocation_basepoint(val: [Swift.UInt8])
  public func get_payment_point() -> [Swift.UInt8]
  public func set_payment_point(val: [Swift.UInt8])
  public func get_delayed_payment_basepoint() -> [Swift.UInt8]
  public func set_delayed_payment_basepoint(val: [Swift.UInt8])
  public func get_htlc_basepoint() -> [Swift.UInt8]
  public func set_htlc_basepoint(val: [Swift.UInt8])
  public func get_first_per_commitment_point() -> [Swift.UInt8]
  public func set_first_per_commitment_point(val: [Swift.UInt8])
  public func get_channel_type() -> LDKFramework_Mac.ChannelTypeFeatures
  public func set_channel_type(val: LDKFramework_Mac.ChannelTypeFeatures)
  public func clone() -> LDKFramework_Mac.AcceptChannel
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_AcceptChannelDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_DescriptionCreationErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_DescriptionCreationErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_DescriptionCreationErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.LDKCreationError?
  public func getValue() -> LDKFramework_Mac.Description?
  public class func ok(o: LDKFramework_Mac.Description) -> LDKFramework_Mac.Result_DescriptionCreationErrorZ
  public class func err(e: LDKFramework_Mac.LDKCreationError) -> LDKFramework_Mac.Result_DescriptionCreationErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_DescriptionCreationErrorZ
}
@_hasMissingDesignatedInitializers public class Result_boolPeerHandleErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_boolPeerHandleErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_boolPeerHandleErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.PeerHandleError?
  public func getValue() -> Swift.Bool?
  public class func ok(o: Swift.Bool) -> LDKFramework_Mac.Result_boolPeerHandleErrorZ
  public class func err(e: LDKFramework_Mac.PeerHandleError) -> LDKFramework_Mac.Result_boolPeerHandleErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_boolPeerHandleErrorZ
}
@_hasMissingDesignatedInitializers public class Result_FixedPenaltyScorerDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_FixedPenaltyScorerDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_FixedPenaltyScorerDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.FixedPenaltyScorer?
  public class func ok(o: LDKFramework_Mac.FixedPenaltyScorer) -> LDKFramework_Mac.Result_FixedPenaltyScorerDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_FixedPenaltyScorerDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_FixedPenaltyScorerDecodeErrorZ
}
@_hasMissingDesignatedInitializers open class CustomMessageReader : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCustomMessageReader)
  public init(pointer: LDKFramework_Mac.LDKCustomMessageReader, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func read(message_type: Swift.UInt16, buffer: [Swift.UInt8]) -> LDKFramework_Mac.Result_COption_TypeZDecodeErrorZ
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedCustomMessageReader : LDKFramework_Mac.CustomMessageReader {
  override public func read(message_type: Swift.UInt16, buffer: [Swift.UInt8]) -> LDKFramework_Mac.Result_COption_TypeZDecodeErrorZ
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKCustomMessageReader)
  override public init(pointer: LDKFramework_Mac.LDKCustomMessageReader, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Sign : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKSign)
  public init(pointer: LDKFramework_Mac.LDKSign, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.Sign
  @objc deinit
  open func write() -> [Swift.UInt8]
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedSign : LDKFramework_Mac.Sign {
  override public func write() -> [Swift.UInt8]
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKSign)
  override public init(pointer: LDKFramework_Mac.LDKSign, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Result_CommitmentSignedDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_CommitmentSignedDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_CommitmentSignedDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.CommitmentSigned?
  public class func ok(o: LDKFramework_Mac.CommitmentSigned) -> LDKFramework_Mac.Result_CommitmentSignedDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_CommitmentSignedDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_CommitmentSignedDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class Result_ChannelUpdateDecodeErrorZ : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelUpdateDecodeErrorZ)
  public init(pointer: LDKFramework_Mac.LDKCResult_ChannelUpdateDecodeErrorZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func isOk() -> Swift.Bool
  public func getError() -> LDKFramework_Mac.DecodeError?
  public func getValue() -> LDKFramework_Mac.ChannelUpdate?
  public class func ok(o: LDKFramework_Mac.ChannelUpdate) -> LDKFramework_Mac.Result_ChannelUpdateDecodeErrorZ
  public class func err(e: LDKFramework_Mac.DecodeError) -> LDKFramework_Mac.Result_ChannelUpdateDecodeErrorZ
  @objc deinit
  public func clone() -> LDKFramework_Mac.Result_ChannelUpdateDecodeErrorZ
}
@_hasMissingDesignatedInitializers public class C2Tuple_PaymentHashPaymentSecretZ : LDKFramework_Mac.NativeTypeWrapper {
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_PaymentHashPaymentSecretZ)
  public init(pointer: LDKFramework_Mac.LDKC2Tuple_PaymentHashPaymentSecretZ, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func clone() -> LDKFramework_Mac.C2Tuple_PaymentHashPaymentSecretZ
  public class func new(a: [Swift.UInt8], b: [Swift.UInt8]) -> LDKFramework_Mac.C2Tuple_PaymentHashPaymentSecretZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NodeAnnouncement : LDKFramework_Mac.NativeTypeWrapper {
  public init(signature_arg: [Swift.UInt8], contents_arg: LDKFramework_Mac.UnsignedNodeAnnouncement)
  public init(pointer: LDKFramework_Mac.LDKNodeAnnouncement)
  public init(pointer: LDKFramework_Mac.LDKNodeAnnouncement, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func get_signature() -> [Swift.UInt8]
  public func set_signature(val: [Swift.UInt8])
  public func get_contents() -> LDKFramework_Mac.UnsignedNodeAnnouncement
  public func set_contents(val: LDKFramework_Mac.UnsignedNodeAnnouncement)
  public func clone() -> LDKFramework_Mac.NodeAnnouncement
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_NodeAnnouncementDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Scorer : LDKFramework_Mac.NativeTypeWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKScorer)
  public init(pointer: LDKFramework_Mac.LDKScorer, anchor: LDKFramework_Mac.NativeTypeWrapper)
  public func as_Score() -> LDKFramework_Mac.NativelyImplementedScore
  public func write() -> [Swift.UInt8]
  public class func read(ser: [Swift.UInt8]) -> LDKFramework_Mac.Result_ScorerDecodeErrorZ
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Persister : LDKFramework_Mac.NativeTraitWrapper {
  public init()
  public init(pointer: LDKFramework_Mac.LDKPersister)
  public init(pointer: LDKFramework_Mac.LDKPersister, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
  open func persist_manager(channel_manager: LDKFramework_Mac.ChannelManager) -> LDKFramework_Mac.Result_NoneErrorZ
  open func persist_graph(network_graph: LDKFramework_Mac.NetworkGraph) -> LDKFramework_Mac.Result_NoneErrorZ
  open func free()
}
@_inheritsConvenienceInitializers public class NativelyImplementedPersister : LDKFramework_Mac.Persister {
  override public func persist_manager(channel_manager: LDKFramework_Mac.ChannelManager) -> LDKFramework_Mac.Result_NoneErrorZ
  override public func persist_graph(network_graph: LDKFramework_Mac.NetworkGraph) -> LDKFramework_Mac.Result_NoneErrorZ
  override public func free()
  override public init()
  override public init(pointer: LDKFramework_Mac.LDKPersister)
  override public init(pointer: LDKFramework_Mac.LDKPersister, anchor: LDKFramework_Mac.NativeTypeWrapper)
  @objc deinit
}
extension LDKFramework_Mac.MonitorEvent.MonitorEventValueType : Swift.Equatable {}
extension LDKFramework_Mac.MonitorEvent.MonitorEventValueType : Swift.Hashable {}
extension LDKFramework_Mac.ErrorAction.ErrorActionValueType : Swift.Equatable {}
extension LDKFramework_Mac.ErrorAction.ErrorActionValueType : Swift.Hashable {}
extension LDKFramework_Mac.Event.EventValueType : Swift.Equatable {}
extension LDKFramework_Mac.Event.EventValueType : Swift.Hashable {}
extension LDKFramework_Mac.SpendableOutputDescriptor.SpendableOutputDescriptorValueType : Swift.Equatable {}
extension LDKFramework_Mac.SpendableOutputDescriptor.SpendableOutputDescriptorValueType : Swift.Hashable {}
extension LDKFramework_Mac.PaymentError.PaymentErrorValueType : Swift.Equatable {}
extension LDKFramework_Mac.PaymentError.PaymentErrorValueType : Swift.Hashable {}
extension LDKFramework_Mac.ClosureReason.ClosureReasonValueType : Swift.Equatable {}
extension LDKFramework_Mac.ClosureReason.ClosureReasonValueType : Swift.Hashable {}
extension LDKFramework_Mac.MessageSendEvent.MessageSendEventValueType : Swift.Equatable {}
extension LDKFramework_Mac.MessageSendEvent.MessageSendEventValueType : Swift.Hashable {}
extension LDKFramework_Mac.APIError.APIErrorValueType : Swift.Equatable {}
extension LDKFramework_Mac.APIError.APIErrorValueType : Swift.Hashable {}
extension LDKFramework_Mac.SignOrCreationError.SignOrCreationErrorValueType : Swift.Equatable {}
extension LDKFramework_Mac.SignOrCreationError.SignOrCreationErrorValueType : Swift.Hashable {}
extension LDKFramework_Mac.NetworkUpdate.NetworkUpdateValueType : Swift.Equatable {}
extension LDKFramework_Mac.NetworkUpdate.NetworkUpdateValueType : Swift.Hashable {}
extension LDKFramework_Mac.PaymentPurpose.PaymentPurposeValueType : Swift.Equatable {}
extension LDKFramework_Mac.PaymentPurpose.PaymentPurposeValueType : Swift.Hashable {}
extension LDKFramework_Mac.ParseError.ParseErrorValueType : Swift.Equatable {}
extension LDKFramework_Mac.ParseError.ParseErrorValueType : Swift.Hashable {}
extension LDKFramework_Mac.Bech32Error.Bech32ErrorValueType : Swift.Equatable {}
extension LDKFramework_Mac.Bech32Error.Bech32ErrorValueType : Swift.Hashable {}
extension LDKFramework_Mac.Fallback.FallbackValueType : Swift.Equatable {}
extension LDKFramework_Mac.Fallback.FallbackValueType : Swift.Hashable {}
extension LDKFramework_Mac.EffectiveCapacity.EffectiveCapacityValueType : Swift.Equatable {}
extension LDKFramework_Mac.EffectiveCapacity.EffectiveCapacityValueType : Swift.Hashable {}
extension LDKFramework_Mac.Bindings.PrintSeverity : Swift.Equatable {}
extension LDKFramework_Mac.Bindings.PrintSeverity : Swift.Hashable {}
extension LDKFramework_Mac.Bindings.PrintSeverity : Swift.RawRepresentable {}
extension LDKFramework_Mac.PaymentSendFailure.PaymentSendFailureValueType : Swift.Equatable {}
extension LDKFramework_Mac.PaymentSendFailure.PaymentSendFailureValueType : Swift.Hashable {}
extension LDKFramework_Mac.Balance.BalanceValueType : Swift.Equatable {}
extension LDKFramework_Mac.Balance.BalanceValueType : Swift.Hashable {}
extension LDKFramework_Mac.NetAddress.NetAddressValueType : Swift.Equatable {}
extension LDKFramework_Mac.NetAddress.NetAddressValueType : Swift.Hashable {}
extension LDKFramework_Mac.ParseOrSemanticError.ParseOrSemanticErrorValueType : Swift.Equatable {}
extension LDKFramework_Mac.ParseOrSemanticError.ParseOrSemanticErrorValueType : Swift.Hashable {}
